# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""

Image processing code

"""

import _fwTests
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _fwTests.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _fwTests.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _fwTests.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _fwTests.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _fwTests.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _fwTests.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _fwTests.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _fwTests.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _fwTests.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _fwTests.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _fwTests.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _fwTests.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _fwTests.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _fwTests.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _fwTests.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _fwTests.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _fwTests.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ios_base(_object):
    """Proxy of C++ ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _fwTests.ios_base_erase_event
    imbue_event = _fwTests.ios_base_imbue_event
    copyfmt_event = _fwTests.ios_base_copyfmt_event
    def register_callback(*args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _fwTests.ios_base_register_callback(*args)

    def flags(*args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _fwTests.ios_base_flags(*args)

    def setf(*args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _fwTests.ios_base_setf(*args)

    def unsetf(*args):
        """unsetf(self, fmtflags __mask)"""
        return _fwTests.ios_base_unsetf(*args)

    def precision(*args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _fwTests.ios_base_precision(*args)

    def width(*args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _fwTests.ios_base_width(*args)

    def sync_with_stdio(*args):
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _fwTests.ios_base_sync_with_stdio(*args)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _fwTests.ios_base_imbue(*args)

    def getloc(*args):
        """getloc(self) -> locale"""
        return _fwTests.ios_base_getloc(*args)

    def xalloc(*args):
        """xalloc() -> int"""
        return _fwTests.ios_base_xalloc(*args)

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(*args):
        """iword(self, int __ix) -> long"""
        return _fwTests.ios_base_iword(*args)

    def pword(*args):
        """pword(self, int __ix) -> void"""
        return _fwTests.ios_base_pword(*args)

    __swig_destroy__ = _fwTests.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _fwTests.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _fwTests.cvar
ios_base.boolalpha = _fwTests.cvar.ios_base_boolalpha
ios_base.dec = _fwTests.cvar.ios_base_dec
ios_base.fixed = _fwTests.cvar.ios_base_fixed
ios_base.hex = _fwTests.cvar.ios_base_hex
ios_base.internal = _fwTests.cvar.ios_base_internal
ios_base.left = _fwTests.cvar.ios_base_left
ios_base.oct = _fwTests.cvar.ios_base_oct
ios_base.right = _fwTests.cvar.ios_base_right
ios_base.scientific = _fwTests.cvar.ios_base_scientific
ios_base.showbase = _fwTests.cvar.ios_base_showbase
ios_base.showpoint = _fwTests.cvar.ios_base_showpoint
ios_base.showpos = _fwTests.cvar.ios_base_showpos
ios_base.skipws = _fwTests.cvar.ios_base_skipws
ios_base.unitbuf = _fwTests.cvar.ios_base_unitbuf
ios_base.uppercase = _fwTests.cvar.ios_base_uppercase
ios_base.adjustfield = _fwTests.cvar.ios_base_adjustfield
ios_base.basefield = _fwTests.cvar.ios_base_basefield
ios_base.floatfield = _fwTests.cvar.ios_base_floatfield
ios_base.badbit = _fwTests.cvar.ios_base_badbit
ios_base.eofbit = _fwTests.cvar.ios_base_eofbit
ios_base.failbit = _fwTests.cvar.ios_base_failbit
ios_base.goodbit = _fwTests.cvar.ios_base_goodbit
ios_base.app = _fwTests.cvar.ios_base_app
ios_base.ate = _fwTests.cvar.ios_base_ate
ios_base.binary = _fwTests.cvar.ios_base_binary
ios_base.ios_base_in = _fwTests.cvar.ios_base_ios_base_in
ios_base.out = _fwTests.cvar.ios_base_out
ios_base.trunc = _fwTests.cvar.ios_base_trunc
ios_base.beg = _fwTests.cvar.ios_base_beg
ios_base.cur = _fwTests.cvar.ios_base_cur
ios_base.end = _fwTests.cvar.ios_base_end

def ios_base_sync_with_stdio(*args):
  """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _fwTests.ios_base_sync_with_stdio(*args)

def ios_base_xalloc(*args):
  """ios_base_xalloc() -> int"""
  return _fwTests.ios_base_xalloc(*args)

class ios(ios_base):
    """Proxy of C++ ios class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args):
        """rdstate(self) -> iostate"""
        return _fwTests.ios_rdstate(*args)

    def clear(*args):
        """
        clear(self, iostate __state=goodbit)
        clear(self)
        """
        return _fwTests.ios_clear(*args)

    def setstate(*args):
        """setstate(self, iostate __state)"""
        return _fwTests.ios_setstate(*args)

    def good(*args):
        """good(self) -> bool"""
        return _fwTests.ios_good(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _fwTests.ios_eof(*args)

    def fail(*args):
        """fail(self) -> bool"""
        return _fwTests.ios_fail(*args)

    def bad(*args):
        """bad(self) -> bool"""
        return _fwTests.ios_bad(*args)

    def exceptions(*args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _fwTests.ios_exceptions(*args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _fwTests.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_ios
    __del__ = lambda self : None;
    def tie(*args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _fwTests.ios_tie(*args)

    def rdbuf(*args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _fwTests.ios_rdbuf(*args)

    def copyfmt(*args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _fwTests.ios_copyfmt(*args)

    def fill(*args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _fwTests.ios_fill(*args)

    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _fwTests.ios_imbue(*args)

    def narrow(*args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _fwTests.ios_narrow(*args)

    def widen(*args):
        """widen(self, char __c) -> char_type"""
        return _fwTests.ios_widen(*args)

ios_swigregister = _fwTests.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ ostream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _fwTests.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _fwTests.ostream___lshift__(*args)

    def put(*args):
        """put(self, char_type __c) -> ostream"""
        return _fwTests.ostream_put(*args)

    def write(*args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _fwTests.ostream_write(*args)

    def flush(*args):
        """flush(self) -> ostream"""
        return _fwTests.ostream_flush(*args)

    def tellp(*args):
        """tellp(self) -> pos_type"""
        return _fwTests.ostream_tellp(*args)

    def seekp(*args):
        """
        seekp(self, pos_type ?) -> ostream
        seekp(self, off_type ?, seekdir ?) -> ostream
        """
        return _fwTests.ostream_seekp(*args)

ostream_swigregister = _fwTests.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ istream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _fwTests.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _fwTests.istream___rshift__(*args)

    def gcount(*args):
        """gcount(self) -> streamsize"""
        return _fwTests.istream_gcount(*args)

    def get(*args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _fwTests.istream_get(*args)

    def getline(*args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _fwTests.istream_getline(*args)

    def ignore(*args):
        """
        ignore(self, streamsize __n=1, int_type __delim=std::char_traits<char >::eof()) -> istream
        ignore(self, streamsize __n=1) -> istream
        ignore(self) -> istream
        """
        return _fwTests.istream_ignore(*args)

    def peek(*args):
        """peek(self) -> int_type"""
        return _fwTests.istream_peek(*args)

    def read(*args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _fwTests.istream_read(*args)

    def readsome(*args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _fwTests.istream_readsome(*args)

    def putback(*args):
        """putback(self, char_type __c) -> istream"""
        return _fwTests.istream_putback(*args)

    def unget(*args):
        """unget(self) -> istream"""
        return _fwTests.istream_unget(*args)

    def sync(*args):
        """sync(self) -> int"""
        return _fwTests.istream_sync(*args)

    def tellg(*args):
        """tellg(self) -> pos_type"""
        return _fwTests.istream_tellg(*args)

    def seekg(*args):
        """
        seekg(self, pos_type ?) -> istream
        seekg(self, off_type ?, seekdir ?) -> istream
        """
        return _fwTests.istream_seekg(*args)

istream_swigregister = _fwTests.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ iostream class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _fwTests.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _fwTests.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _fwTests.endl_cb_ptr
endl = _fwTests.endl
ends_cb_ptr = _fwTests.ends_cb_ptr
ends = _fwTests.ends
flush_cb_ptr = _fwTests.flush_cb_ptr
flush = _fwTests.flush
class floatArray(_object):
    """Proxy of C++ floatArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> floatArray"""
        this = _fwTests.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(*args):
        """__getitem__(self, size_t index) -> float"""
        return _fwTests.floatArray___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, size_t index, float value)"""
        return _fwTests.floatArray___setitem__(*args)

    def cast(*args):
        """cast(self) -> float"""
        return _fwTests.floatArray_cast(*args)

    def frompointer(*args):
        """frompointer(float t) -> floatArray"""
        return _fwTests.floatArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
floatArray_swigregister = _fwTests.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  """floatArray_frompointer(float t) -> floatArray"""
  return _fwTests.floatArray_frompointer(*args)

class doubleArray(_object):
    """Proxy of C++ doubleArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t nelements) -> doubleArray"""
        this = _fwTests.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(*args):
        """__getitem__(self, size_t index) -> double"""
        return _fwTests.doubleArray___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, size_t index, double value)"""
        return _fwTests.doubleArray___setitem__(*args)

    def cast(*args):
        """cast(self) -> double"""
        return _fwTests.doubleArray_cast(*args)

    def frompointer(*args):
        """frompointer(double t) -> doubleArray"""
        return _fwTests.doubleArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
doubleArray_swigregister = _fwTests.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  """doubleArray_frompointer(double t) -> doubleArray"""
  return _fwTests.doubleArray_frompointer(*args)

class unary_function_tuple(_object):
    """Proxy of C++ unary_function_tuple class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, unary_function_tuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unary_function_tuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> unary_function_tuple"""
        this = _fwTests.new_unary_function_tuple(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_unary_function_tuple
    __del__ = lambda self : None;
unary_function_tuple_swigregister = _fwTests.unary_function_tuple_swigregister
unary_function_tuple_swigregister(unary_function_tuple)

class unary_function_tuple2(_object):
    """Proxy of C++ unary_function_tuple2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, unary_function_tuple2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unary_function_tuple2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> unary_function_tuple2"""
        this = _fwTests.new_unary_function_tuple2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fwTests.delete_unary_function_tuple2
    __del__ = lambda self : None;
unary_function_tuple2_swigregister = _fwTests.unary_function_tuple2_swigregister
unary_function_tuple2_swigregister(unary_function_tuple2)

class PixelProcessingFuncD(unary_function_tuple2):
    """Proxy of C++ PixelProcessingFuncD class"""
    __swig_setmethods__ = {}
    for _s in [unary_function_tuple2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PixelProcessingFuncD, name, value)
    __swig_getmethods__ = {}
    for _s in [unary_function_tuple2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelProcessingFuncD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, lsst::fw::MaskedImage<(float,boost::uint8_t)> m) -> PixelProcessingFuncD"""
        this = _fwTests.new_PixelProcessingFuncD(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args):
        """
        __call__(self, lsst::fw::PixelProcessingFunc<(float,boost::uint8_t)>::ImageIteratorT ?, 
            lsst::fw::PixelProcessingFunc<(float,boost::uint8_t)>::MaskIteratorT ?)
        """
        return _fwTests.PixelProcessingFuncD___call__(*args)

    __swig_destroy__ = _fwTests.delete_PixelProcessingFuncD
    __del__ = lambda self : None;
    def getImagePixelLocatorBegin(*args):
        """getImagePixelLocatorBegin(self) -> lsst::fw::PixelProcessingFunc<(float,boost::uint8_t)>::ImageIteratorT"""
        return _fwTests.PixelProcessingFuncD_getImagePixelLocatorBegin(*args)

    def getImagePixelLocatorEnd(*args):
        """getImagePixelLocatorEnd(self) -> lsst::fw::PixelProcessingFunc<(float,boost::uint8_t)>::ImageIteratorT"""
        return _fwTests.PixelProcessingFuncD_getImagePixelLocatorEnd(*args)

    def getMaskPixelLocatorBegin(*args):
        """getMaskPixelLocatorBegin(self) -> lsst::fw::PixelProcessingFunc<(float,boost::uint8_t)>::MaskIteratorT"""
        return _fwTests.PixelProcessingFuncD_getMaskPixelLocatorBegin(*args)

    def getMaskPixelLocatorEnd(*args):
        """getMaskPixelLocatorEnd(self) -> lsst::fw::PixelProcessingFunc<(float,boost::uint8_t)>::MaskIteratorT"""
        return _fwTests.PixelProcessingFuncD_getMaskPixelLocatorEnd(*args)

PixelProcessingFuncD_swigregister = _fwTests.PixelProcessingFuncD_swigregister
PixelProcessingFuncD_swigregister(PixelProcessingFuncD)

class testPixProcFuncD(PixelProcessingFuncD):
    """Proxy of C++ testPixProcFuncD class"""
    __swig_setmethods__ = {}
    for _s in [PixelProcessingFuncD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, testPixProcFuncD, name, value)
    __swig_getmethods__ = {}
    for _s in [PixelProcessingFuncD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, testPixProcFuncD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, lsst::fw::MaskedImage<(float,boost::uint8_t)> m) -> testPixProcFuncD"""
        this = _fwTests.new_testPixProcFuncD(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(*args):
        """init(self)"""
        return _fwTests.testPixProcFuncD_init(*args)

    def __call__(*args):
        """
        __call__(self, testPixProcFunc<(float,boost::uint8_t)>::ImageIteratorT i, 
            testPixProcFunc<(float,boost::uint8_t)>::MaskIteratorT m)
        """
        return _fwTests.testPixProcFuncD___call__(*args)

    __swig_destroy__ = _fwTests.delete_testPixProcFuncD
    __del__ = lambda self : None;
testPixProcFuncD_swigregister = _fwTests.testPixProcFuncD_swigregister
testPixProcFuncD_swigregister(testPixProcFuncD)

class MaskPixelBooleanFuncD(_object):
    """Proxy of C++ MaskPixelBooleanFuncD class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MaskPixelBooleanFuncD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaskPixelBooleanFuncD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, lsst::fw::Mask<(boost::uint8_t)> m) -> MaskPixelBooleanFuncD"""
        this = _fwTests.new_MaskPixelBooleanFuncD(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args):
        """__call__(self, boost::uint8_t ?) -> bool"""
        return _fwTests.MaskPixelBooleanFuncD___call__(*args)

    __swig_destroy__ = _fwTests.delete_MaskPixelBooleanFuncD
    __del__ = lambda self : None;
MaskPixelBooleanFuncD_swigregister = _fwTests.MaskPixelBooleanFuncD_swigregister
MaskPixelBooleanFuncD_swigregister(MaskPixelBooleanFuncD)

class testCrFuncD(MaskPixelBooleanFuncD):
    """Proxy of C++ testCrFuncD class"""
    __swig_setmethods__ = {}
    for _s in [MaskPixelBooleanFuncD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, testCrFuncD, name, value)
    __swig_getmethods__ = {}
    for _s in [MaskPixelBooleanFuncD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, testCrFuncD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, lsst::fw::Mask<(boost::uint8_t)> m) -> testCrFuncD"""
        this = _fwTests.new_testCrFuncD(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(*args):
        """init(self)"""
        return _fwTests.testCrFuncD_init(*args)

    def __call__(*args):
        """__call__(self, boost::uint8_t pixel) -> bool"""
        return _fwTests.testCrFuncD___call__(*args)

    __swig_destroy__ = _fwTests.delete_testCrFuncD
    __del__ = lambda self : None;
testCrFuncD_swigregister = _fwTests.testCrFuncD_swigregister
testCrFuncD_swigregister(testCrFuncD)



