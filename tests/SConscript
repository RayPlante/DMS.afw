# -*- python -*-
Import("env")

env.Program(["Mask_1.cc"], LIBS=env.libs["vw"] + ["fw"])
env.Program(["MaskedImage_1.cc"], LIBS=env.libs["vw"] + ["fw"] + ["cfitsio"] + ["fitsio"])
env.Program(["BuildExcept.cc"], LIBS="fw")
env.Program(["DataProperty_1.cc"], LIBS="fw")
env.Program(["MaskIO_1.cc"], LIBS=env.libs["vw"] + ["fw"] + ["cfitsio"] + ["fitsio"])
env.Program(["MaskedImageIO_1.cc"], LIBS=env.libs["vw"] + ["fw"] + ["cfitsio"] + ["fitsio"])
env.Program(["lsstdata01.cc"], LIBS=env.libs["vw"] + ["fw"])

env.CheckSwig("python", ilang="c++")
env.Append(SWIGFLAGS=" -Ipython")
fwTests = env.LoadableModuleIncomplete("_fwTests", "fwTests.i",
                                       LIBS=env.libs["vw"] + ["fw"])
#
# Tests
#
import glob, os
env.AppendENVPath('PYTHONPATH', os.environ['PYTHONPATH'])
testTmpDir = ".tests/"

for f in glob.glob("*.py"):
    target = os.path.join(testTmpDir, f)
    env.Command(target, f, "@echo -n running $SOURCES; python $SOURCES > $TARGET 2>&1 || (mv $TARGET ${TARGET}.failed; echo -n ' failed'); echo")
    env.Depends(target, fwTests)
    
for f in glob.glob("*.cc"):
    exe = os.path.splitext(f)[0]
    try:
        if os.stat(exe).st_mode & 01:  # file exists and is executable
            target = os.path.join(testTmpDir, exe)
            env.Command(target, exe, "@echo -n running $SOURCES; $SOURCES > $TARGET 2>&1 || (mv $TARGET ${TARGET}.failed; echo -n ' failed'); echo")
    except OSError:
        pass

Clean("", testTmpDir)
