# -*- python -*-
Import("env")
import os

env.Program(["Mask_1.cc"], LIBS=env.libs["vw"] + ["mwi"] + env.libs["boost"] + env.libs["wcs"])
env.Program(["MaskedImage_1.cc"], LIBS=env.libs["vw"] + ["mwi"] + env.libs["boost"] + env.libs["wcs"] + ["cfitsio"] + ["fitsio"])
env.Program(["MaskIO_1.cc"], LIBS=env.libs["vw"] + ["mwi"] + env.libs["boost"] + env.libs["wcs"] + ["cfitsio"] + ["fitsio"])
env.Program(["MaskedImageIO_1.cc"], LIBS=env.libs["vw"] + ["mwi"] + ["fw"] + env.libs["boost"] + env.libs["wcs"] + ["cfitsio"] + ["fitsio"])

env.CheckSwig("python", ilang="c++")
env.Append(SWIGFLAGS=" -Ipython")

env['SWIGFLAGS'] += " -I%s/%s" % (os.environ["MWI_DIR"], "python")
fwTests = env.LoadableModuleIncomplete("_fwTests", "fwTests.i",
                                       LIBS=env.libs["vw"] + ["fw"] + ["mwi"])

#
# Tests
#
import lsst.tests
tests = lsst.tests.Control(env,
                           args=dict([
    ("MaskIO_1",        "data/871034p_1_MI_msk.fits"),
    ("MaskedImage_1",   "file:data/871034p_1_MI file:data/871034p_1_MI file:MaskedImage_1_output_1 file:MaskedImage_1_output_2"),
    ("MaskedImageIO_1", "file:data/871034p_1_MI"),
    ]), verbose=True)

tests.run("*.cc")

for target in tests.run("*.py"):
    env.Depends(target, fwTests)
    env.Depends(target, "../python/lsst/fw/Core/_fwLib%s" % (env['LDMODULESUFFIX']))
