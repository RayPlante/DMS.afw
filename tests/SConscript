# -*- python -*-
Import("env")
import os, sys

env.Program(["Mask_1.cc"], LIBS=env.getlibs("fw"))
env.Program(["MaskedImage_1.cc"], LIBS=env.getlibs("fw fitsio"))
env.Program(["MaskIO_1.cc"], LIBS=env.getlibs("fw fitsio"))
env.Program(["MaskedImageIO_1.cc"], LIBS=env.getlibs("fw fitsio"))
#env.Program(["testImageSubtract0.cc"], LIBS=env.getlibs("fw fitsio"));

env.CheckSwig("python", ilang="c++")
env.Append(SWIGFLAGS=" -Ipython")

env['SWIGFLAGS'] += " -I%s/%s" % (os.environ["MWI_DIR"], "python")
fwTests = env.LoadableModuleIncomplete("_fwTests", "fwTests.i", LIBS=env.getlibs("fw fitsio"))
#
# Tests
#
import lsst.tests

import eups
dataDir = eups.productDir("fwData")

inFile = os.path.join(dataDir, "871034p_1_MI")

args = {
    "MaskIO_1" : "%s_msk.fits" % inFile,
    "MaskedImage_1" : "%s %s file:MaskedImage_1_output_1 file:MaskedImage_1_output_2" % (inFile, inFile),
    "MaskedImageIO_1" : inFile,
    }

if dataDir:
    ignoreList = None
else:
    print >> sys.stderr, "fwData is not set up; skipping tests requiring data"
    ignoreList = args.keys()

tests = lsst.tests.Control(env, args=args, ignoreList=ignoreList, verbose=True)
tests.run("*.cc")

for target in tests.run("*.py"):
    env.Depends(target, fwTests)
    env.Depends(target, "../python/lsst/fw/Core/_fwLib%s" % (env['LDMODULESUFFIX']))
