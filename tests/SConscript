# -*- python -*-
Import("env")
import os
import sys
import glob

import lsst.tests
import lsst.daf.persistence
import lsst.SConsUtils as scons # scons 1.17 supports "env.ProductDir", but for now use scons.ProductDir

for i in glob.glob("*.cc"):
    # This test appears to be invalid
    if i != "MaskIO_2.cc":
        env.Program(i, LIBS=env.getlibs("afw"))

#
# Tests
#
dataDir = scons.ProductDir("afwdata")
if not dataDir:
    print "Warning: afwdata is not set up; not running the tests!"
else:
    # copy AFWDATA_DIR to the test's environment
    env["ENV"]["AFWDATA_DIR"] = os.environ["AFWDATA_DIR"]
    
    if lsst.daf.persistence.DbAuth.available():
        if os.environ.has_key("LSST_DB_AUTH"):
            env["ENV"]["LSST_DB_AUTH"] = os.environ["LSST_DB_AUTH"]
    else:
        print "WARNING: No fallback database authenticator seen"
        print "Database tests may be skipped or may fail"

    # set up arguments for C++ tests
    inFile = os.path.join(dataDir, "871034p_1_MI")
    testArgs = dict(
        MaskedImage_1 =   "%s %s file:MaskedImage_1_output_1 file:MaskedImage_1_output_2" % (inFile, inFile),
        MaskedImageIO_1 = inFile,
        MaskedImageIO_2 = inFile,
        MaskIO_1 =         "%s_msk.fits" % inFile,
    )

    ignoreList=[]
    tests = lsst.tests.Control(env, args = testArgs, ignoreList=ignoreList, verbose = True)

    tests.run("*.cc")
    
    # set up python tests
    for target in tests.run("*.py"):
        env.Depends(target, "../python/lsst/afw/detection/_detectionLib%s" % (env["LDMODULESUFFIX"]))
        env.Depends(target, "../python/lsst/afw/display/_displayLib%s" % (env["LDMODULESUFFIX"]))
        env.Depends(target, "../python/lsst/afw/image/_imageLib%s" % (env["LDMODULESUFFIX"]))
        env.Depends(target, "../python/lsst/afw/math/_mathLib%s" % (env["LDMODULESUFFIX"]))
