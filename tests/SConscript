# -*- python -*-
Import("env")
import os, re, sys
import glob

import lsst.tests
import lsst.daf.persistence
import lsst.SConsUtils as scons # scons 1.17 supports "env.ProductDir", but for now use scons.ProductDir

for fileName in glob.glob("*.cc"):
    if fileName == "maskIo2.cc":       # This test appears to be invalid
        continue

    if re.search(r"_wrap.cc", fileName): # not designed to be independently built!
        continue

    env.Program(fileName, LIBS=env.getlibs("afw"))

env.CheckSwig("python", ilang="c++",
              includedProducts="afw utils daf_base pex_exceptions pex_logging pex_policy daf_persistence daf_data security")

testEigenLib = env.LoadableModuleIncomplete("_testEigenLib", ["testEigenLib.i"], LIBS=env.getlibs("afw"))
testLib = env.LoadableModuleIncomplete("_testLib", ["testLib.i"], LIBS=env.getlibs("afw"))

#
# Tests
#
dataDir = scons.ProductDir("afwdata")
if not dataDir:
    print "Warning: afwdata is not set up; not running the tests!"
else:
    # copy AFWDATA_DIR to the test's environment
    env["ENV"]["AFWDATA_DIR"] = os.environ["AFWDATA_DIR"]
    
    if not lsst.daf.persistence.DbAuth.available("lsst10.ncsa.uiuc.edu", "3306"):
        print "WARNING: No database authenticator seen"
        print "Database tests may be skipped or may fail"

    # set up arguments for C++ tests
    inFile = os.path.join(dataDir, "871034p_1_MI")
    testArgs = dict(
        maskedImage1 =   "%s %s file:maskedImage1_output_1 file:maskedImage1_output_2" % (inFile, inFile),
        maskedImageIo1 = inFile,
        maskedImageIo2 = inFile,
        maskIo1 =         "%s_msk.fits" % inFile,
    )

    ignoreList=["testLib.py", "testEigenLib.py",
                "numpyEigen.py" # broken, but kept until a better fix is available
                ]
    tests = lsst.tests.Control(env, args = testArgs, ignoreList=ignoreList, verbose = True)

    tests.run("*.cc")

    # set up python tests
    for target in tests.run("*.py"):
        for pkgName in ("detection", "display", "image", "math", "geom"):
            env.Depends(target, os.path.join(
                "#python", "lsst", "afw", pkgName, "_%sLib%s" % (pkgName, env["LDMODULESUFFIX"])))
        if target.endswith("spatialCell.py"):
            env.Depends(target, "_testLib%s" % (env["LDMODULESUFFIX"]))
            env.Depends(target, "testLib.py")
        elif target.endswith("numpyEigen.py"):
            env.Depends(target, "_testEigenLib%s" % (env["LDMODULESUFFIX"]))
            env.Depends(target, "testEigenLib.py")
