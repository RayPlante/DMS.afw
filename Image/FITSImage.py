#######################################################
#
# Image.py
# Python implementation of the Class Image
# Generated by Enterprise Architect
# Created on:      23-Aug-2005 2:35:53 PM
# Original author: Tim Axelrod
#
#######################################################
#

import pyfits
import os

__all__ = ["FITSImage"]

class FITSImage:
    #------------------------------------------------------------
    def __init__(self, fileName=None):
        """
        __init__ Image initialization

        Input
            fileName        If supplied, name of FITS image which will be read in
                            Format: string; Default: None
        Return
            none
        """
        self.fileName = fileName
        if (self.fileName != None):
#            self.hdus = pyfits.open(self.fileName, "update")
            self.hdus = pyfits.open(self.fileName, "readonly")
        else:
            self.hdus = pyfits.HDUList()

    #------------------------------------------------------------
    def __del__(self):
        """
        __del__     close open PyFits HDUs.

        Input
            None
        Return
            None
        Side effect
            delete Image and close HDUs
        """
        self.hdus.close(output_verify='ignore')

    #------------------------------------------------------------
    def NumCCDS(self):
        """
        NumCCDS returns the count of CCDs within an MEF image

        We probably want to have a bunch of convenience wrappers around
        the PyFits HDU methods.  Worry about most of these later

        Input
            none
        Return
            count   count of CCDs within source image;
                    Format: integer.
        """
        n = len(self.hdus)
        if (n > 1):
            return n - 1 # this is an MEF
        else:
            return n


    #------------------------------------------------------------
    def GetCCDHDU(self, whichCCD):
        """
        GetCCDHDU    return an individual CCD's  HDU

        Input
            whichCCD    number of CCD's HDU to return
                        Format: integer [1..NumCCD]; Default none
        Return
            hdu         HDU, identified by whichCCD;
                        Format: HDU object

        Error
            Raise: ValueError if whichCCD out of CCD HDU range
        """
        if (self.NumCCDS() < whichCCD):
            raise ValueError,'specified HDU out of range'

        if (self.NumCCDS() > 1):
            return self.hdus[whichCCD]
        else:
            return self.hdus[0]

    #------------------------------------------------------------
    def GetParameter(self, paramName):
        """
        GetParameter returns the value associated with the provided keyword.

        Input
            paramName   keyword name in either Policy or add-ons
                        Format: string; Default: none
        Return
            value       value of requested keyword
                        Format: depends on keyword
        """
        return self.hdus[0].header.get(paramName, None)

    #------------------------------------------------------------
    def SetParameter(self, paramName, paramValue):
        """
        SetParameter adds a new 'keyword=value' to the keyword dictionary

        Input
            paramName   keyword name to be added;
                        Format: string; Default: none.
            paramValue  keyword value to be added;
                        Format: any; Default: none.
        Return
            none

        Side Effect
            sets the 'keyword=value' dictionary entry
        """
        self.hdus[0].header.update(paramName, paramValue)

    #------------------------------------------------------------
    def DelParameter(self, paramName):
        """
        DelParameter deletes the 'keyword=value' in the keyword dictionary

        Input
            paramName   keyword name in either Policy or add-ons
                        Format: string; Default: none
        Return
            none

        Side Effect
            removes the 'keyword=value' dictionary entry
        """
        del self.hdus[0].header[paramName]

##########################################################
# Example of use: "mscsplit"
#
## def mscsplit(mefFile):
##     mefImage = MosaicImage(mefFile)
##     mefImage.ReadFromFile()
##     ccdList = mefImage.GetCCDImageList()
##     for ccdImg in ccdList:
##         ccdImg.AssociateWithFile(generatedName)
##         ccdImg.WriteToFile()
##########################################################
