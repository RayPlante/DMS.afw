/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ConstPtr swig_types[0]
#define SWIGTYPE_p_EigenVector swig_types[1]
#define SWIGTYPE_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t swig_types[2]
#define SWIGTYPE_p_Element swig_types[3]
#define SWIGTYPE_p_Ellipticity swig_types[4]
#define SWIGTYPE_p_Envelope swig_types[5]
#define SWIGTYPE_p_Jacobian swig_types[6]
#define SWIGTYPE_p_Matrix swig_types[7]
#define SWIGTYPE_p_ParameterVector swig_types[8]
#define SWIGTYPE_p_ProductDerivativeMatrix swig_types[9]
#define SWIGTYPE_p_Ptr swig_types[10]
#define SWIGTYPE_p_Radius swig_types[11]
#define SWIGTYPE_p_TransformDerivativeMatrix swig_types[12]
#define SWIGTYPE_p_bool swig_types[13]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t swig_types[14]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t swig_types[15]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t swig_types[16]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t swig_types[17]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t swig_types[18]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t swig_types[19]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t swig_types[20]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t swig_types[21]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t swig_types[22]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t swig_types[23]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t swig_types[24]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t swig_types[25]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t swig_types[26]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t swig_types[27]
#define SWIGTYPE_p_char swig_types[28]
#define SWIGTYPE_p_char_type swig_types[29]
#define SWIGTYPE_p_double swig_types[30]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[31]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[32]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[33]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[34]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[35]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[36]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[37]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[38]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[39]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[40]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[41]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[42]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[43]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[44]
#define SWIGTYPE_p_float swig_types[45]
#define SWIGTYPE_p_fmtflags swig_types[46]
#define SWIGTYPE_p_int swig_types[47]
#define SWIGTYPE_p_int_type swig_types[48]
#define SWIGTYPE_p_iostate swig_types[49]
#define SWIGTYPE_p_long swig_types[50]
#define SWIGTYPE_p_long_double swig_types[51]
#define SWIGTYPE_p_long_long swig_types[52]
#define SWIGTYPE_p_lsst__afw__geom__Box2D swig_types[53]
#define SWIGTYPE_p_lsst__afw__geom__Box2I swig_types[54]
#define SWIGTYPE_p_lsst__afw__geom__CoordinateExprT_2_t swig_types[55]
#define SWIGTYPE_p_lsst__afw__geom__CoordinateExprT_3_t swig_types[56]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_double_2_t swig_types[57]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_double_3_t swig_types[58]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t swig_types[59]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_int_3_t swig_types[60]
#define SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t swig_types[61]
#define SWIGTYPE_p_lsst__afw__geom__PointT_double_3_t swig_types[62]
#define SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t swig_types[63]
#define SWIGTYPE_p_lsst__afw__geom__PointT_int_3_t swig_types[64]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius swig_types[65]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Axes swig_types[66]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__BaseCore swig_types[67]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion swig_types[68]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Ellipse swig_types[69]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius swig_types[70]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius swig_types[71]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius swig_types[72]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear swig_types[73]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Parametric swig_types[74]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Quadrupole swig_types[75]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t swig_types[76]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t swig_types[77]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t swig_types[78]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t swig_types[79]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t swig_types[80]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t swig_types[81]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t swig_types[82]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t swig_types[83]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase swig_types[84]
#define SWIGTYPE_p_off_type swig_types[85]
#define SWIGTYPE_p_openmode swig_types[86]
#define SWIGTYPE_p_p_void swig_types[87]
#define SWIGTYPE_p_pos_type swig_types[88]
#define SWIGTYPE_p_seekdir swig_types[89]
#define SWIGTYPE_p_short swig_types[90]
#define SWIGTYPE_p_size_t swig_types[91]
#define SWIGTYPE_p_state_type swig_types[92]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[93]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[94]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[95]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type swig_types[96]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type swig_types[97]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type swig_types[98]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[99]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type swig_types[100]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type swig_types[101]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[102]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[103]
#define SWIGTYPE_p_std__complexT_double_t swig_types[104]
#define SWIGTYPE_p_std__invalid_argument swig_types[105]
#define SWIGTYPE_p_std__ios_base swig_types[106]
#define SWIGTYPE_p_std__locale swig_types[107]
#define SWIGTYPE_p_swig__PySwigIterator swig_types[108]
#define SWIGTYPE_p_traits_type swig_types[109]
#define SWIGTYPE_p_unsigned_int swig_types[110]
#define SWIGTYPE_p_unsigned_long swig_types[111]
#define SWIGTYPE_p_unsigned_long_long swig_types[112]
#define SWIGTYPE_p_unsigned_short swig_types[113]
static swig_type_info *swig_types[115];
static swig_module_info swig_module = {swig_types, 114, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _ellipsesLib.so
  ------------------------------------------------*/
#define SWIG_init    init_ellipsesLib

#define SWIG_name    "_ellipsesLib"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "lsst/afw/geom/ellipses.h"
#define PY_ARRAY_UNIQUE_SYMBOL LSST_AFW_GEOM_ELLIPSES_NUMPY_ARRAY_API
#include "numpy/arrayobject.h"
#include "lsst/ndarray/python.h"
#include "lsst/ndarray/python/eigen.h"


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct PySwigIterator {
  private:
    PyObject_ptr _seq;

  protected:
    PySwigIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~PySwigIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual PySwigIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual PySwigIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual PySwigIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    PySwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const PySwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const PySwigIterator& x) const
    {
      return ! operator==(x);
    }
      
    PySwigIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    PySwigIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    PySwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    PySwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const PySwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::PySwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <list>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <set>


#include <vector>


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}




#include <new>
#include "lsst/pex/exceptions/Exception.h"
#include "lsst/pex/exceptions/Runtime.h"


static void raiseLsstException(lsst::pex::exceptions::Exception& ex) {
    PyObject* pyex = 0;
    swig_type_info* tinfo = SWIG_TypeQuery(ex.getType());
    if (tinfo != 0) {
	lsst::pex::exceptions::Exception* e = ex.clone();
        pyex = SWIG_NewPointerObj(static_cast<void*>(e), tinfo,
            SWIG_POINTER_OWN);
    } else {
        PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(ex.what()));
	return;
    }

    PyObject* pyexbase = PyExc_RuntimeError;
    PyObject* module = PyImport_AddModule("lsst.pex.exceptions");
    if (module != 0) {
        pyexbase = PyObject_GetAttrString(module, "LsstCppException");
        if (pyexbase == 0) {
            pyexbase = PyExc_RuntimeError;
        }
    }

    PyErr_SetObject(pyexbase, pyex);
}



#include "lsst/ndarray/python.h"
#include "lsst/ndarray/python/eigen.h"
#include <boost/scoped_ptr.hpp>


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


  #define SWIG_From_double   PyFloat_FromDouble 


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Axes_SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Axes > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Axes::Ptr lsst_afw_geom_ellipses_Axes__transform(lsst::afw::geom::ellipses::Axes *self,lsst::afw::geom::LinearTransform const &t){
       return boost::static_pointer_cast<lsst::afw::geom::ellipses::Axes>(self->transform(t).copy());
    }
SWIGINTERN void lsst_afw_geom_ellipses_Axes__transformInPlace(lsst::afw::geom::ellipses::Axes *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Axes::Ptr lsst_afw_geom_ellipses_Axes__convolve(lsst::afw::geom::ellipses::Axes *self,lsst::afw::geom::ellipses::BaseCore const &other){
       return boost::static_pointer_cast<lsst::afw::geom::ellipses::Axes>(self->convolve(other).copy());
    }
SWIGINTERN lsst::afw::geom::ellipses::Axes::Ptr lsst_afw_geom_ellipses_Axes_cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
       return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Axes>(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Quadrupole_SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Quadrupole::Ptr lsst_afw_geom_ellipses_Quadrupole__transform(lsst::afw::geom::ellipses::Quadrupole *self,lsst::afw::geom::LinearTransform const &t){
       return boost::static_pointer_cast<lsst::afw::geom::ellipses::Quadrupole>(self->transform(t).copy());
    }
SWIGINTERN void lsst_afw_geom_ellipses_Quadrupole__transformInPlace(lsst::afw::geom::ellipses::Quadrupole *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Quadrupole::Ptr lsst_afw_geom_ellipses_Quadrupole__convolve(lsst::afw::geom::ellipses::Quadrupole *self,lsst::afw::geom::ellipses::BaseCore const &other){
       return boost::static_pointer_cast<lsst::afw::geom::ellipses::Quadrupole>(self->convolve(other).copy());
    }
SWIGINTERN lsst::afw::geom::ellipses::Quadrupole::Ptr lsst_afw_geom_ellipses_Quadrupole_cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
       return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Quadrupole>(p);
    }

#include "lsst/afw/geom/ellipses/radii.h"
#include "lsst/afw/geom/ellipses/LogShear.h"
#include "lsst/afw/geom/ellipses/Distortion.h"
#include "lsst/afw/geom/ellipses/Separable.h"

SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::GeometricRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::GeometricRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::GeometricRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::ArithmeticRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::ArithmeticRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::ArithmeticRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::LogGeometricRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::LogGeometricRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::LogGeometricRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::LogArithmeticRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::LogArithmeticRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::Distortion, lsst::afw::geom::ellipses::LogArithmeticRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::GeometricRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::GeometricRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::GeometricRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::ArithmeticRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::ArithmeticRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::ArithmeticRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::LogGeometricRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::LogGeometricRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::LogGeometricRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transform(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::LogArithmeticRadius> >(
            self->transform(t).copy()
        );
    }
SWIGINTERN void lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transformInPlace(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *self,lsst::afw::geom::LinearTransform const &t){
       self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___convolve(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *self,lsst::afw::geom::ellipses::BaseCore const &other){
        return boost::static_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::LogArithmeticRadius> >(
            self->convolve(other).copy()
        );
    }
SWIGINTERN lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__cast(lsst::afw::geom::ellipses::BaseCore::Ptr const &p){
        return boost::dynamic_pointer_cast<lsst::afw::geom::ellipses::Separable<lsst::afw::geom::ellipses::LogShear, lsst::afw::geom::ellipses::LogArithmeticRadius> >(p);
    }
SWIGINTERN boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__SWIGSharedPtrUpcast(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN lsst::afw::geom::ellipses::Ellipse lsst_afw_geom_ellipses_Ellipse__transform(lsst::afw::geom::ellipses::Ellipse *self,lsst::afw::geom::AffineTransform const &t){
        return self->transform(t);
    }
SWIGINTERN void lsst_afw_geom_ellipses_Ellipse__transformInPlace(lsst::afw::geom::ellipses::Ellipse *self,lsst::afw::geom::AffineTransform const &t){
        self->transform(t).inPlace();
    }
SWIGINTERN lsst::afw::geom::AffineTransform lsst_afw_geom_ellipses_Ellipse__getGridTransform(lsst::afw::geom::ellipses::Ellipse *self){
        return self->getGridTransform();
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_PySwigIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySwigIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySwigIterator" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_value" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)((swig::PySwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::PySwigIterator *,size_t)\n"
    "    incr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::PySwigIterator *,size_t)\n"
    "    decr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_distance" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = ((swig::PySwigIterator const *)arg1)->distance((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_equal" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = (bool)((swig::PySwigIterator const *)arg1)->equal((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_copy" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_next" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_previous" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_advance" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___eq__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator ==((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___ne__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator !=((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___iadd__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator +=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___isub__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator -=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___add__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = ((swig::PySwigIterator const *)arg1)->operator -((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__PySwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PySwigIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__PySwigIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_register_callback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_flags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_flags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    flags(std::ios_base const *)\n"
    "    flags(std::ios_base *,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_setf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_setf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setf(std::ios_base *,std::ios_base::fmtflags)\n"
    "    setf(std::ios_base *,std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_unsetf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_precision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_precision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    precision(std::ios_base const *)\n"
    "    precision(std::ios_base *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_width",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    width(std::ios_base const *)\n"
    "    width(std::ios_base *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_sync_with_stdio",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_sync_with_stdio")) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_getloc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_xalloc")) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_iword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    long &_result_ref = (arg1)->iword(arg2);
    result = (long *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_pword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    void *&_result_ref = (arg1)->pword(arg2);
    result = (void **) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdstate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_clear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    clear(std::basic_ios< char > *,std::ios_base::iostate)\n"
    "    clear(std::basic_ios< char > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_setstate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_good",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_eof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_bad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_exceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_exceptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    exceptions(std::basic_ios< char > const *)\n"
    "    exceptions(std::basic_ios< char > *,std::ios_base::iostate)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_tie",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_tie",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tie(std::basic_ios< char > const *)\n"
    "    tie(std::basic_ios< char > *,std::basic_ostream< char,std::char_traits< char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdbuf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_rdbuf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rdbuf(std::basic_ios< char > const *)\n"
    "    rdbuf(std::basic_ios< char > *,std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_copyfmt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  {
    std::basic_ios< char > &_result_ref = (arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
    result = (std::basic_ios< char > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fill(std::basic_ios< char > const *)\n"
    "    fill(std::basic_ios< char > *,std::basic_ios< char >::char_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_narrow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_widen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<((void const *)arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->put(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->flush();
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_tellp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_seekp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->seekp(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_seekp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->seekp(arg2,arg3);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seekp(std::basic_ostream< char > *,std::basic_ostream< char >::pos_type)\n"
    "    seekp(std::basic_ostream< char > *,std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_gcount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(arg2,arg3,arg4);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(*arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(std::basic_istream< char > *)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type &)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    get(std::basic_istream< char > *,std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    get(std::basic_istream< char > *,std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_getline",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->getline(arg2,arg3,arg4);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_getline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->getline(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getline(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    getline(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->ignore(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_ignore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->ignore(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_ignore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->ignore();
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ignore(std::basic_istream< char > *,std::streamsize,std::basic_istream< char >::int_type)\n"
    "    ignore(std::basic_istream< char > *,std::streamsize)\n"
    "    ignore(std::basic_istream< char > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_peek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->read(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_readsome",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_putback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->putback(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_unget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->unget();
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_sync",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_tellg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_seekg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->seekg(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_seekg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->seekg(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seekg(std::basic_istream< char > *,std::basic_istream< char >::pos_type)\n"
    "    seekg(std::basic_istream< char > *,std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:endl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_make__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_make",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = lsst::afw::geom::ellipses::BaseCore::make((std::string const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_make__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_make",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    lsst::ndarray::PyPtr tmp(obj1,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val2)) return NULL;
    arg2 = &val2;
  }
  {
    try {
      result = lsst::afw::geom::ellipses::BaseCore::make((std::string const &)*arg1,(Eigen::Vector3d const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_make__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BaseCore_make",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCore_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseCore_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseCore_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = lsst::afw::geom::ellipses::BaseCore::make((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_make__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_make",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCore_make" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_make" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst::afw::geom::ellipses::BaseCore::make((std::string const &)*arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_make(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BaseCore_make__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseCore_make__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        lsst::ndarray::PyPtr tmp(argv[1],true);
        _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
        if (!(_v)) PyErr_Clear();
      }
      if (_v) {
        return _wrap_BaseCore_make__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BaseCore_make__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BaseCore_make'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    make(std::string const &)\n"
    "    make(std::string const &,lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    make(std::string const &,double,double,double)\n"
    "    lsst::afw::geom::ellipses::BaseCore::make(std::string const &,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::BaseCore const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::BaseCore const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_grow",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_grow" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCore_grow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->grow(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_scale",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_scale" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseCore_scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->scale(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_getArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_getArea",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_getArea" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::BaseCore const *)arg1)->getArea();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_getGeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_getGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_getGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::BaseCore const *)arg1)->getGeometricRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_getArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_getArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_getArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::BaseCore const *)arg1)->getArithmeticRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_computeDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ExtentD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_computeDimensions",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_computeDimensions" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::BaseCore const *)arg1)->computeDimensions();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::ExtentD(static_cast< const lsst::afw::geom::ExtentD& >(result))), SWIGTYPE_p_lsst__afw__geom__ExtentT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_getParameterVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseCore_getParameterVector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_getParameterVector" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::BaseCore const *)arg1)->getParameterVector();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_setParameterVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_setParameterVector",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_setParameterVector" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    lsst::ndarray::PyPtr tmp(obj1,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val2)) return NULL;
    arg2 = &val2;
  }
  {
    try {
      (arg1)->setParameterVector((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore___eq__" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCore___eq__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore___eq__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = (bool)((lsst::afw::geom::ellipses::BaseCore const *)arg1)->operator ==((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore___ne__" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCore___ne__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore___ne__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = (bool)((lsst::afw::geom::ellipses::BaseCore const *)arg1)->operator !=((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCore_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::BaseCore &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::BaseCore *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseCore_dAssign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Jacobian result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseCore_dAssign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseCore_dAssign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseCore_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseCore_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = (arg1)->dAssign((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::Jacobian >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseCore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = (lsst::afw::geom::ellipses::BaseCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseCore",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseCore" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseCore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Axes_getA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_getA",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_getA" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Axes const *)arg1)->getA();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_setA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes_setA",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_setA" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axes_setA" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setA(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_getB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_getB",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_getB" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Axes const *)arg1)->getB();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_setB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes_setB",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_setB" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axes_setB" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setB(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_getTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_getTheta",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_getTheta" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Axes const *)arg1)->getTheta();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_setTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes_setTheta",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_setTheta" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axes_setTheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTheta(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Axes::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Axes const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Axes const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  lsst::afw::geom::ellipses::Axes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axes_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axes_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Axes &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Axes const &)*arg2);
        result = (lsst::afw::geom::ellipses::Axes *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axes_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axes_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Axes &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Axes *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Axes_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Axes_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Axes_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Axes *,lsst::afw::geom::ellipses::Axes const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Axes *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Axes",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Axes" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Axes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Axes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Axes" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Axes",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Axes" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Axes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Axes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Axes",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Axes" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Axes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Axes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Axes" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Axes")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Axes",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Axes" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Axes",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Axes",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axes" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axes" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Axes > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes((lsst::afw::geom::ellipses::Axes const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Axes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Axes",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axes" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axes" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Axes *)new lsst::afw::geom::ellipses::Axes((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Axes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Axes__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Axes__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Axes__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Axes__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_Axes__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Axes__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Axes__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Axes__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Axes__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Axes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Axes(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Axes(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Axes(double,double)\n"
    "    lsst::afw::geom::ellipses::Axes(double)\n"
    "    lsst::afw::geom::ellipses::Axes()\n"
    "    lsst::afw::geom::ellipses::Axes(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Axes(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Axes(lsst::afw::geom::ellipses::Axes const &)\n"
    "    lsst::afw::geom::ellipses::Axes(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Axes >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Axes > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Axes > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Axes_SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Axes::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axes__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axes__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Axes__transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axes__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axes__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Axes__transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Axes::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Axes__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axes__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axes__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Axes__convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Axes_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Axes::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Axes_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axes_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Axes_cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Axes >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Axes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Axes *arg1 = (lsst::afw::geom::ellipses::Axes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Axes",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Axes" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Axes *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Axes > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Axes * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Axes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Quadrupole_getIXX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_getIXX",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_getIXX" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->getIXX();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_setIXX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole_setIXX",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_setIXX" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrupole_setIXX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setIXX(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_getIYY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_getIYY",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_getIYY" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->getIYY();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_setIYY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole_setIYY",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_setIYY" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrupole_setIYY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setIYY(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_getIXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_getIXY",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_getIXY" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->getIXY();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_setIXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole_setIXY",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_setIXY" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrupole_setIXY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setIXY(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_getMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole::Matrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_getMatrix",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_getMatrix" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Quadrupole::Matrix const &_result_ref = ((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->getMatrix();
        result = (lsst::afw::geom::ellipses::Quadrupole::Matrix *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_getDeterminant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_getDeterminant",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_getDeterminant" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Quadrupole const *)arg1)->getDeterminant();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  lsst::afw::geom::ellipses::Quadrupole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrupole_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Quadrupole const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quadrupole_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Quadrupole const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Quadrupole &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Quadrupole const &)*arg2);
        result = (lsst::afw::geom::ellipses::Quadrupole *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrupole_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quadrupole_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Quadrupole &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Quadrupole *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quadrupole_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quadrupole_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Quadrupole_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Quadrupole *,lsst::afw::geom::ellipses::Quadrupole const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Quadrupole *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Quadrupole",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quadrupole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Quadrupole" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Quadrupole" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Quadrupole",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quadrupole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Quadrupole" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Quadrupole",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quadrupole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quadrupole",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Quadrupole")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Quadrupole",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quadrupole" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quadrupole",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole::Matrix *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Quadrupole",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Quadrupole::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quadrupole" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole((lsst::afw::geom::ellipses::Quadrupole::Matrix const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quadrupole",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Quadrupole::Matrix * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole((lsst::afw::geom::ellipses::Quadrupole::Matrix const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quadrupole",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Quadrupole > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole((lsst::afw::geom::ellipses::Quadrupole const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Quadrupole",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Quadrupole *)new lsst::afw::geom::ellipses::Quadrupole((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quadrupole(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Quadrupole__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quadrupole__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quadrupole__SWIG_9(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quadrupole__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Quadrupole__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_Quadrupole__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Quadrupole__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Quadrupole__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Quadrupole__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Quadrupole__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Quadrupole__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Quadrupole'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Quadrupole(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(double,double)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(double)\n"
    "    lsst::afw::geom::ellipses::Quadrupole()\n"
    "    lsst::afw::geom::ellipses::Quadrupole(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(lsst::afw::geom::ellipses::Quadrupole::Matrix const &,bool)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(lsst::afw::geom::ellipses::Quadrupole::Matrix const &)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(lsst::afw::geom::ellipses::Quadrupole const &)\n"
    "    lsst::afw::geom::ellipses::Quadrupole(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Quadrupole_SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrupole__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quadrupole__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Quadrupole__transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrupole__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quadrupole__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Quadrupole__transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Quadrupole__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrupole__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quadrupole__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Quadrupole__convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrupole_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Quadrupole::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrupole_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrupole_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Quadrupole_cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Quadrupole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Quadrupole *arg1 = (lsst::afw::geom::ellipses::Quadrupole *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Quadrupole",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Quadrupole" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Quadrupole *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Quadrupole > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Quadrupole * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Quadrupole_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GeometricRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::GeometricRadius *arg1 = (lsst::afw::geom::ellipses::GeometricRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricRadius_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::GeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::GeometricRadius * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":GeometricRadius_getName")) SWIG_fail;
  {
    try {
      result = lsst::afw::geom::ellipses::GeometricRadius::getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::GeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GeometricRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::GeometricRadius *)new lsst::afw::geom::ellipses::GeometricRadius(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::GeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GeometricRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::GeometricRadius *)new lsst::afw::geom::ellipses::GeometricRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogGeometricRadius *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::GeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogGeometricRadius * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::GeometricRadius *)new lsst::afw::geom::ellipses::GeometricRadius((lsst::afw::geom::ellipses::LogGeometricRadius const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GeometricRadius__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeometricRadius__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GeometricRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GeometricRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::GeometricRadius(double)\n"
    "    lsst::afw::geom::ellipses::GeometricRadius()\n"
    "    lsst::afw::geom::ellipses::GeometricRadius(lsst::afw::geom::ellipses::LogGeometricRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::GeometricRadius *arg1 = (lsst::afw::geom::ellipses::GeometricRadius *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::GeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::GeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::GeometricRadius * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeometricRadius_assign" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        lsst::afw::geom::ellipses::GeometricRadius &_result_ref = (arg1)->operator =(arg2);
        result = (lsst::afw::geom::ellipses::GeometricRadius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::GeometricRadius *arg1 = (lsst::afw::geom::ellipses::GeometricRadius *) 0 ;
  lsst::afw::geom::ellipses::LogGeometricRadius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::GeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::GeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::GeometricRadius * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::LogGeometricRadius * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::GeometricRadius &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::LogGeometricRadius const &)*arg2);
        result = (lsst::afw::geom::ellipses::GeometricRadius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GeometricRadius_assign__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GeometricRadius_assign__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GeometricRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::GeometricRadius *,double)\n"
    "    operator =(lsst::afw::geom::ellipses::GeometricRadius *,lsst::afw::geom::ellipses::LogGeometricRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::GeometricRadius *arg1 = (lsst::afw::geom::ellipses::GeometricRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::GeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::GeometricRadius * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeometricRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ArithmeticRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::ArithmeticRadius *arg1 = (lsst::afw::geom::ellipses::ArithmeticRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArithmeticRadius_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArithmeticRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::ArithmeticRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::ArithmeticRadius * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArithmeticRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":ArithmeticRadius_getName")) SWIG_fail;
  {
    try {
      result = lsst::afw::geom::ellipses::ArithmeticRadius::getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArithmeticRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::ArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArithmeticRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::ArithmeticRadius *)new lsst::afw::geom::ellipses::ArithmeticRadius(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArithmeticRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::ArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ArithmeticRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::ArithmeticRadius *)new lsst::afw::geom::ellipses::ArithmeticRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArithmeticRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogArithmeticRadius *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::ArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogArithmeticRadius const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogArithmeticRadius const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogArithmeticRadius * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::ArithmeticRadius *)new lsst::afw::geom::ellipses::ArithmeticRadius((lsst::afw::geom::ellipses::LogArithmeticRadius const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArithmeticRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ArithmeticRadius__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArithmeticRadius__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ArithmeticRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ArithmeticRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::ArithmeticRadius(double)\n"
    "    lsst::afw::geom::ellipses::ArithmeticRadius()\n"
    "    lsst::afw::geom::ellipses::ArithmeticRadius(lsst::afw::geom::ellipses::LogArithmeticRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArithmeticRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::ArithmeticRadius *arg1 = (lsst::afw::geom::ellipses::ArithmeticRadius *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::ArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::ArithmeticRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::ArithmeticRadius * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArithmeticRadius_assign" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        lsst::afw::geom::ellipses::ArithmeticRadius &_result_ref = (arg1)->operator =(arg2);
        result = (lsst::afw::geom::ellipses::ArithmeticRadius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArithmeticRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::ArithmeticRadius *arg1 = (lsst::afw::geom::ellipses::ArithmeticRadius *) 0 ;
  lsst::afw::geom::ellipses::LogArithmeticRadius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::ArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::ArithmeticRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::ArithmeticRadius * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogArithmeticRadius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogArithmeticRadius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::LogArithmeticRadius * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::ArithmeticRadius &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::LogArithmeticRadius const &)*arg2);
        result = (lsst::afw::geom::ellipses::ArithmeticRadius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArithmeticRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ArithmeticRadius_assign__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ArithmeticRadius_assign__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ArithmeticRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::ArithmeticRadius *,double)\n"
    "    operator =(lsst::afw::geom::ellipses::ArithmeticRadius *,lsst::afw::geom::ellipses::LogArithmeticRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::ArithmeticRadius *arg1 = (lsst::afw::geom::ellipses::ArithmeticRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::ArithmeticRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::ArithmeticRadius * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArithmeticRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LogGeometricRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogGeometricRadius *arg1 = (lsst::afw::geom::ellipses::LogGeometricRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogGeometricRadius_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogGeometricRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogGeometricRadius * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogGeometricRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":LogGeometricRadius_getName")) SWIG_fail;
  {
    try {
      result = lsst::afw::geom::ellipses::LogGeometricRadius::getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogGeometricRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogGeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogGeometricRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogGeometricRadius *)new lsst::afw::geom::ellipses::LogGeometricRadius(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogGeometricRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogGeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LogGeometricRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::LogGeometricRadius *)new lsst::afw::geom::ellipses::LogGeometricRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogGeometricRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::GeometricRadius *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogGeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::GeometricRadius const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::GeometricRadius const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::GeometricRadius * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogGeometricRadius *)new lsst::afw::geom::ellipses::LogGeometricRadius((lsst::afw::geom::ellipses::GeometricRadius const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogGeometricRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LogGeometricRadius__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LogGeometricRadius__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LogGeometricRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_LogGeometricRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::LogGeometricRadius(double)\n"
    "    lsst::afw::geom::ellipses::LogGeometricRadius()\n"
    "    lsst::afw::geom::ellipses::LogGeometricRadius(lsst::afw::geom::ellipses::GeometricRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogGeometricRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogGeometricRadius *arg1 = (lsst::afw::geom::ellipses::LogGeometricRadius *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::LogGeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogGeometricRadius * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogGeometricRadius_assign" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        lsst::afw::geom::ellipses::LogGeometricRadius &_result_ref = (arg1)->operator =(arg2);
        result = (lsst::afw::geom::ellipses::LogGeometricRadius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogGeometricRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogGeometricRadius *arg1 = (lsst::afw::geom::ellipses::LogGeometricRadius *) 0 ;
  lsst::afw::geom::ellipses::GeometricRadius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::LogGeometricRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogGeometricRadius * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::GeometricRadius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::GeometricRadius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::GeometricRadius * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::LogGeometricRadius &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::GeometricRadius const &)*arg2);
        result = (lsst::afw::geom::ellipses::LogGeometricRadius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogGeometricRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LogGeometricRadius_assign__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LogGeometricRadius_assign__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LogGeometricRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::LogGeometricRadius *,double)\n"
    "    operator =(lsst::afw::geom::ellipses::LogGeometricRadius *,lsst::afw::geom::ellipses::GeometricRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogGeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogGeometricRadius *arg1 = (lsst::afw::geom::ellipses::LogGeometricRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LogGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogGeometricRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogGeometricRadius * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogGeometricRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LogArithmeticRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogArithmeticRadius *arg1 = (lsst::afw::geom::ellipses::LogArithmeticRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogArithmeticRadius_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogArithmeticRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogArithmeticRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogArithmeticRadius * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogArithmeticRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":LogArithmeticRadius_getName")) SWIG_fail;
  {
    try {
      result = lsst::afw::geom::ellipses::LogArithmeticRadius::getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogArithmeticRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogArithmeticRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogArithmeticRadius *)new lsst::afw::geom::ellipses::LogArithmeticRadius(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogArithmeticRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LogArithmeticRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::LogArithmeticRadius *)new lsst::afw::geom::ellipses::LogArithmeticRadius();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogArithmeticRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::ArithmeticRadius *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogArithmeticRadius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::ArithmeticRadius const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::ArithmeticRadius const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::ArithmeticRadius * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogArithmeticRadius *)new lsst::afw::geom::ellipses::LogArithmeticRadius((lsst::afw::geom::ellipses::ArithmeticRadius const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogArithmeticRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LogArithmeticRadius__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LogArithmeticRadius__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LogArithmeticRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_LogArithmeticRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::LogArithmeticRadius(double)\n"
    "    lsst::afw::geom::ellipses::LogArithmeticRadius()\n"
    "    lsst::afw::geom::ellipses::LogArithmeticRadius(lsst::afw::geom::ellipses::ArithmeticRadius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogArithmeticRadius *arg1 = (lsst::afw::geom::ellipses::LogArithmeticRadius *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LogArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogArithmeticRadius *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogArithmeticRadius * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogArithmeticRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EllipticityBase_getComplex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EllipticityBase_getComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_getComplex" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      {
        std::complex< double > &_result_ref = (arg1)->getComplex();
        result = (std::complex< double > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_getComplex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EllipticityBase_getComplex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_getComplex" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      {
        std::complex< double > const &_result_ref = ((lsst::afw::geom::ellipses::detail::EllipticityBase const *)arg1)->getComplex();
        result = (std::complex< double > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_getComplex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EllipticityBase_getComplex__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EllipticityBase_getComplex__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'EllipticityBase_getComplex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getComplex(lsst::afw::geom::ellipses::detail::EllipticityBase *)\n"
    "    getComplex(lsst::afw::geom::ellipses::detail::EllipticityBase const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_setComplex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  std::complex< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EllipticityBase_setComplex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_setComplex" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EllipticityBase_setComplex" "', argument " "2"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EllipticityBase_setComplex" "', argument " "2"" of type '" "std::complex< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  {
    try {
      (arg1)->setComplex((std::complex< double > const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EllipticityBase_getE1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::detail::EllipticityBase const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EllipticityBase_setE1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EllipticityBase_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EllipticityBase_getE2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::detail::EllipticityBase const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EllipticityBase_setE2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EllipticityBase_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_getE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EllipticityBase_getE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_getE" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::detail::EllipticityBase const *)arg1)->getE();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_setE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EllipticityBase_setE",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_setE" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EllipticityBase_setE" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EllipticityBase_getTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EllipticityBase_getTheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EllipticityBase_getTheta" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::detail::EllipticityBase const *)arg1)->getTheta();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EllipticityBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::detail::EllipticityBase *arg1 = (lsst::afw::geom::ellipses::detail::EllipticityBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EllipticityBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EllipticityBase" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::detail::EllipticityBase *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::detail::EllipticityBase * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EllipticityBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__detail__EllipticityBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Distortion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Distortion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Distortion" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Distortion" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Distortion *)new lsst::afw::geom::ellipses::Distortion((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Distortion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Distortion",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Distortion" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Distortion" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Distortion *)new lsst::afw::geom::ellipses::Distortion(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Distortion__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Distortion",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Distortion" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Distortion *)new lsst::afw::geom::ellipses::Distortion(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Distortion__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Distortion")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Distortion *)new lsst::afw::geom::ellipses::Distortion();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Distortion__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Distortion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Distortion" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Distortion" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Distortion *)new lsst::afw::geom::ellipses::Distortion((lsst::afw::geom::ellipses::LogShear const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Distortion(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Distortion__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Distortion__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Distortion__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Distortion__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Distortion__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Distortion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Distortion(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Distortion(double,double)\n"
    "    lsst::afw::geom::ellipses::Distortion(double)\n"
    "    lsst::afw::geom::ellipses::Distortion()\n"
    "    lsst::afw::geom::ellipses::Distortion(lsst::afw::geom::ellipses::LogShear const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  lsst::afw::geom::ellipses::Distortion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Distortion_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Distortion_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::Distortion &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Distortion const &)*arg2);
        result = (lsst::afw::geom::ellipses::Distortion *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  lsst::afw::geom::ellipses::LogShear *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Distortion_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Distortion_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::Distortion &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::LogShear const &)*arg2);
        result = (lsst::afw::geom::ellipses::Distortion *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Distortion_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Distortion_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Distortion_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Distortion *,lsst::afw::geom::ellipses::Distortion const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Distortion *,lsst::afw::geom::ellipses::LogShear const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_dAssign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  lsst::afw::geom::ellipses::Distortion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::detail::EllipticityBase::Jacobian result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_dAssign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_dAssign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Distortion_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Distortion_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp2);
  {
    try {
      result = (arg1)->dAssign((lsst::afw::geom::ellipses::Distortion const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< Eigen::Matrix2d >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_dAssign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  lsst::afw::geom::ellipses::LogShear *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::detail::EllipticityBase::Jacobian result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_dAssign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_dAssign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Distortion_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Distortion_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp2);
  {
    try {
      result = (arg1)->dAssign((lsst::afw::geom::ellipses::LogShear const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< Eigen::Matrix2d >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_dAssign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Distortion_dAssign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Distortion_dAssign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Distortion_dAssign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dAssign(lsst::afw::geom::ellipses::Distortion *,lsst::afw::geom::ellipses::Distortion const &)\n"
    "    dAssign(lsst::afw::geom::ellipses::Distortion *,lsst::afw::geom::ellipses::LogShear const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_getAxisRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_getAxisRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_getAxisRatio" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Distortion const *)arg1)->getAxisRatio();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":Distortion_getName")) SWIG_fail;
  {
    try {
      result = lsst::afw::geom::ellipses::Distortion::getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Distortion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = (lsst::afw::geom::ellipses::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Distortion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Distortion" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Distortion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LogShear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogShear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogShear" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogShear" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogShear *)new lsst::afw::geom::ellipses::LogShear((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogShear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LogShear",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogShear" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LogShear" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogShear *)new lsst::afw::geom::ellipses::LogShear(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogShear__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogShear",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogShear" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogShear *)new lsst::afw::geom::ellipses::LogShear(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogShear__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LogShear")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::LogShear *)new lsst::afw::geom::ellipses::LogShear();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogShear__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Distortion *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LogShear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogShear" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogShear" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::LogShear *)new lsst::afw::geom::ellipses::LogShear((lsst::afw::geom::ellipses::Distortion const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogShear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LogShear__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LogShear__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LogShear__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LogShear__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LogShear__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_LogShear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::LogShear(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::LogShear(double,double)\n"
    "    lsst::afw::geom::ellipses::LogShear(double)\n"
    "    lsst::afw::geom::ellipses::LogShear()\n"
    "    lsst::afw::geom::ellipses::LogShear(lsst::afw::geom::ellipses::Distortion const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  lsst::afw::geom::ellipses::LogShear *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogShear_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogShear_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogShear_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LogShear_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::LogShear &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::LogShear const &)*arg2);
        result = (lsst::afw::geom::ellipses::LogShear *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  lsst::afw::geom::ellipses::Distortion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::LogShear *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogShear_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogShear_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogShear_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LogShear_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp2);
  {
    try {
      {
        lsst::afw::geom::ellipses::LogShear &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Distortion const &)*arg2);
        result = (lsst::afw::geom::ellipses::LogShear *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LogShear_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LogShear_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LogShear_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::LogShear *,lsst::afw::geom::ellipses::LogShear const &)\n"
    "    operator =(lsst::afw::geom::ellipses::LogShear *,lsst::afw::geom::ellipses::Distortion const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_dAssign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  lsst::afw::geom::ellipses::LogShear *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::detail::EllipticityBase::Jacobian result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogShear_dAssign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogShear_dAssign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogShear_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LogShear_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::LogShear const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp2);
  {
    try {
      result = (arg1)->dAssign((lsst::afw::geom::ellipses::LogShear const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< Eigen::Matrix2d >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_dAssign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  lsst::afw::geom::ellipses::Distortion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::detail::EllipticityBase::Jacobian result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogShear_dAssign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogShear_dAssign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogShear_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LogShear_dAssign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Distortion const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Distortion * >(argp2);
  {
    try {
      result = (arg1)->dAssign((lsst::afw::geom::ellipses::Distortion const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< Eigen::Matrix2d >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_dAssign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LogShear_dAssign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LogShear_dAssign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LogShear_dAssign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dAssign(lsst::afw::geom::ellipses::LogShear *,lsst::afw::geom::ellipses::LogShear const &)\n"
    "    dAssign(lsst::afw::geom::ellipses::LogShear *,lsst::afw::geom::ellipses::Distortion const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_getAxisRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogShear_getAxisRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogShear_getAxisRatio" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::LogShear const *)arg1)->getAxisRatio();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogShear_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogShear_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogShear_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":LogShear_getName")) SWIG_fail;
  {
    try {
      result = lsst::afw::geom::ellipses::LogShear::getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogShear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::LogShear *arg1 = (lsst::afw::geom::ellipses::LogShear *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LogShear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogShear" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::LogShear *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::LogShear * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogShear_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionGeometricRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionGeometricRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionGeometricRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionGeometricRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionGeometricRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionGeometricRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionGeometricRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableDistortionGeometricRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionGeometricRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionGeometricRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionGeometricRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionGeometricRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionGeometricRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionGeometricRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionGeometricRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableDistortionGeometricRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionGeometricRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableDistortionGeometricRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionGeometricRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionGeometricRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableDistortionGeometricRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionGeometricRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionGeometricRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionGeometricRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionGeometricRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableDistortionGeometricRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableDistortionGeometricRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionGeometricRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionGeometricRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionGeometricRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionGeometricRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionGeometricRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionGeometricRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionGeometricRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableDistortionGeometricRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableDistortionGeometricRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionGeometricRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableDistortionGeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableDistortionGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableDistortionGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableDistortionGeometricRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionArithmeticRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionArithmeticRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionArithmeticRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionArithmeticRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionArithmeticRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionArithmeticRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionArithmeticRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableDistortionArithmeticRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionArithmeticRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionArithmeticRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionArithmeticRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionArithmeticRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionArithmeticRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionArithmeticRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionArithmeticRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableDistortionArithmeticRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionArithmeticRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableDistortionArithmeticRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableDistortionArithmeticRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionArithmeticRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableDistortionArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableDistortionArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableDistortionArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableDistortionArithmeticRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionLogGeometricRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionLogGeometricRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogGeometricRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogGeometricRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogGeometricRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionLogGeometricRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionLogGeometricRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableDistortionLogGeometricRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogGeometricRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogGeometricRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogGeometricRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogGeometricRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionLogGeometricRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionLogGeometricRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogGeometricRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableDistortionLogGeometricRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogGeometricRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableDistortionLogGeometricRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableDistortionLogGeometricRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogGeometricRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableDistortionLogGeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableDistortionLogGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableDistortionLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableDistortionLogGeometricRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionLogArithmeticRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionLogArithmeticRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogArithmeticRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogArithmeticRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogArithmeticRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableDistortionLogArithmeticRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionLogArithmeticRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableDistortionLogArithmeticRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogArithmeticRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogArithmeticRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableDistortionLogArithmeticRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogArithmeticRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionLogArithmeticRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableDistortionLogArithmeticRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableDistortionLogArithmeticRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableDistortionLogArithmeticRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableDistortionLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableDistortionLogArithmeticRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableDistortionLogArithmeticRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableDistortionLogArithmeticRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableDistortionLogArithmeticRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableDistortionLogArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableDistortionLogArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_Distortion_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableDistortionLogArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableDistortionLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableDistortionLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableDistortionLogArithmeticRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearGeometricRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearGeometricRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearGeometricRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearGeometricRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearGeometricRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearGeometricRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__GeometricRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearGeometricRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableLogShearGeometricRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearGeometricRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearGeometricRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearGeometricRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearGeometricRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearGeometricRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearGeometricRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearGeometricRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableLogShearGeometricRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearGeometricRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableLogShearGeometricRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearGeometricRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearGeometricRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableLogShearGeometricRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearGeometricRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearGeometricRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearGeometricRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearGeometricRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableLogShearGeometricRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableLogShearGeometricRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearGeometricRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearGeometricRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearGeometricRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearGeometricRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearGeometricRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearGeometricRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearGeometricRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableLogShearGeometricRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableLogShearGeometricRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearGeometricRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_GeometricRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableLogShearGeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableLogShearGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableLogShearGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableLogShearGeometricRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearArithmeticRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearArithmeticRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearArithmeticRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearArithmeticRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearArithmeticRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearArithmeticRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__ArithmeticRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearArithmeticRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableLogShearArithmeticRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearArithmeticRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearArithmeticRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearArithmeticRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearArithmeticRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearArithmeticRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearArithmeticRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearArithmeticRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableLogShearArithmeticRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearArithmeticRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableLogShearArithmeticRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableLogShearArithmeticRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearArithmeticRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_ArithmeticRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableLogShearArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableLogShearArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableLogShearArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableLogShearArithmeticRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearLogGeometricRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearLogGeometricRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogGeometricRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogGeometricRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogGeometricRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearLogGeometricRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogGeometricRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogGeometricRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearLogGeometricRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableLogShearLogGeometricRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogGeometricRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogGeometricRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogGeometricRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogGeometricRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogGeometricRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearLogGeometricRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearLogGeometricRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogGeometricRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableLogShearLogGeometricRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogGeometricRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogGeometricRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableLogShearLogGeometricRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableLogShearLogGeometricRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogGeometricRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogGeometricRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogGeometricRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogGeometricRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogGeometricRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableLogShearLogGeometricRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableLogShearLogGeometricRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableLogShearLogGeometricRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableLogShearLogGeometricRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getE1",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getE1();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_setE1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius_setE1",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_setE1" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearLogArithmeticRadius_setE1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE1(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getE2",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (double)((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getE2();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_setE2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius_setE2",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_setE2" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearLogArithmeticRadius_setE2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setE2(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius &_result_ref = (arg1)->getRadius();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogArithmeticRadius_getRadius__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogArithmeticRadius_getRadius__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogArithmeticRadius_getRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)\n"
    "    getRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_setRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SeparableLogShearLogArithmeticRadius_setRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRadius(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_setRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius_setRadius",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_setRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogArithmeticRadius_setRadius" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius * >(argp2);
  {
    try {
      (arg1)->setRadius((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_setRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearLogArithmeticRadius_setRadius__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SeparableLogShearLogArithmeticRadius_setRadius__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogArithmeticRadius_setRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *,double)\n"
    "    setRadius(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getEllipticity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &_result_ref = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getEllipticity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getEllipticity",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getEllipticity" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity &_result_ref = (arg1)->getEllipticity();
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getEllipticity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogArithmeticRadius_getEllipticity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SeparableLogShearLogArithmeticRadius_getEllipticity__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogArithmeticRadius_getEllipticity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)\n"
    "    getEllipticity(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_clone",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_clone" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->clone();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_getName" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const *)arg1)->getName();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
        > > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogArithmeticRadius_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
        result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_assign(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearLogArithmeticRadius_assign__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SeparableLogShearLogArithmeticRadius_assign__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SeparableLogShearLogArithmeticRadius_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *,lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)\n"
    "    operator =(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *,lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1,arg2,arg3,arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SeparableLogShearLogArithmeticRadius")) SWIG_fail;
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((std::complex< double > const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((std::complex< double > const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "std::complex< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((std::complex< double > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)*arg1,arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity * >(argp1);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  bool arg2 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SeparableLogShearLogArithmeticRadius",&obj0,&obj1)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector *arg1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ParameterVector val1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    lsst::ndarray::PyPtr tmp(obj0,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage2(tmp, val1)) return NULL;
    arg1 = &val1;
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Separable<
        lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
        > > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *)new lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SeparableLogShearLogArithmeticRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_14(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_12(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      lsst::ndarray::PyPtr tmp(argv[0],true);
      _v = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::BaseCore::ParameterVector >::fromPythonStage1(tmp);
      if (!(_v)) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SeparableLogShearLogArithmeticRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SeparableLogShearLogArithmeticRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(double,double,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(double,double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(double,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >()\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(std::complex< double > const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(std::complex< double > const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(std::complex< double > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &,double,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &,double)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &,bool)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore::ParameterVector const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > const &)\n"
    "    lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >(lsst::afw::geom::ellipses::BaseCore const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogArithmeticRadius__transform" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transform(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::LinearTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::LinearTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogArithmeticRadius__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::LinearTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::LinearTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::LinearTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___transformInPlace(arg1,(lsst::afw::geom::LinearTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius__convolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SeparableLogShearLogArithmeticRadius__convolve",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius__convolve" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SeparableLogShearLogArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SeparableLogShearLogArithmeticRadius__convolve" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg___convolve(arg1,(lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_cast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_cast" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__cast((boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
    lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
    > >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast" "', argument " "1"" of type '" "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > * >(argp1);
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Separable_Sl_lsst_afw_geom_ellipses_LogShear_Sc_lsst_afw_geom_ellipses_LogArithmeticRadius_Sg__SWIGSharedPtrUpcast(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SeparableLogShearLogArithmeticRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *arg1 = (lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SeparableLogShearLogArithmeticRadius",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SeparableLogShearLogArithmeticRadius" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Separable<
      lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius
      > > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SeparableLogShearLogArithmeticRadius_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ellipse_getCenter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::PointD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse_getCenter",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_getCenter" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::PointD const &_result_ref = ((lsst::afw::geom::ellipses::Ellipse const *)arg1)->getCenter();
        result = (lsst::afw::geom::PointD *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_getCenter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::PointD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse_getCenter",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_getCenter" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      {
        lsst::afw::geom::PointD &_result_ref = (arg1)->getCenter();
        result = (lsst::afw::geom::PointD *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_getCenter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Ellipse_getCenter__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Ellipse_getCenter__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Ellipse_getCenter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getCenter(lsst::afw::geom::ellipses::Ellipse const *)\n"
    "    getCenter(lsst::afw::geom::ellipses::Ellipse *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_setCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::PointD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_setCenter",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_setCenter" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse_setCenter" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse_setCenter" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::PointD * >(argp2);
  {
    try {
      (arg1)->setCenter((lsst::afw::geom::PointD const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse__getCorePtr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse__getCorePtr",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse__getCorePtr" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Ellipse const *)arg1)->getCorePtr();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse__getCorePtr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse__getCorePtr",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse__getCorePtr" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = (arg1)->getCorePtr();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::BaseCore >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse__getCorePtr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Ellipse__getCorePtr__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Ellipse__getCorePtr__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Ellipse__getCorePtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getCorePtr(lsst::afw::geom::ellipses::Ellipse const *)\n"
    "    getCorePtr(lsst::afw::geom::ellipses::Ellipse *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_setCore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::ellipses::BaseCore *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_setCore",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_setCore" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse_setCore" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse_setCore" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp2)->get());
    }
  }
  {
    try {
      (arg1)->setCore((lsst::afw::geom::ellipses::BaseCore const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse_normalize",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_normalize" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (arg1)->normalize();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_grow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_grow",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_grow" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_grow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->grow(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_scale",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_scale" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->scale(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::ExtentD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_shift",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_shift" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__ExtentT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse_shift" "', argument " "2"" of type '" "lsst::afw::geom::ExtentD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse_shift" "', argument " "2"" of type '" "lsst::afw::geom::ExtentD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::ExtentD * >(argp2);
  {
    try {
      (arg1)->shift((lsst::afw::geom::ExtentD const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_getParameterVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Ellipse::ParameterVector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse_getParameterVector",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_getParameterVector" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Ellipse const *)arg1)->getParameterVector();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    resultobj = lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::Ellipse::ParameterVector >::toPython(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_setParameterVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::ellipses::Ellipse::ParameterVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  lsst::afw::geom::ellipses::Ellipse::ParameterVector val2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_setParameterVector",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_setParameterVector" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    lsst::ndarray::PyPtr tmp(obj1,true);
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::Ellipse::ParameterVector >::fromPythonStage1(tmp)) return NULL;
    if (!lsst::ndarray::PyConverter< lsst::afw::geom::ellipses::Ellipse::ParameterVector >::fromPythonStage2(tmp, val2)) return NULL;
    arg2 = &val2;
  }
  {
    try {
      (arg1)->setParameterVector((lsst::afw::geom::ellipses::Ellipse::ParameterVector const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_computeEnvelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Ellipse::Envelope result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse_computeEnvelope",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_computeEnvelope" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = ((lsst::afw::geom::ellipses::Ellipse const *)arg1)->computeEnvelope();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::ellipses::Ellipse::Envelope(static_cast< const lsst::afw::geom::ellipses::Ellipse::Envelope& >(result))), SWIGTYPE_p_lsst__afw__geom__Box2D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::ellipses::Ellipse *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse_assign",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_assign" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse_assign" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2)->get());
    }
  }
  {
    try {
      {
        lsst::afw::geom::ellipses::Ellipse &_result_ref = (arg1)->operator =((lsst::afw::geom::ellipses::Ellipse const &)*arg2);
        result = (lsst::afw::geom::ellipses::Ellipse *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::ellipses::Ellipse *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse___eq__" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse___eq__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse___eq__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2)->get());
    }
  }
  {
    try {
      result = (bool)((lsst::afw::geom::ellipses::Ellipse const *)arg1)->operator ==((lsst::afw::geom::ellipses::Ellipse const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::ellipses::Ellipse *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse___ne__" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse___ne__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse___ne__" "', argument " "2"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp2)->get());
    }
  }
  {
    try {
      result = (bool)((lsst::afw::geom::ellipses::Ellipse const *)arg1)->operator !=((lsst::afw::geom::ellipses::Ellipse const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ellipse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ellipse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  lsst::afw::geom::PointD *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Ellipse",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Ellipse" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::PointD * >(argp2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Ellipse *)new lsst::afw::geom::ellipses::Ellipse((lsst::afw::geom::ellipses::BaseCore const &)*arg1,(lsst::afw::geom::PointD const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Ellipse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::BaseCore * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::BaseCore > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Ellipse *)new lsst::afw::geom::ellipses::Ellipse((lsst::afw::geom::ellipses::BaseCore const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  lsst::afw::geom::PointD *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Ellipse",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Ellipse" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "2"" of type '" "lsst::afw::geom::PointD const &""'"); 
  }
  arg2 = reinterpret_cast< lsst::afw::geom::PointD * >(argp2);
  {
    try {
      result = (lsst::afw::geom::ellipses::Ellipse *)new lsst::afw::geom::ellipses::Ellipse((lsst::afw::geom::ellipses::BaseCore::Ptr const &)*arg1,(lsst::afw::geom::PointD const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipse__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::BaseCore::Ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  lsst::afw::geom::ellipses::BaseCore::Ptr tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Ellipse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::BaseCore::Ptr const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      delete reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< lsst::afw::geom::ellipses::BaseCore::Ptr * >(argp1) : &tempshared1;
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Ellipse *)new lsst::afw::geom::ellipses::Ellipse((lsst::afw::geom::ellipses::BaseCore::Ptr const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipse__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Ellipse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Ellipse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Ellipse *)new lsst::afw::geom::ellipses::Ellipse((lsst::afw::geom::ellipses::Ellipse const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = result ? new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellipse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ellipse__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ellipse__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ellipse__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ellipse__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ellipse__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Ellipse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    lsst::afw::geom::ellipses::Ellipse(lsst::afw::geom::ellipses::BaseCore const &,lsst::afw::geom::PointD const &)\n"
    "    lsst::afw::geom::ellipses::Ellipse(lsst::afw::geom::ellipses::BaseCore const &)\n"
    "    lsst::afw::geom::ellipses::Ellipse(lsst::afw::geom::ellipses::BaseCore::Ptr const &,lsst::afw::geom::PointD const &)\n"
    "    lsst::afw::geom::ellipses::Ellipse(lsst::afw::geom::ellipses::BaseCore::Ptr const &)\n"
    "    lsst::afw::geom::ellipses::Ellipse(lsst::afw::geom::ellipses::Ellipse const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse__transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::AffineTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::AffineTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< lsst::afw::geom::ellipses::Ellipse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse__transform",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse__transform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse__transform" "', argument " "2"" of type '" "lsst::afw::geom::AffineTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse__transform" "', argument " "2"" of type '" "lsst::afw::geom::AffineTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::AffineTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::AffineTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::AffineTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::AffineTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::AffineTransform > * >(argp2)->get());
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Ellipse__transform(arg1,(lsst::afw::geom::AffineTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > *smartresult = new boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse >(new lsst::afw::geom::ellipses::Ellipse((lsst::afw::geom::ellipses::Ellipse &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse__transformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  lsst::afw::geom::AffineTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< lsst::afw::geom::AffineTransform const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ellipse__transformInPlace",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse__transformInPlace" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::AffineTransform const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse__transformInPlace" "', argument " "2"" of type '" "lsst::afw::geom::AffineTransform const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::AffineTransform > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::AffineTransform > * >(argp2);
      arg2 = const_cast< lsst::afw::geom::AffineTransform * >(tempshared2.get());
    } else {
      arg2 = const_cast< lsst::afw::geom::AffineTransform * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::AffineTransform > * >(argp2)->get());
    }
  }
  {
    try {
      lsst_afw_geom_ellipses_Ellipse__transformInPlace(arg1,(lsst::afw::geom::AffineTransform const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellipse__getGridTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = (lsst::afw::geom::ellipses::Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > tempshared1 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::AffineTransform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ellipse__getGridTransform",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse__getGridTransform" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try {
      result = lsst_afw_geom_ellipses_Ellipse__getGridTransform(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::geom::AffineTransform > *smartresult = new boost::shared_ptr<  lsst::afw::geom::AffineTransform >(new lsst::afw::geom::AffineTransform((lsst::afw::geom::AffineTransform &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ellipse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Parametric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Ellipse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse const > tempshared1 ;
  PyObject * obj0 = 0 ;
  lsst::afw::geom::ellipses::Parametric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parametric",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Parametric" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Parametric" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Ellipse const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1);
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(tempshared1.get());
    } else {
      arg1 = const_cast< lsst::afw::geom::ellipses::Ellipse * >(reinterpret_cast< boost::shared_ptr< const lsst::afw::geom::ellipses::Ellipse > * >(argp1)->get());
    }
  }
  {
    try {
      result = (lsst::afw::geom::ellipses::Parametric *)new lsst::afw::geom::ellipses::Parametric((lsst::afw::geom::ellipses::Ellipse const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_lsst__afw__geom__ellipses__Parametric, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Parametric___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Parametric *arg1 = (lsst::afw::geom::ellipses::Parametric *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  lsst::afw::geom::PointD result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Parametric___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Parametric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parametric___call__" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Parametric const *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Parametric * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Parametric___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((lsst::afw::geom::ellipses::Parametric const *)arg1)->operator ()(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new lsst::afw::geom::PointD(static_cast< const lsst::afw::geom::PointD& >(result))), SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Parametric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  lsst::afw::geom::ellipses::Parametric *arg1 = (lsst::afw::geom::ellipses::Parametric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Parametric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_lsst__afw__geom__ellipses__Parametric, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Parametric" "', argument " "1"" of type '" "lsst::afw::geom::ellipses::Parametric *""'"); 
  }
  arg1 = reinterpret_cast< lsst::afw::geom::ellipses::Parametric * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Parametric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_lsst__afw__geom__ellipses__Parametric, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"delete_PySwigIterator", _wrap_delete_PySwigIterator, METH_VARARGS, (char *)"delete_PySwigIterator(PySwigIterator self)"},
	 { (char *)"PySwigIterator_value", _wrap_PySwigIterator_value, METH_VARARGS, (char *)"PySwigIterator_value(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_incr", _wrap_PySwigIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> PySwigIterator\n"
		"PySwigIterator_incr(PySwigIterator self) -> PySwigIterator\n"
		""},
	 { (char *)"PySwigIterator_decr", _wrap_PySwigIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> PySwigIterator\n"
		"PySwigIterator_decr(PySwigIterator self) -> PySwigIterator\n"
		""},
	 { (char *)"PySwigIterator_distance", _wrap_PySwigIterator_distance, METH_VARARGS, (char *)"PySwigIterator_distance(PySwigIterator self, PySwigIterator x) -> ptrdiff_t"},
	 { (char *)"PySwigIterator_equal", _wrap_PySwigIterator_equal, METH_VARARGS, (char *)"PySwigIterator_equal(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator_copy", _wrap_PySwigIterator_copy, METH_VARARGS, (char *)"PySwigIterator_copy(PySwigIterator self) -> PySwigIterator"},
	 { (char *)"PySwigIterator_next", _wrap_PySwigIterator_next, METH_VARARGS, (char *)"PySwigIterator_next(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_previous", _wrap_PySwigIterator_previous, METH_VARARGS, (char *)"PySwigIterator_previous(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_advance", _wrap_PySwigIterator_advance, METH_VARARGS, (char *)"PySwigIterator_advance(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___eq__", _wrap_PySwigIterator___eq__, METH_VARARGS, (char *)"PySwigIterator___eq__(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator___ne__", _wrap_PySwigIterator___ne__, METH_VARARGS, (char *)"PySwigIterator___ne__(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator___iadd__", _wrap_PySwigIterator___iadd__, METH_VARARGS, (char *)"PySwigIterator___iadd__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___isub__", _wrap_PySwigIterator___isub__, METH_VARARGS, (char *)"PySwigIterator___isub__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___add__", _wrap_PySwigIterator___add__, METH_VARARGS, (char *)"PySwigIterator___add__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___sub__", _wrap_PySwigIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> PySwigIterator\n"
		"PySwigIterator___sub__(PySwigIterator self, PySwigIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"PySwigIterator_swigregister", PySwigIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, (char *)"ios_base_register_callback(ios_base self, event_callback __fn, int __index)"},
	 { (char *)"ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, (char *)"\n"
		"flags() -> fmtflags\n"
		"ios_base_flags(ios_base self, fmtflags __fmtfl) -> fmtflags\n"
		""},
	 { (char *)"ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, (char *)"\n"
		"setf(fmtflags __fmtfl) -> fmtflags\n"
		"ios_base_setf(ios_base self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags\n"
		""},
	 { (char *)"ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, (char *)"ios_base_unsetf(ios_base self, fmtflags __mask)"},
	 { (char *)"ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, (char *)"\n"
		"precision() -> streamsize\n"
		"ios_base_precision(ios_base self, streamsize __prec) -> streamsize\n"
		""},
	 { (char *)"ios_base_width", _wrap_ios_base_width, METH_VARARGS, (char *)"\n"
		"width() -> streamsize\n"
		"ios_base_width(ios_base self, streamsize __wide) -> streamsize\n"
		""},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, (char *)"\n"
		"sync_with_stdio(bool __sync=True) -> bool\n"
		"ios_base_sync_with_stdio() -> bool\n"
		""},
	 { (char *)"ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, (char *)"ios_base_imbue(ios_base self, locale __loc) -> locale"},
	 { (char *)"ios_base_getloc", _wrap_ios_base_getloc, METH_VARARGS, (char *)"ios_base_getloc(ios_base self) -> locale"},
	 { (char *)"ios_base_xalloc", _wrap_ios_base_xalloc, METH_VARARGS, (char *)"ios_base_xalloc() -> int"},
	 { (char *)"ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, (char *)"ios_base_iword(ios_base self, int __ix) -> long"},
	 { (char *)"ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, (char *)"ios_base_pword(ios_base self, int __ix) -> void"},
	 { (char *)"delete_ios_base", _wrap_delete_ios_base, METH_VARARGS, (char *)"delete_ios_base(ios_base self)"},
	 { (char *)"ios_base_swigregister", ios_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_rdstate", _wrap_ios_rdstate, METH_VARARGS, (char *)"ios_rdstate(ios self) -> iostate"},
	 { (char *)"ios_clear", _wrap_ios_clear, METH_VARARGS, (char *)"\n"
		"clear(iostate __state=goodbit)\n"
		"ios_clear(ios self)\n"
		""},
	 { (char *)"ios_setstate", _wrap_ios_setstate, METH_VARARGS, (char *)"ios_setstate(ios self, iostate __state)"},
	 { (char *)"ios_good", _wrap_ios_good, METH_VARARGS, (char *)"ios_good(ios self) -> bool"},
	 { (char *)"ios_eof", _wrap_ios_eof, METH_VARARGS, (char *)"ios_eof(ios self) -> bool"},
	 { (char *)"ios_fail", _wrap_ios_fail, METH_VARARGS, (char *)"ios_fail(ios self) -> bool"},
	 { (char *)"ios_bad", _wrap_ios_bad, METH_VARARGS, (char *)"ios_bad(ios self) -> bool"},
	 { (char *)"ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, (char *)"\n"
		"exceptions() -> iostate\n"
		"ios_exceptions(ios self, iostate __except)\n"
		""},
	 { (char *)"new_ios", _wrap_new_ios, METH_VARARGS, (char *)"new_ios(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"},
	 { (char *)"delete_ios", _wrap_delete_ios, METH_VARARGS, (char *)"delete_ios(ios self)"},
	 { (char *)"ios_tie", _wrap_ios_tie, METH_VARARGS, (char *)"\n"
		"tie() -> ostream\n"
		"ios_tie(ios self, ostream __tiestr) -> ostream\n"
		""},
	 { (char *)"ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, (char *)"\n"
		"rdbuf() -> std::basic_streambuf<(char,std::char_traits<(char)>)>\n"
		"ios_rdbuf(ios self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>\n"
		""},
	 { (char *)"ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, (char *)"ios_copyfmt(ios self, ios __rhs) -> ios"},
	 { (char *)"ios_fill", _wrap_ios_fill, METH_VARARGS, (char *)"\n"
		"fill() -> char_type\n"
		"ios_fill(ios self, char_type __ch) -> char_type\n"
		""},
	 { (char *)"ios_imbue", _wrap_ios_imbue, METH_VARARGS, (char *)"ios_imbue(ios self, locale __loc) -> locale"},
	 { (char *)"ios_narrow", _wrap_ios_narrow, METH_VARARGS, (char *)"ios_narrow(ios self, char_type __c, char __dfault) -> char"},
	 { (char *)"ios_widen", _wrap_ios_widen, METH_VARARGS, (char *)"ios_widen(ios self, char __c) -> char_type"},
	 { (char *)"ios_swigregister", ios_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ostream", _wrap_new_ostream, METH_VARARGS, (char *)"new_ostream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"},
	 { (char *)"delete_ostream", _wrap_delete_ostream, METH_VARARGS, (char *)"delete_ostream(ostream self)"},
	 { (char *)"ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, (char *)"\n"
		"__lshift__(ostream __pf) -> ostream\n"
		"__lshift__(ios __pf) -> ostream\n"
		"__lshift__(ios_base __pf) -> ostream\n"
		"__lshift__(long __n) -> ostream\n"
		"__lshift__(unsigned long __n) -> ostream\n"
		"__lshift__(bool __n) -> ostream\n"
		"__lshift__(short __n) -> ostream\n"
		"__lshift__(unsigned short __n) -> ostream\n"
		"__lshift__(int __n) -> ostream\n"
		"__lshift__(unsigned int __n) -> ostream\n"
		"__lshift__(long long __n) -> ostream\n"
		"__lshift__(unsigned long long __n) -> ostream\n"
		"__lshift__(double __f) -> ostream\n"
		"__lshift__(float __f) -> ostream\n"
		"__lshift__(long double __f) -> ostream\n"
		"__lshift__(void __p) -> ostream\n"
		"__lshift__(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream\n"
		"ostream___lshift__(ostream self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream\n"
		""},
	 { (char *)"ostream_put", _wrap_ostream_put, METH_VARARGS, (char *)"ostream_put(ostream self, char_type __c) -> ostream"},
	 { (char *)"ostream_write", _wrap_ostream_write, METH_VARARGS, (char *)"ostream_write(ostream self, char_type __s, streamsize __n) -> ostream"},
	 { (char *)"ostream_flush", _wrap_ostream_flush, METH_VARARGS, (char *)"ostream_flush(ostream self) -> ostream"},
	 { (char *)"ostream_tellp", _wrap_ostream_tellp, METH_VARARGS, (char *)"ostream_tellp(ostream self) -> pos_type"},
	 { (char *)"ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, (char *)"\n"
		"seekp(pos_type ?) -> ostream\n"
		"ostream_seekp(ostream self, off_type ?, seekdir ?) -> ostream\n"
		""},
	 { (char *)"ostream_swigregister", ostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_istream", _wrap_new_istream, METH_VARARGS, (char *)"new_istream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"},
	 { (char *)"delete_istream", _wrap_delete_istream, METH_VARARGS, (char *)"delete_istream(istream self)"},
	 { (char *)"istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, (char *)"\n"
		"__rshift__(istream __pf) -> istream\n"
		"__rshift__(ios __pf) -> istream\n"
		"__rshift__(ios_base __pf) -> istream\n"
		"__rshift__(bool __n) -> istream\n"
		"__rshift__(short __n) -> istream\n"
		"__rshift__(unsigned short __n) -> istream\n"
		"__rshift__(int __n) -> istream\n"
		"__rshift__(unsigned int __n) -> istream\n"
		"__rshift__(long __n) -> istream\n"
		"__rshift__(unsigned long __n) -> istream\n"
		"__rshift__(long long __n) -> istream\n"
		"__rshift__(unsigned long long __n) -> istream\n"
		"__rshift__(float __f) -> istream\n"
		"__rshift__(double __f) -> istream\n"
		"__rshift__(long double __f) -> istream\n"
		"__rshift__(void __p) -> istream\n"
		"istream___rshift__(istream self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream\n"
		""},
	 { (char *)"istream_gcount", _wrap_istream_gcount, METH_VARARGS, (char *)"istream_gcount(istream self) -> streamsize"},
	 { (char *)"istream_get", _wrap_istream_get, METH_VARARGS, (char *)"\n"
		"get() -> int_type\n"
		"get(char_type __c) -> istream\n"
		"get(char_type __s, streamsize __n, char_type __delim) -> istream\n"
		"get(char_type __s, streamsize __n) -> istream\n"
		"get(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, \n"
		"    char_type __delim) -> istream\n"
		"istream_get(istream self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream\n"
		""},
	 { (char *)"istream_getline", _wrap_istream_getline, METH_VARARGS, (char *)"\n"
		"getline(char_type __s, streamsize __n, char_type __delim) -> istream\n"
		"istream_getline(istream self, char_type __s, streamsize __n) -> istream\n"
		""},
	 { (char *)"istream_ignore", _wrap_istream_ignore, METH_VARARGS, (char *)"\n"
		"ignore(streamsize __n=1, int_type __delim=std::char_traits< char >::eof()) -> istream\n"
		"ignore(streamsize __n=1) -> istream\n"
		"istream_ignore(istream self) -> istream\n"
		""},
	 { (char *)"istream_peek", _wrap_istream_peek, METH_VARARGS, (char *)"istream_peek(istream self) -> int_type"},
	 { (char *)"istream_read", _wrap_istream_read, METH_VARARGS, (char *)"istream_read(istream self, char_type __s, streamsize __n) -> istream"},
	 { (char *)"istream_readsome", _wrap_istream_readsome, METH_VARARGS, (char *)"istream_readsome(istream self, char_type __s, streamsize __n) -> streamsize"},
	 { (char *)"istream_putback", _wrap_istream_putback, METH_VARARGS, (char *)"istream_putback(istream self, char_type __c) -> istream"},
	 { (char *)"istream_unget", _wrap_istream_unget, METH_VARARGS, (char *)"istream_unget(istream self) -> istream"},
	 { (char *)"istream_sync", _wrap_istream_sync, METH_VARARGS, (char *)"istream_sync(istream self) -> int"},
	 { (char *)"istream_tellg", _wrap_istream_tellg, METH_VARARGS, (char *)"istream_tellg(istream self) -> pos_type"},
	 { (char *)"istream_seekg", _wrap_istream_seekg, METH_VARARGS, (char *)"\n"
		"seekg(pos_type ?) -> istream\n"
		"istream_seekg(istream self, off_type ?, seekdir ?) -> istream\n"
		""},
	 { (char *)"istream_swigregister", istream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_iostream", _wrap_new_iostream, METH_VARARGS, (char *)"new_iostream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"},
	 { (char *)"delete_iostream", _wrap_delete_iostream, METH_VARARGS, (char *)"delete_iostream(iostream self)"},
	 { (char *)"iostream_swigregister", iostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"endl", _wrap_endl, METH_VARARGS, (char *)"endl(ostream ?) -> ostream\nswig_ptr: endl_cb_ptr"},
	 { (char *)"ends", _wrap_ends, METH_VARARGS, (char *)"ends(ostream ?) -> ostream\nswig_ptr: ends_cb_ptr"},
	 { (char *)"flush", _wrap_flush, METH_VARARGS, (char *)"flush(ostream ?) -> ostream\nswig_ptr: flush_cb_ptr"},
	 { (char *)"BaseCore_make", _wrap_BaseCore_make, METH_VARARGS, (char *)"\n"
		"make(string name) -> Ptr\n"
		"make(string name, ParameterVector parameters) -> Ptr\n"
		"make(string name, double v1, double v2, double v3) -> Ptr\n"
		"BaseCore_make(string name, BaseCore other) -> Ptr\n"
		""},
	 { (char *)"BaseCore_getName", _wrap_BaseCore_getName, METH_VARARGS, (char *)"BaseCore_getName(BaseCore self) -> string"},
	 { (char *)"BaseCore_clone", _wrap_BaseCore_clone, METH_VARARGS, (char *)"BaseCore_clone(BaseCore self) -> Ptr"},
	 { (char *)"BaseCore_normalize", _wrap_BaseCore_normalize, METH_VARARGS, (char *)"BaseCore_normalize(BaseCore self)"},
	 { (char *)"BaseCore_grow", _wrap_BaseCore_grow, METH_VARARGS, (char *)"BaseCore_grow(BaseCore self, double buffer)"},
	 { (char *)"BaseCore_scale", _wrap_BaseCore_scale, METH_VARARGS, (char *)"BaseCore_scale(BaseCore self, double factor)"},
	 { (char *)"BaseCore_getArea", _wrap_BaseCore_getArea, METH_VARARGS, (char *)"BaseCore_getArea(BaseCore self) -> double"},
	 { (char *)"BaseCore_getGeometricRadius", _wrap_BaseCore_getGeometricRadius, METH_VARARGS, (char *)"BaseCore_getGeometricRadius(BaseCore self) -> double"},
	 { (char *)"BaseCore_getArithmeticRadius", _wrap_BaseCore_getArithmeticRadius, METH_VARARGS, (char *)"BaseCore_getArithmeticRadius(BaseCore self) -> double"},
	 { (char *)"BaseCore_computeDimensions", _wrap_BaseCore_computeDimensions, METH_VARARGS, (char *)"BaseCore_computeDimensions(BaseCore self) -> ExtentD"},
	 { (char *)"BaseCore_getParameterVector", _wrap_BaseCore_getParameterVector, METH_VARARGS, (char *)"BaseCore_getParameterVector(BaseCore self) -> ParameterVector"},
	 { (char *)"BaseCore_setParameterVector", _wrap_BaseCore_setParameterVector, METH_VARARGS, (char *)"BaseCore_setParameterVector(BaseCore self, ParameterVector vector)"},
	 { (char *)"BaseCore___eq__", _wrap_BaseCore___eq__, METH_VARARGS, (char *)"BaseCore___eq__(BaseCore self, BaseCore other) -> bool"},
	 { (char *)"BaseCore___ne__", _wrap_BaseCore___ne__, METH_VARARGS, (char *)"BaseCore___ne__(BaseCore self, BaseCore other) -> bool"},
	 { (char *)"BaseCore_assign", _wrap_BaseCore_assign, METH_VARARGS, (char *)"BaseCore_assign(BaseCore self, BaseCore other) -> BaseCore"},
	 { (char *)"BaseCore_dAssign", _wrap_BaseCore_dAssign, METH_VARARGS, (char *)"BaseCore_dAssign(BaseCore self, BaseCore other) -> Jacobian"},
	 { (char *)"delete_BaseCore", _wrap_delete_BaseCore, METH_VARARGS, (char *)"delete_BaseCore(BaseCore self)"},
	 { (char *)"BaseCore_swigregister", BaseCore_swigregister, METH_VARARGS, NULL},
	 { (char *)"Axes_getA", _wrap_Axes_getA, METH_VARARGS, (char *)"Axes_getA(Axes self) -> double"},
	 { (char *)"Axes_setA", _wrap_Axes_setA, METH_VARARGS, (char *)"Axes_setA(Axes self, double a)"},
	 { (char *)"Axes_getB", _wrap_Axes_getB, METH_VARARGS, (char *)"Axes_getB(Axes self) -> double"},
	 { (char *)"Axes_setB", _wrap_Axes_setB, METH_VARARGS, (char *)"Axes_setB(Axes self, double b)"},
	 { (char *)"Axes_getTheta", _wrap_Axes_getTheta, METH_VARARGS, (char *)"Axes_getTheta(Axes self) -> double"},
	 { (char *)"Axes_setTheta", _wrap_Axes_setTheta, METH_VARARGS, (char *)"Axes_setTheta(Axes self, double theta)"},
	 { (char *)"Axes_clone", _wrap_Axes_clone, METH_VARARGS, (char *)"Axes_clone(Axes self) -> Ptr"},
	 { (char *)"Axes_getName", _wrap_Axes_getName, METH_VARARGS, (char *)"Axes_getName(Axes self) -> string"},
	 { (char *)"Axes_normalize", _wrap_Axes_normalize, METH_VARARGS, (char *)"Axes_normalize(Axes self)"},
	 { (char *)"Axes_assign", _wrap_Axes_assign, METH_VARARGS, (char *)"\n"
		"assign(Axes other) -> Axes\n"
		"Axes_assign(Axes self, BaseCore other) -> Axes\n"
		""},
	 { (char *)"new_Axes", _wrap_new_Axes, METH_VARARGS, (char *)"\n"
		"Axes(double a=1.0, double b=1.0, double theta=0.0, bool normalize=False)\n"
		"Axes(double a=1.0, double b=1.0, double theta=0.0)\n"
		"Axes(double a=1.0, double b=1.0)\n"
		"Axes(double a=1.0)\n"
		"Axes()\n"
		"Axes(ParameterVector vector, bool normalize=False)\n"
		"Axes(ParameterVector vector)\n"
		"Axes(Axes other)\n"
		"new_Axes(BaseCore other) -> Axes\n"
		""},
	 { (char *)"Axes_SWIGSharedPtrUpcast", _wrap_Axes_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"Axes_SWIGSharedPtrUpcast(__dummy_7__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"Axes__transform", _wrap_Axes__transform, METH_VARARGS, (char *)"Axes__transform(Axes self, LinearTransform t) -> Ptr"},
	 { (char *)"Axes__transformInPlace", _wrap_Axes__transformInPlace, METH_VARARGS, (char *)"Axes__transformInPlace(Axes self, LinearTransform t)"},
	 { (char *)"Axes__convolve", _wrap_Axes__convolve, METH_VARARGS, (char *)"Axes__convolve(Axes self, BaseCore other) -> Ptr"},
	 { (char *)"Axes_cast", _wrap_Axes_cast, METH_VARARGS, (char *)"Axes_cast(Ptr p) -> Ptr"},
	 { (char *)"delete_Axes", _wrap_delete_Axes, METH_VARARGS, (char *)"delete_Axes(Axes self)"},
	 { (char *)"Axes_swigregister", Axes_swigregister, METH_VARARGS, NULL},
	 { (char *)"Quadrupole_getIXX", _wrap_Quadrupole_getIXX, METH_VARARGS, (char *)"Quadrupole_getIXX(Quadrupole self) -> double"},
	 { (char *)"Quadrupole_setIXX", _wrap_Quadrupole_setIXX, METH_VARARGS, (char *)"Quadrupole_setIXX(Quadrupole self, double ixx)"},
	 { (char *)"Quadrupole_getIYY", _wrap_Quadrupole_getIYY, METH_VARARGS, (char *)"Quadrupole_getIYY(Quadrupole self) -> double"},
	 { (char *)"Quadrupole_setIYY", _wrap_Quadrupole_setIYY, METH_VARARGS, (char *)"Quadrupole_setIYY(Quadrupole self, double iyy)"},
	 { (char *)"Quadrupole_getIXY", _wrap_Quadrupole_getIXY, METH_VARARGS, (char *)"Quadrupole_getIXY(Quadrupole self) -> double"},
	 { (char *)"Quadrupole_setIXY", _wrap_Quadrupole_setIXY, METH_VARARGS, (char *)"Quadrupole_setIXY(Quadrupole self, double ixy)"},
	 { (char *)"Quadrupole_clone", _wrap_Quadrupole_clone, METH_VARARGS, (char *)"Quadrupole_clone(Quadrupole self) -> Ptr"},
	 { (char *)"Quadrupole_getName", _wrap_Quadrupole_getName, METH_VARARGS, (char *)"Quadrupole_getName(Quadrupole self) -> string"},
	 { (char *)"Quadrupole_normalize", _wrap_Quadrupole_normalize, METH_VARARGS, (char *)"Quadrupole_normalize(Quadrupole self)"},
	 { (char *)"Quadrupole_getMatrix", _wrap_Quadrupole_getMatrix, METH_VARARGS, (char *)"Quadrupole_getMatrix(Quadrupole self) -> Matrix"},
	 { (char *)"Quadrupole_getDeterminant", _wrap_Quadrupole_getDeterminant, METH_VARARGS, (char *)"Quadrupole_getDeterminant(Quadrupole self) -> double"},
	 { (char *)"Quadrupole_assign", _wrap_Quadrupole_assign, METH_VARARGS, (char *)"\n"
		"assign(Quadrupole other) -> Quadrupole\n"
		"Quadrupole_assign(Quadrupole self, BaseCore other) -> Quadrupole\n"
		""},
	 { (char *)"new_Quadrupole", _wrap_new_Quadrupole, METH_VARARGS, (char *)"\n"
		"Quadrupole(double ixx=1.0, double iyy=1.0, double ixy=0.0, bool normalize=False)\n"
		"Quadrupole(double ixx=1.0, double iyy=1.0, double ixy=0.0)\n"
		"Quadrupole(double ixx=1.0, double iyy=1.0)\n"
		"Quadrupole(double ixx=1.0)\n"
		"Quadrupole()\n"
		"Quadrupole(ParameterVector vector, bool normalize=False)\n"
		"Quadrupole(ParameterVector vector)\n"
		"Quadrupole(Matrix matrix, bool normalize=True)\n"
		"Quadrupole(Matrix matrix)\n"
		"Quadrupole(Quadrupole other)\n"
		"new_Quadrupole(BaseCore other) -> Quadrupole\n"
		""},
	 { (char *)"Quadrupole_SWIGSharedPtrUpcast", _wrap_Quadrupole_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"Quadrupole_SWIGSharedPtrUpcast(__dummy_9__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"Quadrupole__transform", _wrap_Quadrupole__transform, METH_VARARGS, (char *)"Quadrupole__transform(Quadrupole self, LinearTransform t) -> Ptr"},
	 { (char *)"Quadrupole__transformInPlace", _wrap_Quadrupole__transformInPlace, METH_VARARGS, (char *)"Quadrupole__transformInPlace(Quadrupole self, LinearTransform t)"},
	 { (char *)"Quadrupole__convolve", _wrap_Quadrupole__convolve, METH_VARARGS, (char *)"Quadrupole__convolve(Quadrupole self, BaseCore other) -> Ptr"},
	 { (char *)"Quadrupole_cast", _wrap_Quadrupole_cast, METH_VARARGS, (char *)"Quadrupole_cast(Ptr p) -> Ptr"},
	 { (char *)"delete_Quadrupole", _wrap_delete_Quadrupole, METH_VARARGS, (char *)"delete_Quadrupole(Quadrupole self)"},
	 { (char *)"Quadrupole_swigregister", Quadrupole_swigregister, METH_VARARGS, NULL},
	 { (char *)"GeometricRadius_normalize", _wrap_GeometricRadius_normalize, METH_VARARGS, (char *)"GeometricRadius_normalize(GeometricRadius self)"},
	 { (char *)"GeometricRadius_getName", _wrap_GeometricRadius_getName, METH_VARARGS, (char *)"GeometricRadius_getName() -> string"},
	 { (char *)"new_GeometricRadius", _wrap_new_GeometricRadius, METH_VARARGS, (char *)"\n"
		"GeometricRadius(double value=1.0)\n"
		"GeometricRadius()\n"
		"new_GeometricRadius(LogGeometricRadius other) -> GeometricRadius\n"
		""},
	 { (char *)"GeometricRadius_assign", _wrap_GeometricRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(double value) -> GeometricRadius\n"
		"GeometricRadius_assign(GeometricRadius self, LogGeometricRadius other) -> GeometricRadius\n"
		""},
	 { (char *)"delete_GeometricRadius", _wrap_delete_GeometricRadius, METH_VARARGS, (char *)"delete_GeometricRadius(GeometricRadius self)"},
	 { (char *)"GeometricRadius_swigregister", GeometricRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"ArithmeticRadius_normalize", _wrap_ArithmeticRadius_normalize, METH_VARARGS, (char *)"ArithmeticRadius_normalize(ArithmeticRadius self)"},
	 { (char *)"ArithmeticRadius_getName", _wrap_ArithmeticRadius_getName, METH_VARARGS, (char *)"ArithmeticRadius_getName() -> string"},
	 { (char *)"new_ArithmeticRadius", _wrap_new_ArithmeticRadius, METH_VARARGS, (char *)"\n"
		"ArithmeticRadius(double value=1.0)\n"
		"ArithmeticRadius()\n"
		"new_ArithmeticRadius(LogArithmeticRadius other) -> ArithmeticRadius\n"
		""},
	 { (char *)"ArithmeticRadius_assign", _wrap_ArithmeticRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(double value) -> ArithmeticRadius\n"
		"ArithmeticRadius_assign(ArithmeticRadius self, LogArithmeticRadius other) -> ArithmeticRadius\n"
		""},
	 { (char *)"delete_ArithmeticRadius", _wrap_delete_ArithmeticRadius, METH_VARARGS, (char *)"delete_ArithmeticRadius(ArithmeticRadius self)"},
	 { (char *)"ArithmeticRadius_swigregister", ArithmeticRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"LogGeometricRadius_normalize", _wrap_LogGeometricRadius_normalize, METH_VARARGS, (char *)"LogGeometricRadius_normalize(LogGeometricRadius self)"},
	 { (char *)"LogGeometricRadius_getName", _wrap_LogGeometricRadius_getName, METH_VARARGS, (char *)"LogGeometricRadius_getName() -> string"},
	 { (char *)"new_LogGeometricRadius", _wrap_new_LogGeometricRadius, METH_VARARGS, (char *)"\n"
		"LogGeometricRadius(double value=0.0)\n"
		"LogGeometricRadius()\n"
		"new_LogGeometricRadius(GeometricRadius other) -> LogGeometricRadius\n"
		""},
	 { (char *)"LogGeometricRadius_assign", _wrap_LogGeometricRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(double value) -> LogGeometricRadius\n"
		"LogGeometricRadius_assign(LogGeometricRadius self, GeometricRadius other) -> LogGeometricRadius\n"
		""},
	 { (char *)"delete_LogGeometricRadius", _wrap_delete_LogGeometricRadius, METH_VARARGS, (char *)"delete_LogGeometricRadius(LogGeometricRadius self)"},
	 { (char *)"LogGeometricRadius_swigregister", LogGeometricRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"LogArithmeticRadius_normalize", _wrap_LogArithmeticRadius_normalize, METH_VARARGS, (char *)"LogArithmeticRadius_normalize(LogArithmeticRadius self)"},
	 { (char *)"LogArithmeticRadius_getName", _wrap_LogArithmeticRadius_getName, METH_VARARGS, (char *)"LogArithmeticRadius_getName() -> string"},
	 { (char *)"new_LogArithmeticRadius", _wrap_new_LogArithmeticRadius, METH_VARARGS, (char *)"\n"
		"LogArithmeticRadius(double value=0.0)\n"
		"LogArithmeticRadius()\n"
		"new_LogArithmeticRadius(ArithmeticRadius other) -> LogArithmeticRadius\n"
		""},
	 { (char *)"delete_LogArithmeticRadius", _wrap_delete_LogArithmeticRadius, METH_VARARGS, (char *)"delete_LogArithmeticRadius(LogArithmeticRadius self)"},
	 { (char *)"LogArithmeticRadius_swigregister", LogArithmeticRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"EllipticityBase_getComplex", _wrap_EllipticityBase_getComplex, METH_VARARGS, (char *)"\n"
		"getComplex() -> std::complex<(double)>\n"
		"EllipticityBase_getComplex(EllipticityBase self) -> std::complex<(double)>\n"
		""},
	 { (char *)"EllipticityBase_setComplex", _wrap_EllipticityBase_setComplex, METH_VARARGS, (char *)"EllipticityBase_setComplex(EllipticityBase self, std::complex<(double)> v)"},
	 { (char *)"EllipticityBase_getE1", _wrap_EllipticityBase_getE1, METH_VARARGS, (char *)"EllipticityBase_getE1(EllipticityBase self) -> double"},
	 { (char *)"EllipticityBase_setE1", _wrap_EllipticityBase_setE1, METH_VARARGS, (char *)"EllipticityBase_setE1(EllipticityBase self, double e1)"},
	 { (char *)"EllipticityBase_getE2", _wrap_EllipticityBase_getE2, METH_VARARGS, (char *)"EllipticityBase_getE2(EllipticityBase self) -> double"},
	 { (char *)"EllipticityBase_setE2", _wrap_EllipticityBase_setE2, METH_VARARGS, (char *)"EllipticityBase_setE2(EllipticityBase self, double e2)"},
	 { (char *)"EllipticityBase_getE", _wrap_EllipticityBase_getE, METH_VARARGS, (char *)"EllipticityBase_getE(EllipticityBase self) -> double"},
	 { (char *)"EllipticityBase_setE", _wrap_EllipticityBase_setE, METH_VARARGS, (char *)"EllipticityBase_setE(EllipticityBase self, double e)"},
	 { (char *)"EllipticityBase_getTheta", _wrap_EllipticityBase_getTheta, METH_VARARGS, (char *)"EllipticityBase_getTheta(EllipticityBase self) -> double"},
	 { (char *)"delete_EllipticityBase", _wrap_delete_EllipticityBase, METH_VARARGS, (char *)"delete_EllipticityBase(EllipticityBase self)"},
	 { (char *)"EllipticityBase_swigregister", EllipticityBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Distortion", _wrap_new_Distortion, METH_VARARGS, (char *)"\n"
		"Distortion(std::complex<(double)> complex)\n"
		"Distortion(double e1=0.0, double e2=0.0)\n"
		"Distortion(double e1=0.0)\n"
		"Distortion()\n"
		"new_Distortion(LogShear other) -> Distortion\n"
		""},
	 { (char *)"Distortion_assign", _wrap_Distortion_assign, METH_VARARGS, (char *)"\n"
		"assign(Distortion other) -> Distortion\n"
		"Distortion_assign(Distortion self, LogShear other) -> Distortion\n"
		""},
	 { (char *)"Distortion_dAssign", _wrap_Distortion_dAssign, METH_VARARGS, (char *)"\n"
		"dAssign(Distortion other) -> Jacobian\n"
		"Distortion_dAssign(Distortion self, LogShear other) -> Jacobian\n"
		""},
	 { (char *)"Distortion_getAxisRatio", _wrap_Distortion_getAxisRatio, METH_VARARGS, (char *)"Distortion_getAxisRatio(Distortion self) -> double"},
	 { (char *)"Distortion_normalize", _wrap_Distortion_normalize, METH_VARARGS, (char *)"Distortion_normalize(Distortion self)"},
	 { (char *)"Distortion_getName", _wrap_Distortion_getName, METH_VARARGS, (char *)"Distortion_getName() -> string"},
	 { (char *)"delete_Distortion", _wrap_delete_Distortion, METH_VARARGS, (char *)"delete_Distortion(Distortion self)"},
	 { (char *)"Distortion_swigregister", Distortion_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogShear", _wrap_new_LogShear, METH_VARARGS, (char *)"\n"
		"LogShear(std::complex<(double)> complex)\n"
		"LogShear(double e1=0.0, double e2=0.0)\n"
		"LogShear(double e1=0.0)\n"
		"LogShear()\n"
		"new_LogShear(Distortion other) -> LogShear\n"
		""},
	 { (char *)"LogShear_assign", _wrap_LogShear_assign, METH_VARARGS, (char *)"\n"
		"assign(LogShear other) -> LogShear\n"
		"LogShear_assign(LogShear self, Distortion other) -> LogShear\n"
		""},
	 { (char *)"LogShear_dAssign", _wrap_LogShear_dAssign, METH_VARARGS, (char *)"\n"
		"dAssign(LogShear other) -> Jacobian\n"
		"LogShear_dAssign(LogShear self, Distortion other) -> Jacobian\n"
		""},
	 { (char *)"LogShear_getAxisRatio", _wrap_LogShear_getAxisRatio, METH_VARARGS, (char *)"LogShear_getAxisRatio(LogShear self) -> double"},
	 { (char *)"LogShear_normalize", _wrap_LogShear_normalize, METH_VARARGS, (char *)"LogShear_normalize(LogShear self)"},
	 { (char *)"LogShear_getName", _wrap_LogShear_getName, METH_VARARGS, (char *)"LogShear_getName() -> string"},
	 { (char *)"delete_LogShear", _wrap_delete_LogShear, METH_VARARGS, (char *)"delete_LogShear(LogShear self)"},
	 { (char *)"LogShear_swigregister", LogShear_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableDistortionGeometricRadius_getE1", _wrap_SeparableDistortionGeometricRadius_getE1, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_getE1(SeparableDistortionGeometricRadius self) -> double"},
	 { (char *)"SeparableDistortionGeometricRadius_setE1", _wrap_SeparableDistortionGeometricRadius_setE1, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_setE1(SeparableDistortionGeometricRadius self, double e1)"},
	 { (char *)"SeparableDistortionGeometricRadius_getE2", _wrap_SeparableDistortionGeometricRadius_getE2, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_getE2(SeparableDistortionGeometricRadius self) -> double"},
	 { (char *)"SeparableDistortionGeometricRadius_setE2", _wrap_SeparableDistortionGeometricRadius_setE2, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_setE2(SeparableDistortionGeometricRadius self, double e2)"},
	 { (char *)"SeparableDistortionGeometricRadius_getRadius", _wrap_SeparableDistortionGeometricRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableDistortionGeometricRadius_getRadius(SeparableDistortionGeometricRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableDistortionGeometricRadius_setRadius", _wrap_SeparableDistortionGeometricRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableDistortionGeometricRadius_setRadius(SeparableDistortionGeometricRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableDistortionGeometricRadius_getEllipticity", _wrap_SeparableDistortionGeometricRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableDistortionGeometricRadius_getEllipticity(SeparableDistortionGeometricRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableDistortionGeometricRadius_clone", _wrap_SeparableDistortionGeometricRadius_clone, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_clone(SeparableDistortionGeometricRadius self) -> Ptr"},
	 { (char *)"SeparableDistortionGeometricRadius_getName", _wrap_SeparableDistortionGeometricRadius_getName, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_getName(SeparableDistortionGeometricRadius self) -> string"},
	 { (char *)"SeparableDistortionGeometricRadius_normalize", _wrap_SeparableDistortionGeometricRadius_normalize, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_normalize(SeparableDistortionGeometricRadius self)"},
	 { (char *)"SeparableDistortionGeometricRadius_assign", _wrap_SeparableDistortionGeometricRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableDistortionGeometricRadius other) -> SeparableDistortionGeometricRadius\n"
		"SeparableDistortionGeometricRadius_assign(SeparableDistortionGeometricRadius self, BaseCore other) -> SeparableDistortionGeometricRadius\n"
		""},
	 { (char *)"new_SeparableDistortionGeometricRadius", _wrap_new_SeparableDistortionGeometricRadius, METH_VARARGS, (char *)"\n"
		"SeparableDistortionGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius())\n"
		"SeparableDistortionGeometricRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableDistortionGeometricRadius(double e1=0.0)\n"
		"SeparableDistortionGeometricRadius()\n"
		"SeparableDistortionGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius())\n"
		"SeparableDistortionGeometricRadius(std::complex<(double)> complex)\n"
		"SeparableDistortionGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius())\n"
		"SeparableDistortionGeometricRadius(Ellipticity ellipticity)\n"
		"SeparableDistortionGeometricRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableDistortionGeometricRadius(ParameterVector vector)\n"
		"SeparableDistortionGeometricRadius(SeparableDistortionGeometricRadius other)\n"
		"new_SeparableDistortionGeometricRadius(BaseCore other) -> SeparableDistortionGeometricRadius\n"
		""},
	 { (char *)"SeparableDistortionGeometricRadius__transform", _wrap_SeparableDistortionGeometricRadius__transform, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius__transform(SeparableDistortionGeometricRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableDistortionGeometricRadius__transformInPlace", _wrap_SeparableDistortionGeometricRadius__transformInPlace, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius__transformInPlace(SeparableDistortionGeometricRadius self, LinearTransform t)"},
	 { (char *)"SeparableDistortionGeometricRadius__convolve", _wrap_SeparableDistortionGeometricRadius__convolve, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius__convolve(SeparableDistortionGeometricRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableDistortionGeometricRadius_cast", _wrap_SeparableDistortionGeometricRadius_cast, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast", _wrap_SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast(__dummy_11__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableDistortionGeometricRadius", _wrap_delete_SeparableDistortionGeometricRadius, METH_VARARGS, (char *)"delete_SeparableDistortionGeometricRadius(SeparableDistortionGeometricRadius self)"},
	 { (char *)"SeparableDistortionGeometricRadius_swigregister", SeparableDistortionGeometricRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableDistortionArithmeticRadius_getE1", _wrap_SeparableDistortionArithmeticRadius_getE1, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_getE1(SeparableDistortionArithmeticRadius self) -> double"},
	 { (char *)"SeparableDistortionArithmeticRadius_setE1", _wrap_SeparableDistortionArithmeticRadius_setE1, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_setE1(SeparableDistortionArithmeticRadius self, double e1)"},
	 { (char *)"SeparableDistortionArithmeticRadius_getE2", _wrap_SeparableDistortionArithmeticRadius_getE2, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_getE2(SeparableDistortionArithmeticRadius self) -> double"},
	 { (char *)"SeparableDistortionArithmeticRadius_setE2", _wrap_SeparableDistortionArithmeticRadius_setE2, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_setE2(SeparableDistortionArithmeticRadius self, double e2)"},
	 { (char *)"SeparableDistortionArithmeticRadius_getRadius", _wrap_SeparableDistortionArithmeticRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableDistortionArithmeticRadius_getRadius(SeparableDistortionArithmeticRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableDistortionArithmeticRadius_setRadius", _wrap_SeparableDistortionArithmeticRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableDistortionArithmeticRadius_setRadius(SeparableDistortionArithmeticRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableDistortionArithmeticRadius_getEllipticity", _wrap_SeparableDistortionArithmeticRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableDistortionArithmeticRadius_getEllipticity(SeparableDistortionArithmeticRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableDistortionArithmeticRadius_clone", _wrap_SeparableDistortionArithmeticRadius_clone, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_clone(SeparableDistortionArithmeticRadius self) -> Ptr"},
	 { (char *)"SeparableDistortionArithmeticRadius_getName", _wrap_SeparableDistortionArithmeticRadius_getName, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_getName(SeparableDistortionArithmeticRadius self) -> string"},
	 { (char *)"SeparableDistortionArithmeticRadius_normalize", _wrap_SeparableDistortionArithmeticRadius_normalize, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_normalize(SeparableDistortionArithmeticRadius self)"},
	 { (char *)"SeparableDistortionArithmeticRadius_assign", _wrap_SeparableDistortionArithmeticRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableDistortionArithmeticRadius other) -> SeparableDistortionArithmeticRadius\n"
		"SeparableDistortionArithmeticRadius_assign(SeparableDistortionArithmeticRadius self, BaseCore other) -> SeparableDistortionArithmeticRadius\n"
		""},
	 { (char *)"new_SeparableDistortionArithmeticRadius", _wrap_new_SeparableDistortionArithmeticRadius, METH_VARARGS, (char *)"\n"
		"SeparableDistortionArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius())\n"
		"SeparableDistortionArithmeticRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableDistortionArithmeticRadius(double e1=0.0)\n"
		"SeparableDistortionArithmeticRadius()\n"
		"SeparableDistortionArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius())\n"
		"SeparableDistortionArithmeticRadius(std::complex<(double)> complex)\n"
		"SeparableDistortionArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius())\n"
		"SeparableDistortionArithmeticRadius(Ellipticity ellipticity)\n"
		"SeparableDistortionArithmeticRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableDistortionArithmeticRadius(ParameterVector vector)\n"
		"SeparableDistortionArithmeticRadius(SeparableDistortionArithmeticRadius other)\n"
		"new_SeparableDistortionArithmeticRadius(BaseCore other) -> SeparableDistortionArithmeticRadius\n"
		""},
	 { (char *)"SeparableDistortionArithmeticRadius__transform", _wrap_SeparableDistortionArithmeticRadius__transform, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius__transform(SeparableDistortionArithmeticRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableDistortionArithmeticRadius__transformInPlace", _wrap_SeparableDistortionArithmeticRadius__transformInPlace, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius__transformInPlace(SeparableDistortionArithmeticRadius self, LinearTransform t)"},
	 { (char *)"SeparableDistortionArithmeticRadius__convolve", _wrap_SeparableDistortionArithmeticRadius__convolve, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius__convolve(SeparableDistortionArithmeticRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableDistortionArithmeticRadius_cast", _wrap_SeparableDistortionArithmeticRadius_cast, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast", _wrap_SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast(__dummy_13__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableDistortionArithmeticRadius", _wrap_delete_SeparableDistortionArithmeticRadius, METH_VARARGS, (char *)"delete_SeparableDistortionArithmeticRadius(SeparableDistortionArithmeticRadius self)"},
	 { (char *)"SeparableDistortionArithmeticRadius_swigregister", SeparableDistortionArithmeticRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableDistortionLogGeometricRadius_getE1", _wrap_SeparableDistortionLogGeometricRadius_getE1, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_getE1(SeparableDistortionLogGeometricRadius self) -> double"},
	 { (char *)"SeparableDistortionLogGeometricRadius_setE1", _wrap_SeparableDistortionLogGeometricRadius_setE1, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_setE1(SeparableDistortionLogGeometricRadius self, double e1)"},
	 { (char *)"SeparableDistortionLogGeometricRadius_getE2", _wrap_SeparableDistortionLogGeometricRadius_getE2, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_getE2(SeparableDistortionLogGeometricRadius self) -> double"},
	 { (char *)"SeparableDistortionLogGeometricRadius_setE2", _wrap_SeparableDistortionLogGeometricRadius_setE2, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_setE2(SeparableDistortionLogGeometricRadius self, double e2)"},
	 { (char *)"SeparableDistortionLogGeometricRadius_getRadius", _wrap_SeparableDistortionLogGeometricRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableDistortionLogGeometricRadius_getRadius(SeparableDistortionLogGeometricRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableDistortionLogGeometricRadius_setRadius", _wrap_SeparableDistortionLogGeometricRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableDistortionLogGeometricRadius_setRadius(SeparableDistortionLogGeometricRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableDistortionLogGeometricRadius_getEllipticity", _wrap_SeparableDistortionLogGeometricRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableDistortionLogGeometricRadius_getEllipticity(SeparableDistortionLogGeometricRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableDistortionLogGeometricRadius_clone", _wrap_SeparableDistortionLogGeometricRadius_clone, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_clone(SeparableDistortionLogGeometricRadius self) -> Ptr"},
	 { (char *)"SeparableDistortionLogGeometricRadius_getName", _wrap_SeparableDistortionLogGeometricRadius_getName, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_getName(SeparableDistortionLogGeometricRadius self) -> string"},
	 { (char *)"SeparableDistortionLogGeometricRadius_normalize", _wrap_SeparableDistortionLogGeometricRadius_normalize, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_normalize(SeparableDistortionLogGeometricRadius self)"},
	 { (char *)"SeparableDistortionLogGeometricRadius_assign", _wrap_SeparableDistortionLogGeometricRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableDistortionLogGeometricRadius other) -> SeparableDistortionLogGeometricRadius\n"
		"SeparableDistortionLogGeometricRadius_assign(SeparableDistortionLogGeometricRadius self, BaseCore other) -> SeparableDistortionLogGeometricRadius\n"
		""},
	 { (char *)"new_SeparableDistortionLogGeometricRadius", _wrap_new_SeparableDistortionLogGeometricRadius, METH_VARARGS, (char *)"\n"
		"SeparableDistortionLogGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionLogGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius())\n"
		"SeparableDistortionLogGeometricRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableDistortionLogGeometricRadius(double e1=0.0)\n"
		"SeparableDistortionLogGeometricRadius()\n"
		"SeparableDistortionLogGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionLogGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius())\n"
		"SeparableDistortionLogGeometricRadius(std::complex<(double)> complex)\n"
		"SeparableDistortionLogGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionLogGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius())\n"
		"SeparableDistortionLogGeometricRadius(Ellipticity ellipticity)\n"
		"SeparableDistortionLogGeometricRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableDistortionLogGeometricRadius(ParameterVector vector)\n"
		"SeparableDistortionLogGeometricRadius(SeparableDistortionLogGeometricRadius other)\n"
		"new_SeparableDistortionLogGeometricRadius(BaseCore other) -> SeparableDistortionLogGeometricRadius\n"
		""},
	 { (char *)"SeparableDistortionLogGeometricRadius__transform", _wrap_SeparableDistortionLogGeometricRadius__transform, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius__transform(SeparableDistortionLogGeometricRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableDistortionLogGeometricRadius__transformInPlace", _wrap_SeparableDistortionLogGeometricRadius__transformInPlace, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius__transformInPlace(SeparableDistortionLogGeometricRadius self, LinearTransform t)"},
	 { (char *)"SeparableDistortionLogGeometricRadius__convolve", _wrap_SeparableDistortionLogGeometricRadius__convolve, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius__convolve(SeparableDistortionLogGeometricRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableDistortionLogGeometricRadius_cast", _wrap_SeparableDistortionLogGeometricRadius_cast, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast", _wrap_SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast(__dummy_15__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableDistortionLogGeometricRadius", _wrap_delete_SeparableDistortionLogGeometricRadius, METH_VARARGS, (char *)"delete_SeparableDistortionLogGeometricRadius(SeparableDistortionLogGeometricRadius self)"},
	 { (char *)"SeparableDistortionLogGeometricRadius_swigregister", SeparableDistortionLogGeometricRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableDistortionLogArithmeticRadius_getE1", _wrap_SeparableDistortionLogArithmeticRadius_getE1, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_getE1(SeparableDistortionLogArithmeticRadius self) -> double"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_setE1", _wrap_SeparableDistortionLogArithmeticRadius_setE1, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_setE1(SeparableDistortionLogArithmeticRadius self, double e1)"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_getE2", _wrap_SeparableDistortionLogArithmeticRadius_getE2, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_getE2(SeparableDistortionLogArithmeticRadius self) -> double"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_setE2", _wrap_SeparableDistortionLogArithmeticRadius_setE2, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_setE2(SeparableDistortionLogArithmeticRadius self, double e2)"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_getRadius", _wrap_SeparableDistortionLogArithmeticRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableDistortionLogArithmeticRadius_getRadius(SeparableDistortionLogArithmeticRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableDistortionLogArithmeticRadius_setRadius", _wrap_SeparableDistortionLogArithmeticRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableDistortionLogArithmeticRadius_setRadius(SeparableDistortionLogArithmeticRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableDistortionLogArithmeticRadius_getEllipticity", _wrap_SeparableDistortionLogArithmeticRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableDistortionLogArithmeticRadius_getEllipticity(SeparableDistortionLogArithmeticRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableDistortionLogArithmeticRadius_clone", _wrap_SeparableDistortionLogArithmeticRadius_clone, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_clone(SeparableDistortionLogArithmeticRadius self) -> Ptr"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_getName", _wrap_SeparableDistortionLogArithmeticRadius_getName, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_getName(SeparableDistortionLogArithmeticRadius self) -> string"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_normalize", _wrap_SeparableDistortionLogArithmeticRadius_normalize, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_normalize(SeparableDistortionLogArithmeticRadius self)"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_assign", _wrap_SeparableDistortionLogArithmeticRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableDistortionLogArithmeticRadius other) -> SeparableDistortionLogArithmeticRadius\n"
		"SeparableDistortionLogArithmeticRadius_assign(SeparableDistortionLogArithmeticRadius self, BaseCore other) -> SeparableDistortionLogArithmeticRadius\n"
		""},
	 { (char *)"new_SeparableDistortionLogArithmeticRadius", _wrap_new_SeparableDistortionLogArithmeticRadius, METH_VARARGS, (char *)"\n"
		"SeparableDistortionLogArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionLogArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius())\n"
		"SeparableDistortionLogArithmeticRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableDistortionLogArithmeticRadius(double e1=0.0)\n"
		"SeparableDistortionLogArithmeticRadius()\n"
		"SeparableDistortionLogArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionLogArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius())\n"
		"SeparableDistortionLogArithmeticRadius(std::complex<(double)> complex)\n"
		"SeparableDistortionLogArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableDistortionLogArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius())\n"
		"SeparableDistortionLogArithmeticRadius(Ellipticity ellipticity)\n"
		"SeparableDistortionLogArithmeticRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableDistortionLogArithmeticRadius(ParameterVector vector)\n"
		"SeparableDistortionLogArithmeticRadius(SeparableDistortionLogArithmeticRadius other)\n"
		"new_SeparableDistortionLogArithmeticRadius(BaseCore other) -> SeparableDistortionLogArithmeticRadius\n"
		""},
	 { (char *)"SeparableDistortionLogArithmeticRadius__transform", _wrap_SeparableDistortionLogArithmeticRadius__transform, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius__transform(SeparableDistortionLogArithmeticRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableDistortionLogArithmeticRadius__transformInPlace", _wrap_SeparableDistortionLogArithmeticRadius__transformInPlace, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius__transformInPlace(SeparableDistortionLogArithmeticRadius self, LinearTransform t)"},
	 { (char *)"SeparableDistortionLogArithmeticRadius__convolve", _wrap_SeparableDistortionLogArithmeticRadius__convolve, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius__convolve(SeparableDistortionLogArithmeticRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_cast", _wrap_SeparableDistortionLogArithmeticRadius_cast, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast", _wrap_SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast(__dummy_17__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableDistortionLogArithmeticRadius", _wrap_delete_SeparableDistortionLogArithmeticRadius, METH_VARARGS, (char *)"delete_SeparableDistortionLogArithmeticRadius(SeparableDistortionLogArithmeticRadius self)"},
	 { (char *)"SeparableDistortionLogArithmeticRadius_swigregister", SeparableDistortionLogArithmeticRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableLogShearGeometricRadius_getE1", _wrap_SeparableLogShearGeometricRadius_getE1, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_getE1(SeparableLogShearGeometricRadius self) -> double"},
	 { (char *)"SeparableLogShearGeometricRadius_setE1", _wrap_SeparableLogShearGeometricRadius_setE1, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_setE1(SeparableLogShearGeometricRadius self, double e1)"},
	 { (char *)"SeparableLogShearGeometricRadius_getE2", _wrap_SeparableLogShearGeometricRadius_getE2, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_getE2(SeparableLogShearGeometricRadius self) -> double"},
	 { (char *)"SeparableLogShearGeometricRadius_setE2", _wrap_SeparableLogShearGeometricRadius_setE2, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_setE2(SeparableLogShearGeometricRadius self, double e2)"},
	 { (char *)"SeparableLogShearGeometricRadius_getRadius", _wrap_SeparableLogShearGeometricRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableLogShearGeometricRadius_getRadius(SeparableLogShearGeometricRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableLogShearGeometricRadius_setRadius", _wrap_SeparableLogShearGeometricRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableLogShearGeometricRadius_setRadius(SeparableLogShearGeometricRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableLogShearGeometricRadius_getEllipticity", _wrap_SeparableLogShearGeometricRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableLogShearGeometricRadius_getEllipticity(SeparableLogShearGeometricRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableLogShearGeometricRadius_clone", _wrap_SeparableLogShearGeometricRadius_clone, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_clone(SeparableLogShearGeometricRadius self) -> Ptr"},
	 { (char *)"SeparableLogShearGeometricRadius_getName", _wrap_SeparableLogShearGeometricRadius_getName, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_getName(SeparableLogShearGeometricRadius self) -> string"},
	 { (char *)"SeparableLogShearGeometricRadius_normalize", _wrap_SeparableLogShearGeometricRadius_normalize, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_normalize(SeparableLogShearGeometricRadius self)"},
	 { (char *)"SeparableLogShearGeometricRadius_assign", _wrap_SeparableLogShearGeometricRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableLogShearGeometricRadius other) -> SeparableLogShearGeometricRadius\n"
		"SeparableLogShearGeometricRadius_assign(SeparableLogShearGeometricRadius self, BaseCore other) -> SeparableLogShearGeometricRadius\n"
		""},
	 { (char *)"new_SeparableLogShearGeometricRadius", _wrap_new_SeparableLogShearGeometricRadius, METH_VARARGS, (char *)"\n"
		"SeparableLogShearGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius())\n"
		"SeparableLogShearGeometricRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableLogShearGeometricRadius(double e1=0.0)\n"
		"SeparableLogShearGeometricRadius()\n"
		"SeparableLogShearGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius())\n"
		"SeparableLogShearGeometricRadius(std::complex<(double)> complex)\n"
		"SeparableLogShearGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius())\n"
		"SeparableLogShearGeometricRadius(Ellipticity ellipticity)\n"
		"SeparableLogShearGeometricRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableLogShearGeometricRadius(ParameterVector vector)\n"
		"SeparableLogShearGeometricRadius(SeparableLogShearGeometricRadius other)\n"
		"new_SeparableLogShearGeometricRadius(BaseCore other) -> SeparableLogShearGeometricRadius\n"
		""},
	 { (char *)"SeparableLogShearGeometricRadius__transform", _wrap_SeparableLogShearGeometricRadius__transform, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius__transform(SeparableLogShearGeometricRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableLogShearGeometricRadius__transformInPlace", _wrap_SeparableLogShearGeometricRadius__transformInPlace, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius__transformInPlace(SeparableLogShearGeometricRadius self, LinearTransform t)"},
	 { (char *)"SeparableLogShearGeometricRadius__convolve", _wrap_SeparableLogShearGeometricRadius__convolve, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius__convolve(SeparableLogShearGeometricRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableLogShearGeometricRadius_cast", _wrap_SeparableLogShearGeometricRadius_cast, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast", _wrap_SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast(__dummy_19__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableLogShearGeometricRadius", _wrap_delete_SeparableLogShearGeometricRadius, METH_VARARGS, (char *)"delete_SeparableLogShearGeometricRadius(SeparableLogShearGeometricRadius self)"},
	 { (char *)"SeparableLogShearGeometricRadius_swigregister", SeparableLogShearGeometricRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableLogShearArithmeticRadius_getE1", _wrap_SeparableLogShearArithmeticRadius_getE1, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_getE1(SeparableLogShearArithmeticRadius self) -> double"},
	 { (char *)"SeparableLogShearArithmeticRadius_setE1", _wrap_SeparableLogShearArithmeticRadius_setE1, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_setE1(SeparableLogShearArithmeticRadius self, double e1)"},
	 { (char *)"SeparableLogShearArithmeticRadius_getE2", _wrap_SeparableLogShearArithmeticRadius_getE2, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_getE2(SeparableLogShearArithmeticRadius self) -> double"},
	 { (char *)"SeparableLogShearArithmeticRadius_setE2", _wrap_SeparableLogShearArithmeticRadius_setE2, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_setE2(SeparableLogShearArithmeticRadius self, double e2)"},
	 { (char *)"SeparableLogShearArithmeticRadius_getRadius", _wrap_SeparableLogShearArithmeticRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableLogShearArithmeticRadius_getRadius(SeparableLogShearArithmeticRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableLogShearArithmeticRadius_setRadius", _wrap_SeparableLogShearArithmeticRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableLogShearArithmeticRadius_setRadius(SeparableLogShearArithmeticRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableLogShearArithmeticRadius_getEllipticity", _wrap_SeparableLogShearArithmeticRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableLogShearArithmeticRadius_getEllipticity(SeparableLogShearArithmeticRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableLogShearArithmeticRadius_clone", _wrap_SeparableLogShearArithmeticRadius_clone, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_clone(SeparableLogShearArithmeticRadius self) -> Ptr"},
	 { (char *)"SeparableLogShearArithmeticRadius_getName", _wrap_SeparableLogShearArithmeticRadius_getName, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_getName(SeparableLogShearArithmeticRadius self) -> string"},
	 { (char *)"SeparableLogShearArithmeticRadius_normalize", _wrap_SeparableLogShearArithmeticRadius_normalize, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_normalize(SeparableLogShearArithmeticRadius self)"},
	 { (char *)"SeparableLogShearArithmeticRadius_assign", _wrap_SeparableLogShearArithmeticRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableLogShearArithmeticRadius other) -> SeparableLogShearArithmeticRadius\n"
		"SeparableLogShearArithmeticRadius_assign(SeparableLogShearArithmeticRadius self, BaseCore other) -> SeparableLogShearArithmeticRadius\n"
		""},
	 { (char *)"new_SeparableLogShearArithmeticRadius", _wrap_new_SeparableLogShearArithmeticRadius, METH_VARARGS, (char *)"\n"
		"SeparableLogShearArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius())\n"
		"SeparableLogShearArithmeticRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableLogShearArithmeticRadius(double e1=0.0)\n"
		"SeparableLogShearArithmeticRadius()\n"
		"SeparableLogShearArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius())\n"
		"SeparableLogShearArithmeticRadius(std::complex<(double)> complex)\n"
		"SeparableLogShearArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius())\n"
		"SeparableLogShearArithmeticRadius(Ellipticity ellipticity)\n"
		"SeparableLogShearArithmeticRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableLogShearArithmeticRadius(ParameterVector vector)\n"
		"SeparableLogShearArithmeticRadius(SeparableLogShearArithmeticRadius other)\n"
		"new_SeparableLogShearArithmeticRadius(BaseCore other) -> SeparableLogShearArithmeticRadius\n"
		""},
	 { (char *)"SeparableLogShearArithmeticRadius__transform", _wrap_SeparableLogShearArithmeticRadius__transform, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius__transform(SeparableLogShearArithmeticRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableLogShearArithmeticRadius__transformInPlace", _wrap_SeparableLogShearArithmeticRadius__transformInPlace, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius__transformInPlace(SeparableLogShearArithmeticRadius self, LinearTransform t)"},
	 { (char *)"SeparableLogShearArithmeticRadius__convolve", _wrap_SeparableLogShearArithmeticRadius__convolve, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius__convolve(SeparableLogShearArithmeticRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableLogShearArithmeticRadius_cast", _wrap_SeparableLogShearArithmeticRadius_cast, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast", _wrap_SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast(__dummy_21__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableLogShearArithmeticRadius", _wrap_delete_SeparableLogShearArithmeticRadius, METH_VARARGS, (char *)"delete_SeparableLogShearArithmeticRadius(SeparableLogShearArithmeticRadius self)"},
	 { (char *)"SeparableLogShearArithmeticRadius_swigregister", SeparableLogShearArithmeticRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableLogShearLogGeometricRadius_getE1", _wrap_SeparableLogShearLogGeometricRadius_getE1, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_getE1(SeparableLogShearLogGeometricRadius self) -> double"},
	 { (char *)"SeparableLogShearLogGeometricRadius_setE1", _wrap_SeparableLogShearLogGeometricRadius_setE1, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_setE1(SeparableLogShearLogGeometricRadius self, double e1)"},
	 { (char *)"SeparableLogShearLogGeometricRadius_getE2", _wrap_SeparableLogShearLogGeometricRadius_getE2, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_getE2(SeparableLogShearLogGeometricRadius self) -> double"},
	 { (char *)"SeparableLogShearLogGeometricRadius_setE2", _wrap_SeparableLogShearLogGeometricRadius_setE2, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_setE2(SeparableLogShearLogGeometricRadius self, double e2)"},
	 { (char *)"SeparableLogShearLogGeometricRadius_getRadius", _wrap_SeparableLogShearLogGeometricRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableLogShearLogGeometricRadius_getRadius(SeparableLogShearLogGeometricRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableLogShearLogGeometricRadius_setRadius", _wrap_SeparableLogShearLogGeometricRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableLogShearLogGeometricRadius_setRadius(SeparableLogShearLogGeometricRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableLogShearLogGeometricRadius_getEllipticity", _wrap_SeparableLogShearLogGeometricRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableLogShearLogGeometricRadius_getEllipticity(SeparableLogShearLogGeometricRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableLogShearLogGeometricRadius_clone", _wrap_SeparableLogShearLogGeometricRadius_clone, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_clone(SeparableLogShearLogGeometricRadius self) -> Ptr"},
	 { (char *)"SeparableLogShearLogGeometricRadius_getName", _wrap_SeparableLogShearLogGeometricRadius_getName, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_getName(SeparableLogShearLogGeometricRadius self) -> string"},
	 { (char *)"SeparableLogShearLogGeometricRadius_normalize", _wrap_SeparableLogShearLogGeometricRadius_normalize, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_normalize(SeparableLogShearLogGeometricRadius self)"},
	 { (char *)"SeparableLogShearLogGeometricRadius_assign", _wrap_SeparableLogShearLogGeometricRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableLogShearLogGeometricRadius other) -> SeparableLogShearLogGeometricRadius\n"
		"SeparableLogShearLogGeometricRadius_assign(SeparableLogShearLogGeometricRadius self, BaseCore other) -> SeparableLogShearLogGeometricRadius\n"
		""},
	 { (char *)"new_SeparableLogShearLogGeometricRadius", _wrap_new_SeparableLogShearLogGeometricRadius, METH_VARARGS, (char *)"\n"
		"SeparableLogShearLogGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearLogGeometricRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius())\n"
		"SeparableLogShearLogGeometricRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableLogShearLogGeometricRadius(double e1=0.0)\n"
		"SeparableLogShearLogGeometricRadius()\n"
		"SeparableLogShearLogGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearLogGeometricRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius())\n"
		"SeparableLogShearLogGeometricRadius(std::complex<(double)> complex)\n"
		"SeparableLogShearLogGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearLogGeometricRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius())\n"
		"SeparableLogShearLogGeometricRadius(Ellipticity ellipticity)\n"
		"SeparableLogShearLogGeometricRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableLogShearLogGeometricRadius(ParameterVector vector)\n"
		"SeparableLogShearLogGeometricRadius(SeparableLogShearLogGeometricRadius other)\n"
		"new_SeparableLogShearLogGeometricRadius(BaseCore other) -> SeparableLogShearLogGeometricRadius\n"
		""},
	 { (char *)"SeparableLogShearLogGeometricRadius__transform", _wrap_SeparableLogShearLogGeometricRadius__transform, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius__transform(SeparableLogShearLogGeometricRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableLogShearLogGeometricRadius__transformInPlace", _wrap_SeparableLogShearLogGeometricRadius__transformInPlace, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius__transformInPlace(SeparableLogShearLogGeometricRadius self, LinearTransform t)"},
	 { (char *)"SeparableLogShearLogGeometricRadius__convolve", _wrap_SeparableLogShearLogGeometricRadius__convolve, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius__convolve(SeparableLogShearLogGeometricRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableLogShearLogGeometricRadius_cast", _wrap_SeparableLogShearLogGeometricRadius_cast, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast", _wrap_SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast(__dummy_23__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableLogShearLogGeometricRadius", _wrap_delete_SeparableLogShearLogGeometricRadius, METH_VARARGS, (char *)"delete_SeparableLogShearLogGeometricRadius(SeparableLogShearLogGeometricRadius self)"},
	 { (char *)"SeparableLogShearLogGeometricRadius_swigregister", SeparableLogShearLogGeometricRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"SeparableLogShearLogArithmeticRadius_getE1", _wrap_SeparableLogShearLogArithmeticRadius_getE1, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_getE1(SeparableLogShearLogArithmeticRadius self) -> double"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_setE1", _wrap_SeparableLogShearLogArithmeticRadius_setE1, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_setE1(SeparableLogShearLogArithmeticRadius self, double e1)"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_getE2", _wrap_SeparableLogShearLogArithmeticRadius_getE2, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_getE2(SeparableLogShearLogArithmeticRadius self) -> double"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_setE2", _wrap_SeparableLogShearLogArithmeticRadius_setE2, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_setE2(SeparableLogShearLogArithmeticRadius self, double e2)"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_getRadius", _wrap_SeparableLogShearLogArithmeticRadius_getRadius, METH_VARARGS, (char *)"\n"
		"getRadius() -> Radius\n"
		"SeparableLogShearLogArithmeticRadius_getRadius(SeparableLogShearLogArithmeticRadius self) -> Radius\n"
		""},
	 { (char *)"SeparableLogShearLogArithmeticRadius_setRadius", _wrap_SeparableLogShearLogArithmeticRadius_setRadius, METH_VARARGS, (char *)"\n"
		"setRadius(double radius)\n"
		"SeparableLogShearLogArithmeticRadius_setRadius(SeparableLogShearLogArithmeticRadius self, Radius radius)\n"
		""},
	 { (char *)"SeparableLogShearLogArithmeticRadius_getEllipticity", _wrap_SeparableLogShearLogArithmeticRadius_getEllipticity, METH_VARARGS, (char *)"\n"
		"getEllipticity() -> Ellipticity\n"
		"SeparableLogShearLogArithmeticRadius_getEllipticity(SeparableLogShearLogArithmeticRadius self) -> Ellipticity\n"
		""},
	 { (char *)"SeparableLogShearLogArithmeticRadius_clone", _wrap_SeparableLogShearLogArithmeticRadius_clone, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_clone(SeparableLogShearLogArithmeticRadius self) -> Ptr"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_getName", _wrap_SeparableLogShearLogArithmeticRadius_getName, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_getName(SeparableLogShearLogArithmeticRadius self) -> string"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_normalize", _wrap_SeparableLogShearLogArithmeticRadius_normalize, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_normalize(SeparableLogShearLogArithmeticRadius self)"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_assign", _wrap_SeparableLogShearLogArithmeticRadius_assign, METH_VARARGS, (char *)"\n"
		"assign(SeparableLogShearLogArithmeticRadius other) -> SeparableLogShearLogArithmeticRadius\n"
		"SeparableLogShearLogArithmeticRadius_assign(SeparableLogShearLogArithmeticRadius self, BaseCore other) -> SeparableLogShearLogArithmeticRadius\n"
		""},
	 { (char *)"new_SeparableLogShearLogArithmeticRadius", _wrap_new_SeparableLogShearLogArithmeticRadius, METH_VARARGS, (char *)"\n"
		"SeparableLogShearLogArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearLogArithmeticRadius(double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius())\n"
		"SeparableLogShearLogArithmeticRadius(double e1=0.0, double e2=0.0)\n"
		"SeparableLogShearLogArithmeticRadius(double e1=0.0)\n"
		"SeparableLogShearLogArithmeticRadius()\n"
		"SeparableLogShearLogArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearLogArithmeticRadius(std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius())\n"
		"SeparableLogShearLogArithmeticRadius(std::complex<(double)> complex)\n"
		"SeparableLogShearLogArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), \n"
		"    bool normalize=True)\n"
		"SeparableLogShearLogArithmeticRadius(Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius())\n"
		"SeparableLogShearLogArithmeticRadius(Ellipticity ellipticity)\n"
		"SeparableLogShearLogArithmeticRadius(ParameterVector vector, bool normalize=False)\n"
		"SeparableLogShearLogArithmeticRadius(ParameterVector vector)\n"
		"SeparableLogShearLogArithmeticRadius(SeparableLogShearLogArithmeticRadius other)\n"
		"new_SeparableLogShearLogArithmeticRadius(BaseCore other) -> SeparableLogShearLogArithmeticRadius\n"
		""},
	 { (char *)"SeparableLogShearLogArithmeticRadius__transform", _wrap_SeparableLogShearLogArithmeticRadius__transform, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius__transform(SeparableLogShearLogArithmeticRadius self, LinearTransform t) -> Ptr"},
	 { (char *)"SeparableLogShearLogArithmeticRadius__transformInPlace", _wrap_SeparableLogShearLogArithmeticRadius__transformInPlace, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius__transformInPlace(SeparableLogShearLogArithmeticRadius self, LinearTransform t)"},
	 { (char *)"SeparableLogShearLogArithmeticRadius__convolve", _wrap_SeparableLogShearLogArithmeticRadius__convolve, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius__convolve(SeparableLogShearLogArithmeticRadius self, BaseCore other) -> Ptr"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_cast", _wrap_SeparableLogShearLogArithmeticRadius_cast, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_cast(Ptr p) -> Ptr"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast", _wrap_SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast, METH_VARARGS, (char *)"SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast(__dummy_25__ swigSharedPtrUpcast) -> __dummy_5__"},
	 { (char *)"delete_SeparableLogShearLogArithmeticRadius", _wrap_delete_SeparableLogShearLogArithmeticRadius, METH_VARARGS, (char *)"delete_SeparableLogShearLogArithmeticRadius(SeparableLogShearLogArithmeticRadius self)"},
	 { (char *)"SeparableLogShearLogArithmeticRadius_swigregister", SeparableLogShearLogArithmeticRadius_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ellipse_getCenter", _wrap_Ellipse_getCenter, METH_VARARGS, (char *)"\n"
		"getCenter() -> PointD\n"
		"Ellipse_getCenter(Ellipse self) -> PointD\n"
		""},
	 { (char *)"Ellipse_setCenter", _wrap_Ellipse_setCenter, METH_VARARGS, (char *)"Ellipse_setCenter(Ellipse self, PointD center)"},
	 { (char *)"Ellipse__getCorePtr", _wrap_Ellipse__getCorePtr, METH_VARARGS, (char *)"\n"
		"_getCorePtr() -> ConstPtr\n"
		"Ellipse__getCorePtr(Ellipse self) -> Ptr\n"
		""},
	 { (char *)"Ellipse_setCore", _wrap_Ellipse_setCore, METH_VARARGS, (char *)"Ellipse_setCore(Ellipse self, BaseCore core)"},
	 { (char *)"Ellipse_normalize", _wrap_Ellipse_normalize, METH_VARARGS, (char *)"Ellipse_normalize(Ellipse self)"},
	 { (char *)"Ellipse_grow", _wrap_Ellipse_grow, METH_VARARGS, (char *)"Ellipse_grow(Ellipse self, double buffer)"},
	 { (char *)"Ellipse_scale", _wrap_Ellipse_scale, METH_VARARGS, (char *)"Ellipse_scale(Ellipse self, double factor)"},
	 { (char *)"Ellipse_shift", _wrap_Ellipse_shift, METH_VARARGS, (char *)"Ellipse_shift(Ellipse self, ExtentD offset)"},
	 { (char *)"Ellipse_getParameterVector", _wrap_Ellipse_getParameterVector, METH_VARARGS, (char *)"Ellipse_getParameterVector(Ellipse self) -> ParameterVector"},
	 { (char *)"Ellipse_setParameterVector", _wrap_Ellipse_setParameterVector, METH_VARARGS, (char *)"Ellipse_setParameterVector(Ellipse self, ParameterVector vector)"},
	 { (char *)"Ellipse_computeEnvelope", _wrap_Ellipse_computeEnvelope, METH_VARARGS, (char *)"Ellipse_computeEnvelope(Ellipse self) -> Envelope"},
	 { (char *)"Ellipse_assign", _wrap_Ellipse_assign, METH_VARARGS, (char *)"Ellipse_assign(Ellipse self, Ellipse other) -> Ellipse"},
	 { (char *)"Ellipse___eq__", _wrap_Ellipse___eq__, METH_VARARGS, (char *)"Ellipse___eq__(Ellipse self, Ellipse other) -> bool"},
	 { (char *)"Ellipse___ne__", _wrap_Ellipse___ne__, METH_VARARGS, (char *)"Ellipse___ne__(Ellipse self, Ellipse other) -> bool"},
	 { (char *)"delete_Ellipse", _wrap_delete_Ellipse, METH_VARARGS, (char *)"delete_Ellipse(Ellipse self)"},
	 { (char *)"new_Ellipse", _wrap_new_Ellipse, METH_VARARGS, (char *)"\n"
		"Ellipse(BaseCore core, PointD center=lsst::afw::geom::PointD())\n"
		"Ellipse(BaseCore core)\n"
		"Ellipse(Ptr core, PointD center=lsst::afw::geom::PointD())\n"
		"Ellipse(Ptr core)\n"
		"new_Ellipse(Ellipse other) -> Ellipse\n"
		""},
	 { (char *)"Ellipse__transform", _wrap_Ellipse__transform, METH_VARARGS, (char *)"Ellipse__transform(Ellipse self, AffineTransform t) -> Ellipse"},
	 { (char *)"Ellipse__transformInPlace", _wrap_Ellipse__transformInPlace, METH_VARARGS, (char *)"Ellipse__transformInPlace(Ellipse self, AffineTransform t)"},
	 { (char *)"Ellipse__getGridTransform", _wrap_Ellipse__getGridTransform, METH_VARARGS, (char *)"Ellipse__getGridTransform(Ellipse self) -> AffineTransform"},
	 { (char *)"Ellipse_swigregister", Ellipse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Parametric", _wrap_new_Parametric, METH_VARARGS, (char *)"new_Parametric(Ellipse ellipse) -> Parametric"},
	 { (char *)"Parametric___call__", _wrap_Parametric___call__, METH_VARARGS, (char *)"Parametric___call__(Parametric self, double t) -> PointD"},
	 { (char *)"delete_Parametric", _wrap_delete_Parametric, METH_VARARGS, (char *)"delete_Parametric(Parametric self)"},
	 { (char *)"Parametric_swigregister", Parametric_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_lsst__afw__geom__ellipses__DistortionTo_p_lsst__afw__geom__ellipses__detail__EllipticityBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::detail::EllipticityBase *)  ((lsst::afw::geom::ellipses::Distortion *) x));
}
static void *_p_lsst__afw__geom__ellipses__LogShearTo_p_lsst__afw__geom__ellipses__detail__EllipticityBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::detail::EllipticityBase *)  ((lsst::afw::geom::ellipses::LogShear *) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_lsst__afw__geom__ellipses__QuadrupoleTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Quadrupole *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *) x));
}
static void *_p_lsst__afw__geom__ellipses__AxesTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Axes *) x));
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *)x);
}
static void *_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t(void *x, int *newmemory) {
  *newmemory = SWIG_CAST_NEW_MEMORY;
  return (void *) new boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore >(*(boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *)x);
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static swig_type_info _swigt__p_ConstPtr = {"_p_ConstPtr", "ConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EigenVector = {"_p_EigenVector", "EigenVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t = {"_p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t", "Eigen::Matrix< double,2,2,Eigen::DontAlign > *|lsst::afw::geom::ellipses::Quadrupole::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Element = {"_p_Element", "Element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ellipticity = {"_p_Ellipticity", "Ellipticity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Envelope = {"_p_Envelope", "Envelope *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Jacobian = {"_p_Jacobian", "Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterVector = {"_p_ParameterVector", "ParameterVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProductDerivativeMatrix = {"_p_ProductDerivativeMatrix", "ProductDerivativeMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptr = {"_p_Ptr", "Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Radius = {"_p_Radius", "Radius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransformDerivativeMatrix = {"_p_TransformDerivativeMatrix", "TransformDerivativeMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t", "boost::shared_ptr< lsst::afw::geom::AffineTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t", "boost::shared_ptr< lsst::afw::geom::LinearTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t", "boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Ellipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__Box2D = {"_p_lsst__afw__geom__Box2D", "lsst::afw::geom::ellipses::Ellipse::Envelope *|lsst::afw::geom::Box2D *|lsst::afw::geom::BoxD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__Box2I = {"_p_lsst__afw__geom__Box2I", "lsst::afw::geom::Box2I *|lsst::afw::geom::BoxI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__CoordinateExprT_2_t = {"_p_lsst__afw__geom__CoordinateExprT_2_t", "lsst::afw::geom::CoordinateExpr< 2 > *|lsst::afw::geom::CoordinateExpr2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__CoordinateExprT_3_t = {"_p_lsst__afw__geom__CoordinateExprT_3_t", "lsst::afw::geom::CoordinateExpr3 *|lsst::afw::geom::CoordinateExpr< 3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_double_2_t = {"_p_lsst__afw__geom__ExtentT_double_2_t", "lsst::afw::geom::Extent2D *|lsst::afw::geom::Extent< double,2 > *|lsst::afw::geom::ExtentD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_double_3_t = {"_p_lsst__afw__geom__ExtentT_double_3_t", "lsst::afw::geom::Extent< double,3 > *|lsst::afw::geom::Extent3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_int_2_t = {"_p_lsst__afw__geom__ExtentT_int_2_t", "lsst::afw::geom::ExtentI *|lsst::afw::geom::Extent2I *|lsst::afw::geom::Extent< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_int_3_t = {"_p_lsst__afw__geom__ExtentT_int_3_t", "lsst::afw::geom::Extent< int,3 > *|lsst::afw::geom::Extent3I *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_double_2_t = {"_p_lsst__afw__geom__PointT_double_2_t", "lsst::afw::geom::Point2D *|lsst::afw::geom::Point< double,2 > *|lsst::afw::geom::PointD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_double_3_t = {"_p_lsst__afw__geom__PointT_double_3_t", "lsst::afw::geom::Point< double,3 > *|lsst::afw::geom::Point3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_int_2_t = {"_p_lsst__afw__geom__PointT_int_2_t", "lsst::afw::geom::PointI *|lsst::afw::geom::Point2I *|lsst::afw::geom::Point< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_int_3_t = {"_p_lsst__afw__geom__PointT_int_3_t", "lsst::afw::geom::Point< int,3 > *|lsst::afw::geom::Point3I *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__ArithmeticRadius = {"_p_lsst__afw__geom__ellipses__ArithmeticRadius", "lsst::afw::geom::ellipses::ArithmeticRadius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Axes = {"_p_lsst__afw__geom__ellipses__Axes", "lsst::afw::geom::ellipses::Axes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__BaseCore = {"_p_lsst__afw__geom__ellipses__BaseCore", "lsst::afw::geom::ellipses::BaseCore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Distortion = {"_p_lsst__afw__geom__ellipses__Distortion", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *|lsst::afw::geom::ellipses::Distortion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Ellipse = {"_p_lsst__afw__geom__ellipses__Ellipse", "lsst::afw::geom::ellipses::Ellipse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__GeometricRadius = {"_p_lsst__afw__geom__ellipses__GeometricRadius", "lsst::afw::geom::ellipses::GeometricRadius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__LogArithmeticRadius = {"_p_lsst__afw__geom__ellipses__LogArithmeticRadius", "lsst::afw::geom::ellipses::LogArithmeticRadius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__LogGeometricRadius = {"_p_lsst__afw__geom__ellipses__LogGeometricRadius", "lsst::afw::geom::ellipses::LogGeometricRadius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__LogShear = {"_p_lsst__afw__geom__ellipses__LogShear", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Ellipticity *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Ellipticity *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Ellipticity *|lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Ellipticity *|lsst::afw::geom::ellipses::LogShear *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Parametric = {"_p_lsst__afw__geom__ellipses__Parametric", "lsst::afw::geom::ellipses::Parametric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Quadrupole = {"_p_lsst__afw__geom__ellipses__Quadrupole", "lsst::afw::geom::ellipses::Quadrupole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t = {"_p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t", "lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__detail__EllipticityBase = {"_p_lsst__afw__geom__ellipses__detail__EllipticityBase", "lsst::afw::geom::ellipses::detail::EllipticityBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type", "std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type", "std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type", "std::basic_ostream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type", "std::basic_ostream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__PySwigIterator = {"_p_swig__PySwigIterator", "swig::PySwigIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ConstPtr,
  &_swigt__p_EigenVector,
  &_swigt__p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t,
  &_swigt__p_Element,
  &_swigt__p_Ellipticity,
  &_swigt__p_Envelope,
  &_swigt__p_Jacobian,
  &_swigt__p_Matrix,
  &_swigt__p_ParameterVector,
  &_swigt__p_ProductDerivativeMatrix,
  &_swigt__p_Ptr,
  &_swigt__p_Radius,
  &_swigt__p_TransformDerivativeMatrix,
  &_swigt__p_bool,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_lsst__afw__geom__Box2D,
  &_swigt__p_lsst__afw__geom__Box2I,
  &_swigt__p_lsst__afw__geom__CoordinateExprT_2_t,
  &_swigt__p_lsst__afw__geom__CoordinateExprT_3_t,
  &_swigt__p_lsst__afw__geom__ExtentT_double_2_t,
  &_swigt__p_lsst__afw__geom__ExtentT_double_3_t,
  &_swigt__p_lsst__afw__geom__ExtentT_int_2_t,
  &_swigt__p_lsst__afw__geom__ExtentT_int_3_t,
  &_swigt__p_lsst__afw__geom__PointT_double_2_t,
  &_swigt__p_lsst__afw__geom__PointT_double_3_t,
  &_swigt__p_lsst__afw__geom__PointT_int_2_t,
  &_swigt__p_lsst__afw__geom__PointT_int_3_t,
  &_swigt__p_lsst__afw__geom__ellipses__ArithmeticRadius,
  &_swigt__p_lsst__afw__geom__ellipses__Axes,
  &_swigt__p_lsst__afw__geom__ellipses__BaseCore,
  &_swigt__p_lsst__afw__geom__ellipses__Distortion,
  &_swigt__p_lsst__afw__geom__ellipses__Ellipse,
  &_swigt__p_lsst__afw__geom__ellipses__GeometricRadius,
  &_swigt__p_lsst__afw__geom__ellipses__LogArithmeticRadius,
  &_swigt__p_lsst__afw__geom__ellipses__LogGeometricRadius,
  &_swigt__p_lsst__afw__geom__ellipses__LogShear,
  &_swigt__p_lsst__afw__geom__ellipses__Parametric,
  &_swigt__p_lsst__afw__geom__ellipses__Quadrupole,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t,
  &_swigt__p_lsst__afw__geom__ellipses__detail__EllipticityBase,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__locale,
  &_swigt__p_swig__PySwigIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_ConstPtr[] = {  {&_swigt__p_ConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EigenVector[] = {  {&_swigt__p_EigenVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t[] = {  {&_swigt__p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Element[] = {  {&_swigt__p_Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ellipticity[] = {  {&_swigt__p_Ellipticity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Envelope[] = {  {&_swigt__p_Envelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Jacobian[] = {  {&_swigt__p_Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterVector[] = {  {&_swigt__p_ParameterVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProductDerivativeMatrix[] = {  {&_swigt__p_ProductDerivativeMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptr[] = {  {&_swigt__p_Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Radius[] = {  {&_swigt__p_Radius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransformDerivativeMatrix[] = {  {&_swigt__p_TransformDerivativeMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, _p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_tTo_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__Box2D[] = {  {&_swigt__p_lsst__afw__geom__Box2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__Box2I[] = {  {&_swigt__p_lsst__afw__geom__Box2I, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__CoordinateExprT_2_t[] = {  {&_swigt__p_lsst__afw__geom__CoordinateExprT_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__CoordinateExprT_3_t[] = {  {&_swigt__p_lsst__afw__geom__CoordinateExprT_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_double_2_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_double_3_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_int_2_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_int_3_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_double_2_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_double_3_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_int_2_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_int_3_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__ArithmeticRadius[] = {  {&_swigt__p_lsst__afw__geom__ellipses__ArithmeticRadius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Axes[] = {  {&_swigt__p_lsst__afw__geom__ellipses__Axes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__BaseCore[] = {  {&_swigt__p_lsst__afw__geom__ellipses__BaseCore, 0, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__Quadrupole, _p_lsst__afw__geom__ellipses__QuadrupoleTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t, _p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_tTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__Axes, _p_lsst__afw__geom__ellipses__AxesTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Distortion[] = {  {&_swigt__p_lsst__afw__geom__ellipses__Distortion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Ellipse[] = {  {&_swigt__p_lsst__afw__geom__ellipses__Ellipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__GeometricRadius[] = {  {&_swigt__p_lsst__afw__geom__ellipses__GeometricRadius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__LogArithmeticRadius[] = {  {&_swigt__p_lsst__afw__geom__ellipses__LogArithmeticRadius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__LogGeometricRadius[] = {  {&_swigt__p_lsst__afw__geom__ellipses__LogGeometricRadius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__LogShear[] = {  {&_swigt__p_lsst__afw__geom__ellipses__LogShear, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Parametric[] = {  {&_swigt__p_lsst__afw__geom__ellipses__Parametric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Quadrupole[] = {  {&_swigt__p_lsst__afw__geom__ellipses__Quadrupole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t[] = {  {&_swigt__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__detail__EllipticityBase[] = {  {&_swigt__p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__Distortion, _p_lsst__afw__geom__ellipses__DistortionTo_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__LogShear, _p_lsst__afw__geom__ellipses__LogShearTo_p_lsst__afw__geom__ellipses__detail__EllipticityBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__PySwigIterator[] = {  {&_swigt__p_swig__PySwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ConstPtr,
  _swigc__p_EigenVector,
  _swigc__p_Eigen__MatrixT_double_2_2_Eigen__DontAlign_t,
  _swigc__p_Element,
  _swigc__p_Ellipticity,
  _swigc__p_Envelope,
  _swigc__p_Jacobian,
  _swigc__p_Matrix,
  _swigc__p_ParameterVector,
  _swigc__p_ProductDerivativeMatrix,
  _swigc__p_Ptr,
  _swigc__p_Radius,
  _swigc__p_TransformDerivativeMatrix,
  _swigc__p_bool,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Ellipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t_t,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_lsst__afw__geom__Box2D,
  _swigc__p_lsst__afw__geom__Box2I,
  _swigc__p_lsst__afw__geom__CoordinateExprT_2_t,
  _swigc__p_lsst__afw__geom__CoordinateExprT_3_t,
  _swigc__p_lsst__afw__geom__ExtentT_double_2_t,
  _swigc__p_lsst__afw__geom__ExtentT_double_3_t,
  _swigc__p_lsst__afw__geom__ExtentT_int_2_t,
  _swigc__p_lsst__afw__geom__ExtentT_int_3_t,
  _swigc__p_lsst__afw__geom__PointT_double_2_t,
  _swigc__p_lsst__afw__geom__PointT_double_3_t,
  _swigc__p_lsst__afw__geom__PointT_int_2_t,
  _swigc__p_lsst__afw__geom__PointT_int_3_t,
  _swigc__p_lsst__afw__geom__ellipses__ArithmeticRadius,
  _swigc__p_lsst__afw__geom__ellipses__Axes,
  _swigc__p_lsst__afw__geom__ellipses__BaseCore,
  _swigc__p_lsst__afw__geom__ellipses__Distortion,
  _swigc__p_lsst__afw__geom__ellipses__Ellipse,
  _swigc__p_lsst__afw__geom__ellipses__GeometricRadius,
  _swigc__p_lsst__afw__geom__ellipses__LogArithmeticRadius,
  _swigc__p_lsst__afw__geom__ellipses__LogGeometricRadius,
  _swigc__p_lsst__afw__geom__ellipses__LogShear,
  _swigc__p_lsst__afw__geom__ellipses__Parametric,
  _swigc__p_lsst__afw__geom__ellipses__Quadrupole,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__ArithmeticRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__GeometricRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogArithmeticRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__Distortion_lsst__afw__geom__ellipses__LogGeometricRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__ArithmeticRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__GeometricRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogArithmeticRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__SeparableT_lsst__afw__geom__ellipses__LogShear_lsst__afw__geom__ellipses__LogGeometricRadius_t,
  _swigc__p_lsst__afw__geom__ellipses__detail__EllipticityBase,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__locale,
  _swigc__p_swig__PySwigIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
  import_array();
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_boolalpha",Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_dec",Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_fixed",Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_hex",Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_internal",Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_left",Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_oct",Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_right",Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_scientific",Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showbase",Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpoint",Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpos",Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_skipws",Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_unitbuf",Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_uppercase",Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_adjustfield",Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_basefield",Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_floatfield",Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_badbit",Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_eofbit",Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_failbit",Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_goodbit",Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_app",Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ate",Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_binary",Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ios_base_in",Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_out",Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_trunc",Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_beg",Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_cur",Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_end",Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cin",Swig_var_cin_get, Swig_var_cin_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cout",Swig_var_cout_get, Swig_var_cout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cerr",Swig_var_cerr_get, Swig_var_cerr_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"clog",Swig_var_clog_get, Swig_var_clog_set);
  
  
  
  SWIG_Python_SetConstant(d, "Axes_A",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Axes::A)));
  SWIG_Python_SetConstant(d, "Axes_B",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Axes::B)));
  SWIG_Python_SetConstant(d, "Axes_THETA",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Axes::THETA)));
  SWIG_Python_SetConstant(d, "Quadrupole_IXX",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Quadrupole::IXX)));
  SWIG_Python_SetConstant(d, "Quadrupole_IYY",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Quadrupole::IYY)));
  SWIG_Python_SetConstant(d, "Quadrupole_IXY",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Quadrupole::IXY)));
  SWIG_Python_SetConstant(d, "EllipticityBase_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::detail::EllipticityBase::E1)));
  SWIG_Python_SetConstant(d, "EllipticityBase_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::detail::EllipticityBase::E2)));
  SWIG_Python_SetConstant(d, "SeparableDistortionGeometricRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableDistortionGeometricRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableDistortionGeometricRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableDistortionArithmeticRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableDistortionArithmeticRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableDistortionArithmeticRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableDistortionLogGeometricRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableDistortionLogGeometricRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableDistortionLogGeometricRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableDistortionLogArithmeticRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableDistortionLogArithmeticRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableDistortionLogArithmeticRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableLogShearGeometricRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableLogShearGeometricRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableLogShearGeometricRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableLogShearArithmeticRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableLogShearArithmeticRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableLogShearArithmeticRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableLogShearLogGeometricRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableLogShearLogGeometricRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableLogShearLogGeometricRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "SeparableLogShearLogArithmeticRadius_E1",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::E1)));
  SWIG_Python_SetConstant(d, "SeparableLogShearLogArithmeticRadius_E2",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::E2)));
  SWIG_Python_SetConstant(d, "SeparableLogShearLogArithmeticRadius_RADIUS",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::RADIUS)));
  SWIG_Python_SetConstant(d, "Ellipse_X",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Ellipse::X)));
  SWIG_Python_SetConstant(d, "Ellipse_Y",SWIG_From_int(static_cast< int >(lsst::afw::geom::ellipses::Ellipse::Y)));
}

