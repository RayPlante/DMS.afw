# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""

Python interface to lsst::afw::geom::ellipses classes and functions

"""

import _ellipsesLib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _ellipsesLib.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _ellipsesLib.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _ellipsesLib.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _ellipsesLib.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _ellipsesLib.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _ellipsesLib.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _ellipsesLib.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _ellipsesLib.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _ellipsesLib.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _ellipsesLib.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _ellipsesLib.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _ellipsesLib.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _ellipsesLib.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _ellipsesLib.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _ellipsesLib.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _ellipsesLib.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _ellipsesLib.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ios_base(_object):
    """Proxy of C++ ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _ellipsesLib.ios_base_erase_event
    imbue_event = _ellipsesLib.ios_base_imbue_event
    copyfmt_event = _ellipsesLib.ios_base_copyfmt_event
    def register_callback(*args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _ellipsesLib.ios_base_register_callback(*args)

    def flags(*args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _ellipsesLib.ios_base_flags(*args)

    def setf(*args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _ellipsesLib.ios_base_setf(*args)

    def unsetf(*args):
        """unsetf(self, fmtflags __mask)"""
        return _ellipsesLib.ios_base_unsetf(*args)

    def precision(*args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _ellipsesLib.ios_base_precision(*args)

    def width(*args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _ellipsesLib.ios_base_width(*args)

    def sync_with_stdio(*args):
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _ellipsesLib.ios_base_sync_with_stdio(*args)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _ellipsesLib.ios_base_imbue(*args)

    def getloc(*args):
        """getloc(self) -> locale"""
        return _ellipsesLib.ios_base_getloc(*args)

    def xalloc(*args):
        """xalloc() -> int"""
        return _ellipsesLib.ios_base_xalloc(*args)

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(*args):
        """iword(self, int __ix) -> long"""
        return _ellipsesLib.ios_base_iword(*args)

    def pword(*args):
        """pword(self, int __ix) -> void"""
        return _ellipsesLib.ios_base_pword(*args)

    __swig_destroy__ = _ellipsesLib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _ellipsesLib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _ellipsesLib.cvar
ios_base.boolalpha = _ellipsesLib.cvar.ios_base_boolalpha
ios_base.dec = _ellipsesLib.cvar.ios_base_dec
ios_base.fixed = _ellipsesLib.cvar.ios_base_fixed
ios_base.hex = _ellipsesLib.cvar.ios_base_hex
ios_base.internal = _ellipsesLib.cvar.ios_base_internal
ios_base.left = _ellipsesLib.cvar.ios_base_left
ios_base.oct = _ellipsesLib.cvar.ios_base_oct
ios_base.right = _ellipsesLib.cvar.ios_base_right
ios_base.scientific = _ellipsesLib.cvar.ios_base_scientific
ios_base.showbase = _ellipsesLib.cvar.ios_base_showbase
ios_base.showpoint = _ellipsesLib.cvar.ios_base_showpoint
ios_base.showpos = _ellipsesLib.cvar.ios_base_showpos
ios_base.skipws = _ellipsesLib.cvar.ios_base_skipws
ios_base.unitbuf = _ellipsesLib.cvar.ios_base_unitbuf
ios_base.uppercase = _ellipsesLib.cvar.ios_base_uppercase
ios_base.adjustfield = _ellipsesLib.cvar.ios_base_adjustfield
ios_base.basefield = _ellipsesLib.cvar.ios_base_basefield
ios_base.floatfield = _ellipsesLib.cvar.ios_base_floatfield
ios_base.badbit = _ellipsesLib.cvar.ios_base_badbit
ios_base.eofbit = _ellipsesLib.cvar.ios_base_eofbit
ios_base.failbit = _ellipsesLib.cvar.ios_base_failbit
ios_base.goodbit = _ellipsesLib.cvar.ios_base_goodbit
ios_base.app = _ellipsesLib.cvar.ios_base_app
ios_base.ate = _ellipsesLib.cvar.ios_base_ate
ios_base.binary = _ellipsesLib.cvar.ios_base_binary
ios_base.ios_base_in = _ellipsesLib.cvar.ios_base_ios_base_in
ios_base.out = _ellipsesLib.cvar.ios_base_out
ios_base.trunc = _ellipsesLib.cvar.ios_base_trunc
ios_base.beg = _ellipsesLib.cvar.ios_base_beg
ios_base.cur = _ellipsesLib.cvar.ios_base_cur
ios_base.end = _ellipsesLib.cvar.ios_base_end

def ios_base_sync_with_stdio(*args):
  """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _ellipsesLib.ios_base_sync_with_stdio(*args)

def ios_base_xalloc(*args):
  """ios_base_xalloc() -> int"""
  return _ellipsesLib.ios_base_xalloc(*args)

class ios(ios_base):
    """Proxy of C++ ios class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args):
        """rdstate(self) -> iostate"""
        return _ellipsesLib.ios_rdstate(*args)

    def clear(*args):
        """
        clear(self, iostate __state=goodbit)
        clear(self)
        """
        return _ellipsesLib.ios_clear(*args)

    def setstate(*args):
        """setstate(self, iostate __state)"""
        return _ellipsesLib.ios_setstate(*args)

    def good(*args):
        """good(self) -> bool"""
        return _ellipsesLib.ios_good(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _ellipsesLib.ios_eof(*args)

    def fail(*args):
        """fail(self) -> bool"""
        return _ellipsesLib.ios_fail(*args)

    def bad(*args):
        """bad(self) -> bool"""
        return _ellipsesLib.ios_bad(*args)

    def exceptions(*args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _ellipsesLib.ios_exceptions(*args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _ellipsesLib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ellipsesLib.delete_ios
    __del__ = lambda self : None;
    def tie(*args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _ellipsesLib.ios_tie(*args)

    def rdbuf(*args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _ellipsesLib.ios_rdbuf(*args)

    def copyfmt(*args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _ellipsesLib.ios_copyfmt(*args)

    def fill(*args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _ellipsesLib.ios_fill(*args)

    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _ellipsesLib.ios_imbue(*args)

    def narrow(*args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _ellipsesLib.ios_narrow(*args)

    def widen(*args):
        """widen(self, char __c) -> char_type"""
        return _ellipsesLib.ios_widen(*args)

ios_swigregister = _ellipsesLib.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ ostream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _ellipsesLib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ellipsesLib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _ellipsesLib.ostream___lshift__(*args)

    def put(*args):
        """put(self, char_type __c) -> ostream"""
        return _ellipsesLib.ostream_put(*args)

    def write(*args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _ellipsesLib.ostream_write(*args)

    def flush(*args):
        """flush(self) -> ostream"""
        return _ellipsesLib.ostream_flush(*args)

    def tellp(*args):
        """tellp(self) -> pos_type"""
        return _ellipsesLib.ostream_tellp(*args)

    def seekp(*args):
        """
        seekp(self, pos_type ?) -> ostream
        seekp(self, off_type ?, seekdir ?) -> ostream
        """
        return _ellipsesLib.ostream_seekp(*args)

ostream_swigregister = _ellipsesLib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ istream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _ellipsesLib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ellipsesLib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _ellipsesLib.istream___rshift__(*args)

    def gcount(*args):
        """gcount(self) -> streamsize"""
        return _ellipsesLib.istream_gcount(*args)

    def get(*args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _ellipsesLib.istream_get(*args)

    def getline(*args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _ellipsesLib.istream_getline(*args)

    def ignore(*args):
        """
        ignore(self, streamsize __n=1, int_type __delim=std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n=1) -> istream
        ignore(self) -> istream
        """
        return _ellipsesLib.istream_ignore(*args)

    def peek(*args):
        """peek(self) -> int_type"""
        return _ellipsesLib.istream_peek(*args)

    def read(*args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _ellipsesLib.istream_read(*args)

    def readsome(*args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _ellipsesLib.istream_readsome(*args)

    def putback(*args):
        """putback(self, char_type __c) -> istream"""
        return _ellipsesLib.istream_putback(*args)

    def unget(*args):
        """unget(self) -> istream"""
        return _ellipsesLib.istream_unget(*args)

    def sync(*args):
        """sync(self) -> int"""
        return _ellipsesLib.istream_sync(*args)

    def tellg(*args):
        """tellg(self) -> pos_type"""
        return _ellipsesLib.istream_tellg(*args)

    def seekg(*args):
        """
        seekg(self, pos_type ?) -> istream
        seekg(self, off_type ?, seekdir ?) -> istream
        """
        return _ellipsesLib.istream_seekg(*args)

istream_swigregister = _ellipsesLib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ iostream class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _ellipsesLib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ellipsesLib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _ellipsesLib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _ellipsesLib.endl_cb_ptr
endl = _ellipsesLib.endl
ends_cb_ptr = _ellipsesLib.ends_cb_ptr
ends = _ellipsesLib.ends
flush_cb_ptr = _ellipsesLib.flush_cb_ptr
flush = _ellipsesLib.flush
import lsst.pex.exceptions

import lsst.utils

def version(HeadURL = r"$HeadURL$"):
    """Return a version given a HeadURL string. If a different version is setup, return that too"""

    version_svn = lsst.utils.guessSvnVersion(HeadURL)

    try:
        import eups
    except ImportError:
        return version_svn
    else:
        try:
            version_eups = eups.getSetupVersion("afw")
        except AttributeError:
            return version_svn

    if version_eups == version_svn:
        return version_svn
    else:
        return "%s (setup: %s)" % (version_svn, version_eups)


import lsst.afw.geom.geomLib
class BaseCore(_object):
    """Proxy of C++ BaseCore class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BaseCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCore, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def make(*args):
        """
        make(string name) -> Ptr
        make(string name, ParameterVector parameters) -> Ptr
        make(string name, double v1, double v2, double v3) -> Ptr
        make(string name, BaseCore other) -> Ptr
        """
        return _ellipsesLib.BaseCore_make(*args)

    if _newclass:make = staticmethod(make)
    __swig_getmethods__["make"] = lambda x: make
    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.BaseCore_getName(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.BaseCore_clone(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.BaseCore_normalize(*args)

    def grow(*args):
        """grow(self, double buffer)"""
        return _ellipsesLib.BaseCore_grow(*args)

    def scale(*args):
        """scale(self, double factor)"""
        return _ellipsesLib.BaseCore_scale(*args)

    def getArea(*args):
        """getArea(self) -> double"""
        return _ellipsesLib.BaseCore_getArea(*args)

    def getGeometricRadius(*args):
        """getGeometricRadius(self) -> double"""
        return _ellipsesLib.BaseCore_getGeometricRadius(*args)

    def getArithmeticRadius(*args):
        """getArithmeticRadius(self) -> double"""
        return _ellipsesLib.BaseCore_getArithmeticRadius(*args)

    def computeDimensions(*args):
        """computeDimensions(self) -> ExtentD"""
        return _ellipsesLib.BaseCore_computeDimensions(*args)

    def getParameterVector(*args):
        """getParameterVector(self) -> ParameterVector"""
        return _ellipsesLib.BaseCore_getParameterVector(*args)

    def setParameterVector(*args):
        """setParameterVector(self, ParameterVector vector)"""
        return _ellipsesLib.BaseCore_setParameterVector(*args)

    def __eq__(*args):
        """__eq__(self, BaseCore other) -> bool"""
        return _ellipsesLib.BaseCore___eq__(*args)

    def __ne__(*args):
        """__ne__(self, BaseCore other) -> bool"""
        return _ellipsesLib.BaseCore___ne__(*args)

    def assign(*args):
        """assign(self, BaseCore other) -> BaseCore"""
        return _ellipsesLib.BaseCore_assign(*args)

    def dAssign(*args):
        """dAssign(self, BaseCore other) -> Jacobian"""
        return _ellipsesLib.BaseCore_dAssign(*args)

    __swig_destroy__ = _ellipsesLib.delete_BaseCore
    __del__ = lambda self : None;
BaseCore_swigregister = _ellipsesLib.BaseCore_swigregister
BaseCore_swigregister(BaseCore)

def BaseCore_make(*args):
  """
    make(string name) -> Ptr
    make(string name, ParameterVector parameters) -> Ptr
    make(string name, double v1, double v2, double v3) -> Ptr
    BaseCore_make(string name, BaseCore other) -> Ptr
    """
  return _ellipsesLib.BaseCore_make(*args)

class Axes(BaseCore):
    """Proxy of C++ Axes class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Axes, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Axes, name)
    __repr__ = _swig_repr
    A = _ellipsesLib.Axes_A
    B = _ellipsesLib.Axes_B
    THETA = _ellipsesLib.Axes_THETA
    def getA(*args):
        """getA(self) -> double"""
        return _ellipsesLib.Axes_getA(*args)

    def setA(*args):
        """setA(self, double a)"""
        return _ellipsesLib.Axes_setA(*args)

    def getB(*args):
        """getB(self) -> double"""
        return _ellipsesLib.Axes_getB(*args)

    def setB(*args):
        """setB(self, double b)"""
        return _ellipsesLib.Axes_setB(*args)

    def getTheta(*args):
        """getTheta(self) -> double"""
        return _ellipsesLib.Axes_getTheta(*args)

    def setTheta(*args):
        """setTheta(self, double theta)"""
        return _ellipsesLib.Axes_setTheta(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.Axes_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.Axes_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.Axes_normalize(*args)

    def assign(*args):
        """
        assign(self, Axes other) -> Axes
        assign(self, BaseCore other) -> Axes
        """
        return _ellipsesLib.Axes_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double a=1.0, double b=1.0, double theta=0.0, bool normalize=False) -> Axes
        __init__(self, double a=1.0, double b=1.0, double theta=0.0) -> Axes
        __init__(self, double a=1.0, double b=1.0) -> Axes
        __init__(self, double a=1.0) -> Axes
        __init__(self) -> Axes
        __init__(self, ParameterVector vector, bool normalize=False) -> Axes
        __init__(self, ParameterVector vector) -> Axes
        __init__(self, Axes other) -> Axes
        __init__(self, BaseCore other) -> Axes
        """
        this = _ellipsesLib.new_Axes(*args)
        try: self.this.append(this)
        except: self.this = this
    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_7__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.Axes_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.Axes__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.Axes__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.Axes__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.Axes_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    __swig_destroy__ = _ellipsesLib.delete_Axes
    __del__ = lambda self : None;
Axes_swigregister = _ellipsesLib.Axes_swigregister
Axes_swigregister(Axes)

def Axes_SWIGSharedPtrUpcast(*args):
  """Axes_SWIGSharedPtrUpcast(__dummy_7__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.Axes_SWIGSharedPtrUpcast(*args)

def Axes_cast(*args):
  """Axes_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.Axes_cast(*args)

class Quadrupole(BaseCore):
    """Proxy of C++ Quadrupole class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Quadrupole, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quadrupole, name)
    __repr__ = _swig_repr
    IXX = _ellipsesLib.Quadrupole_IXX
    IYY = _ellipsesLib.Quadrupole_IYY
    IXY = _ellipsesLib.Quadrupole_IXY
    def getIXX(*args):
        """getIXX(self) -> double"""
        return _ellipsesLib.Quadrupole_getIXX(*args)

    def setIXX(*args):
        """setIXX(self, double ixx)"""
        return _ellipsesLib.Quadrupole_setIXX(*args)

    def getIYY(*args):
        """getIYY(self) -> double"""
        return _ellipsesLib.Quadrupole_getIYY(*args)

    def setIYY(*args):
        """setIYY(self, double iyy)"""
        return _ellipsesLib.Quadrupole_setIYY(*args)

    def getIXY(*args):
        """getIXY(self) -> double"""
        return _ellipsesLib.Quadrupole_getIXY(*args)

    def setIXY(*args):
        """setIXY(self, double ixy)"""
        return _ellipsesLib.Quadrupole_setIXY(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.Quadrupole_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.Quadrupole_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.Quadrupole_normalize(*args)

    def getMatrix(*args):
        """getMatrix(self) -> Matrix"""
        return _ellipsesLib.Quadrupole_getMatrix(*args)

    def getDeterminant(*args):
        """getDeterminant(self) -> double"""
        return _ellipsesLib.Quadrupole_getDeterminant(*args)

    def assign(*args):
        """
        assign(self, Quadrupole other) -> Quadrupole
        assign(self, BaseCore other) -> Quadrupole
        """
        return _ellipsesLib.Quadrupole_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double ixx=1.0, double iyy=1.0, double ixy=0.0, bool normalize=False) -> Quadrupole
        __init__(self, double ixx=1.0, double iyy=1.0, double ixy=0.0) -> Quadrupole
        __init__(self, double ixx=1.0, double iyy=1.0) -> Quadrupole
        __init__(self, double ixx=1.0) -> Quadrupole
        __init__(self) -> Quadrupole
        __init__(self, ParameterVector vector, bool normalize=False) -> Quadrupole
        __init__(self, ParameterVector vector) -> Quadrupole
        __init__(self, Matrix matrix, bool normalize=True) -> Quadrupole
        __init__(self, Matrix matrix) -> Quadrupole
        __init__(self, Quadrupole other) -> Quadrupole
        __init__(self, BaseCore other) -> Quadrupole
        """
        this = _ellipsesLib.new_Quadrupole(*args)
        try: self.this.append(this)
        except: self.this = this
    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_9__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.Quadrupole_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.Quadrupole__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.Quadrupole__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.Quadrupole__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.Quadrupole_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    __swig_destroy__ = _ellipsesLib.delete_Quadrupole
    __del__ = lambda self : None;
Quadrupole_swigregister = _ellipsesLib.Quadrupole_swigregister
Quadrupole_swigregister(Quadrupole)

def Quadrupole_SWIGSharedPtrUpcast(*args):
  """Quadrupole_SWIGSharedPtrUpcast(__dummy_9__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.Quadrupole_SWIGSharedPtrUpcast(*args)

def Quadrupole_cast(*args):
  """Quadrupole_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.Quadrupole_cast(*args)

class GeometricRadius(_object):
    """Proxy of C++ GeometricRadius class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, GeometricRadius, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometricRadius, name)
    __repr__ = _swig_repr
    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.GeometricRadius_normalize(*args)

    def getName(*args):
        """getName() -> string"""
        return _ellipsesLib.GeometricRadius_getName(*args)

    if _newclass:getName = staticmethod(getName)
    __swig_getmethods__["getName"] = lambda x: getName
    def __init__(self, *args): 
        """
        __init__(self, double value=1.0) -> GeometricRadius
        __init__(self) -> GeometricRadius
        __init__(self, LogGeometricRadius other) -> GeometricRadius
        """
        this = _ellipsesLib.new_GeometricRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args):
        """
        assign(self, double value) -> GeometricRadius
        assign(self, LogGeometricRadius other) -> GeometricRadius
        """
        return _ellipsesLib.GeometricRadius_assign(*args)

    __swig_destroy__ = _ellipsesLib.delete_GeometricRadius
    __del__ = lambda self : None;
GeometricRadius_swigregister = _ellipsesLib.GeometricRadius_swigregister
GeometricRadius_swigregister(GeometricRadius)

def GeometricRadius_getName(*args):
  """GeometricRadius_getName() -> string"""
  return _ellipsesLib.GeometricRadius_getName(*args)

class ArithmeticRadius(_object):
    """Proxy of C++ ArithmeticRadius class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ArithmeticRadius, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArithmeticRadius, name)
    __repr__ = _swig_repr
    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.ArithmeticRadius_normalize(*args)

    def getName(*args):
        """getName() -> string"""
        return _ellipsesLib.ArithmeticRadius_getName(*args)

    if _newclass:getName = staticmethod(getName)
    __swig_getmethods__["getName"] = lambda x: getName
    def __init__(self, *args): 
        """
        __init__(self, double value=1.0) -> ArithmeticRadius
        __init__(self) -> ArithmeticRadius
        __init__(self, LogArithmeticRadius other) -> ArithmeticRadius
        """
        this = _ellipsesLib.new_ArithmeticRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args):
        """
        assign(self, double value) -> ArithmeticRadius
        assign(self, LogArithmeticRadius other) -> ArithmeticRadius
        """
        return _ellipsesLib.ArithmeticRadius_assign(*args)

    __swig_destroy__ = _ellipsesLib.delete_ArithmeticRadius
    __del__ = lambda self : None;
ArithmeticRadius_swigregister = _ellipsesLib.ArithmeticRadius_swigregister
ArithmeticRadius_swigregister(ArithmeticRadius)

def ArithmeticRadius_getName(*args):
  """ArithmeticRadius_getName() -> string"""
  return _ellipsesLib.ArithmeticRadius_getName(*args)

class LogGeometricRadius(_object):
    """Proxy of C++ LogGeometricRadius class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, LogGeometricRadius, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogGeometricRadius, name)
    __repr__ = _swig_repr
    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.LogGeometricRadius_normalize(*args)

    def getName(*args):
        """getName() -> string"""
        return _ellipsesLib.LogGeometricRadius_getName(*args)

    if _newclass:getName = staticmethod(getName)
    __swig_getmethods__["getName"] = lambda x: getName
    def __init__(self, *args): 
        """
        __init__(self, double value=0.0) -> LogGeometricRadius
        __init__(self) -> LogGeometricRadius
        __init__(self, GeometricRadius other) -> LogGeometricRadius
        """
        this = _ellipsesLib.new_LogGeometricRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args):
        """
        assign(self, double value) -> LogGeometricRadius
        assign(self, GeometricRadius other) -> LogGeometricRadius
        """
        return _ellipsesLib.LogGeometricRadius_assign(*args)

    __swig_destroy__ = _ellipsesLib.delete_LogGeometricRadius
    __del__ = lambda self : None;
LogGeometricRadius_swigregister = _ellipsesLib.LogGeometricRadius_swigregister
LogGeometricRadius_swigregister(LogGeometricRadius)

def LogGeometricRadius_getName(*args):
  """LogGeometricRadius_getName() -> string"""
  return _ellipsesLib.LogGeometricRadius_getName(*args)

class LogArithmeticRadius(_object):
    """Proxy of C++ LogArithmeticRadius class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, LogArithmeticRadius, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogArithmeticRadius, name)
    __repr__ = _swig_repr
    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.LogArithmeticRadius_normalize(*args)

    def getName(*args):
        """getName() -> string"""
        return _ellipsesLib.LogArithmeticRadius_getName(*args)

    if _newclass:getName = staticmethod(getName)
    __swig_getmethods__["getName"] = lambda x: getName
    def __init__(self, *args): 
        """
        __init__(self, double value=0.0) -> LogArithmeticRadius
        __init__(self) -> LogArithmeticRadius
        __init__(self, ArithmeticRadius other) -> LogArithmeticRadius
        """
        this = _ellipsesLib.new_LogArithmeticRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ellipsesLib.delete_LogArithmeticRadius
    __del__ = lambda self : None;
LogArithmeticRadius_swigregister = _ellipsesLib.LogArithmeticRadius_swigregister
LogArithmeticRadius_swigregister(LogArithmeticRadius)

def LogArithmeticRadius_getName(*args):
  """LogArithmeticRadius_getName() -> string"""
  return _ellipsesLib.LogArithmeticRadius_getName(*args)

class EllipticityBase(_object):
    """Proxy of C++ EllipticityBase class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, EllipticityBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipticityBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    E1 = _ellipsesLib.EllipticityBase_E1
    E2 = _ellipsesLib.EllipticityBase_E2
    def getComplex(*args):
        """
        getComplex(self) -> std::complex<(double)>
        getComplex(self) -> std::complex<(double)>
        """
        return _ellipsesLib.EllipticityBase_getComplex(*args)

    def setComplex(*args):
        """setComplex(self, std::complex<(double)> v)"""
        return _ellipsesLib.EllipticityBase_setComplex(*args)

    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.EllipticityBase_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.EllipticityBase_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.EllipticityBase_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.EllipticityBase_setE2(*args)

    def getE(*args):
        """getE(self) -> double"""
        return _ellipsesLib.EllipticityBase_getE(*args)

    def setE(*args):
        """setE(self, double e)"""
        return _ellipsesLib.EllipticityBase_setE(*args)

    def getTheta(*args):
        """getTheta(self) -> double"""
        return _ellipsesLib.EllipticityBase_getTheta(*args)

    __swig_destroy__ = _ellipsesLib.delete_EllipticityBase
    __del__ = lambda self : None;
EllipticityBase_swigregister = _ellipsesLib.EllipticityBase_swigregister
EllipticityBase_swigregister(EllipticityBase)

class Distortion(EllipticityBase):
    """Proxy of C++ Distortion class"""
    __swig_setmethods__ = {}
    for _s in [EllipticityBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Distortion, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticityBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distortion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, std::complex<(double)> complex) -> Distortion
        __init__(self, double e1=0.0, double e2=0.0) -> Distortion
        __init__(self, double e1=0.0) -> Distortion
        __init__(self) -> Distortion
        __init__(self, LogShear other) -> Distortion
        """
        this = _ellipsesLib.new_Distortion(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args):
        """
        assign(self, Distortion other) -> Distortion
        assign(self, LogShear other) -> Distortion
        """
        return _ellipsesLib.Distortion_assign(*args)

    def dAssign(*args):
        """
        dAssign(self, Distortion other) -> Jacobian
        dAssign(self, LogShear other) -> Jacobian
        """
        return _ellipsesLib.Distortion_dAssign(*args)

    def getAxisRatio(*args):
        """getAxisRatio(self) -> double"""
        return _ellipsesLib.Distortion_getAxisRatio(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.Distortion_normalize(*args)

    def getName(*args):
        """getName() -> string"""
        return _ellipsesLib.Distortion_getName(*args)

    if _newclass:getName = staticmethod(getName)
    __swig_getmethods__["getName"] = lambda x: getName
    __swig_destroy__ = _ellipsesLib.delete_Distortion
    __del__ = lambda self : None;
Distortion_swigregister = _ellipsesLib.Distortion_swigregister
Distortion_swigregister(Distortion)

def Distortion_getName(*args):
  """Distortion_getName() -> string"""
  return _ellipsesLib.Distortion_getName(*args)

class LogShear(EllipticityBase):
    """Proxy of C++ LogShear class"""
    __swig_setmethods__ = {}
    for _s in [EllipticityBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, LogShear, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipticityBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogShear, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, std::complex<(double)> complex) -> LogShear
        __init__(self, double e1=0.0, double e2=0.0) -> LogShear
        __init__(self, double e1=0.0) -> LogShear
        __init__(self) -> LogShear
        __init__(self, Distortion other) -> LogShear
        """
        this = _ellipsesLib.new_LogShear(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args):
        """
        assign(self, LogShear other) -> LogShear
        assign(self, Distortion other) -> LogShear
        """
        return _ellipsesLib.LogShear_assign(*args)

    def dAssign(*args):
        """
        dAssign(self, LogShear other) -> Jacobian
        dAssign(self, Distortion other) -> Jacobian
        """
        return _ellipsesLib.LogShear_dAssign(*args)

    def getAxisRatio(*args):
        """getAxisRatio(self) -> double"""
        return _ellipsesLib.LogShear_getAxisRatio(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.LogShear_normalize(*args)

    def getName(*args):
        """getName() -> string"""
        return _ellipsesLib.LogShear_getName(*args)

    if _newclass:getName = staticmethod(getName)
    __swig_getmethods__["getName"] = lambda x: getName
    __swig_destroy__ = _ellipsesLib.delete_LogShear
    __del__ = lambda self : None;
LogShear_swigregister = _ellipsesLib.LogShear_swigregister
LogShear_swigregister(LogShear)

def LogShear_getName(*args):
  """LogShear_getName() -> string"""
  return _ellipsesLib.LogShear_getName(*args)

class SeparableDistortionGeometricRadius(BaseCore):
    """Proxy of C++ SeparableDistortionGeometricRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableDistortionGeometricRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableDistortionGeometricRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableDistortionGeometricRadius_E1
    E2 = _ellipsesLib.SeparableDistortionGeometricRadius_E2
    RADIUS = _ellipsesLib.SeparableDistortionGeometricRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableDistortionGeometricRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableDistortionGeometricRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableDistortionGeometricRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableDistortionGeometricRadius other) -> SeparableDistortionGeometricRadius
        assign(self, BaseCore other) -> SeparableDistortionGeometricRadius
        """
        return _ellipsesLib.SeparableDistortionGeometricRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius()) -> SeparableDistortionGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableDistortionGeometricRadius
        __init__(self, double e1=0.0) -> SeparableDistortionGeometricRadius
        __init__(self) -> SeparableDistortionGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius()) -> SeparableDistortionGeometricRadius
        __init__(self, std::complex<(double)> complex) -> SeparableDistortionGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::GeometricRadius >::Radius()) -> SeparableDistortionGeometricRadius
        __init__(self, Ellipticity ellipticity) -> SeparableDistortionGeometricRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableDistortionGeometricRadius
        __init__(self, ParameterVector vector) -> SeparableDistortionGeometricRadius
        __init__(self, SeparableDistortionGeometricRadius other) -> SeparableDistortionGeometricRadius
        __init__(self, BaseCore other) -> SeparableDistortionGeometricRadius
        """
        this = _ellipsesLib.new_SeparableDistortionGeometricRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableDistortionGeometricRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableDistortionGeometricRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableDistortionGeometricRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_11__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableDistortionGeometricRadius
    __del__ = lambda self : None;
SeparableDistortionGeometricRadius_swigregister = _ellipsesLib.SeparableDistortionGeometricRadius_swigregister
SeparableDistortionGeometricRadius_swigregister(SeparableDistortionGeometricRadius)

def SeparableDistortionGeometricRadius_cast(*args):
  """SeparableDistortionGeometricRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableDistortionGeometricRadius_cast(*args)

def SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast(*args):
  """SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast(__dummy_11__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableDistortionGeometricRadius_SWIGSharedPtrUpcast(*args)

class SeparableDistortionArithmeticRadius(BaseCore):
    """Proxy of C++ SeparableDistortionArithmeticRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableDistortionArithmeticRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableDistortionArithmeticRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableDistortionArithmeticRadius_E1
    E2 = _ellipsesLib.SeparableDistortionArithmeticRadius_E2
    RADIUS = _ellipsesLib.SeparableDistortionArithmeticRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableDistortionArithmeticRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableDistortionArithmeticRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableDistortionArithmeticRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableDistortionArithmeticRadius other) -> SeparableDistortionArithmeticRadius
        assign(self, BaseCore other) -> SeparableDistortionArithmeticRadius
        """
        return _ellipsesLib.SeparableDistortionArithmeticRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius()) -> SeparableDistortionArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableDistortionArithmeticRadius
        __init__(self, double e1=0.0) -> SeparableDistortionArithmeticRadius
        __init__(self) -> SeparableDistortionArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius()) -> SeparableDistortionArithmeticRadius
        __init__(self, std::complex<(double)> complex) -> SeparableDistortionArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius()) -> SeparableDistortionArithmeticRadius
        __init__(self, Ellipticity ellipticity) -> SeparableDistortionArithmeticRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableDistortionArithmeticRadius
        __init__(self, ParameterVector vector) -> SeparableDistortionArithmeticRadius
        __init__(self, SeparableDistortionArithmeticRadius other) -> SeparableDistortionArithmeticRadius
        __init__(self, BaseCore other) -> SeparableDistortionArithmeticRadius
        """
        this = _ellipsesLib.new_SeparableDistortionArithmeticRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_13__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableDistortionArithmeticRadius
    __del__ = lambda self : None;
SeparableDistortionArithmeticRadius_swigregister = _ellipsesLib.SeparableDistortionArithmeticRadius_swigregister
SeparableDistortionArithmeticRadius_swigregister(SeparableDistortionArithmeticRadius)

def SeparableDistortionArithmeticRadius_cast(*args):
  """SeparableDistortionArithmeticRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableDistortionArithmeticRadius_cast(*args)

def SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast(*args):
  """SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast(__dummy_13__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableDistortionArithmeticRadius_SWIGSharedPtrUpcast(*args)

class SeparableDistortionLogGeometricRadius(BaseCore):
    """Proxy of C++ SeparableDistortionLogGeometricRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableDistortionLogGeometricRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableDistortionLogGeometricRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableDistortionLogGeometricRadius_E1
    E2 = _ellipsesLib.SeparableDistortionLogGeometricRadius_E2
    RADIUS = _ellipsesLib.SeparableDistortionLogGeometricRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableDistortionLogGeometricRadius other) -> SeparableDistortionLogGeometricRadius
        assign(self, BaseCore other) -> SeparableDistortionLogGeometricRadius
        """
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionLogGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius()) -> SeparableDistortionLogGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableDistortionLogGeometricRadius
        __init__(self, double e1=0.0) -> SeparableDistortionLogGeometricRadius
        __init__(self) -> SeparableDistortionLogGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionLogGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius()) -> SeparableDistortionLogGeometricRadius
        __init__(self, std::complex<(double)> complex) -> SeparableDistortionLogGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionLogGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius()) -> SeparableDistortionLogGeometricRadius
        __init__(self, Ellipticity ellipticity) -> SeparableDistortionLogGeometricRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableDistortionLogGeometricRadius
        __init__(self, ParameterVector vector) -> SeparableDistortionLogGeometricRadius
        __init__(self, SeparableDistortionLogGeometricRadius other) -> SeparableDistortionLogGeometricRadius
        __init__(self, BaseCore other) -> SeparableDistortionLogGeometricRadius
        """
        this = _ellipsesLib.new_SeparableDistortionLogGeometricRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_15__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableDistortionLogGeometricRadius
    __del__ = lambda self : None;
SeparableDistortionLogGeometricRadius_swigregister = _ellipsesLib.SeparableDistortionLogGeometricRadius_swigregister
SeparableDistortionLogGeometricRadius_swigregister(SeparableDistortionLogGeometricRadius)

def SeparableDistortionLogGeometricRadius_cast(*args):
  """SeparableDistortionLogGeometricRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableDistortionLogGeometricRadius_cast(*args)

def SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast(*args):
  """SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast(__dummy_15__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableDistortionLogGeometricRadius_SWIGSharedPtrUpcast(*args)

class SeparableDistortionLogArithmeticRadius(BaseCore):
    """Proxy of C++ SeparableDistortionLogArithmeticRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableDistortionLogArithmeticRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableDistortionLogArithmeticRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableDistortionLogArithmeticRadius_E1
    E2 = _ellipsesLib.SeparableDistortionLogArithmeticRadius_E2
    RADIUS = _ellipsesLib.SeparableDistortionLogArithmeticRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableDistortionLogArithmeticRadius other) -> SeparableDistortionLogArithmeticRadius
        assign(self, BaseCore other) -> SeparableDistortionLogArithmeticRadius
        """
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionLogArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius()) -> SeparableDistortionLogArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableDistortionLogArithmeticRadius
        __init__(self, double e1=0.0) -> SeparableDistortionLogArithmeticRadius
        __init__(self) -> SeparableDistortionLogArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionLogArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius()) -> SeparableDistortionLogArithmeticRadius
        __init__(self, std::complex<(double)> complex) -> SeparableDistortionLogArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableDistortionLogArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::Distortion,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius()) -> SeparableDistortionLogArithmeticRadius
        __init__(self, Ellipticity ellipticity) -> SeparableDistortionLogArithmeticRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableDistortionLogArithmeticRadius
        __init__(self, ParameterVector vector) -> SeparableDistortionLogArithmeticRadius
        __init__(self, SeparableDistortionLogArithmeticRadius other) -> SeparableDistortionLogArithmeticRadius
        __init__(self, BaseCore other) -> SeparableDistortionLogArithmeticRadius
        """
        this = _ellipsesLib.new_SeparableDistortionLogArithmeticRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_17__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableDistortionLogArithmeticRadius
    __del__ = lambda self : None;
SeparableDistortionLogArithmeticRadius_swigregister = _ellipsesLib.SeparableDistortionLogArithmeticRadius_swigregister
SeparableDistortionLogArithmeticRadius_swigregister(SeparableDistortionLogArithmeticRadius)

def SeparableDistortionLogArithmeticRadius_cast(*args):
  """SeparableDistortionLogArithmeticRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableDistortionLogArithmeticRadius_cast(*args)

def SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast(*args):
  """SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast(__dummy_17__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableDistortionLogArithmeticRadius_SWIGSharedPtrUpcast(*args)

class SeparableLogShearGeometricRadius(BaseCore):
    """Proxy of C++ SeparableLogShearGeometricRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableLogShearGeometricRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableLogShearGeometricRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableLogShearGeometricRadius_E1
    E2 = _ellipsesLib.SeparableLogShearGeometricRadius_E2
    RADIUS = _ellipsesLib.SeparableLogShearGeometricRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableLogShearGeometricRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableLogShearGeometricRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableLogShearGeometricRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableLogShearGeometricRadius other) -> SeparableLogShearGeometricRadius
        assign(self, BaseCore other) -> SeparableLogShearGeometricRadius
        """
        return _ellipsesLib.SeparableLogShearGeometricRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius()) -> SeparableLogShearGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableLogShearGeometricRadius
        __init__(self, double e1=0.0) -> SeparableLogShearGeometricRadius
        __init__(self) -> SeparableLogShearGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius()) -> SeparableLogShearGeometricRadius
        __init__(self, std::complex<(double)> complex) -> SeparableLogShearGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::GeometricRadius >::Radius()) -> SeparableLogShearGeometricRadius
        __init__(self, Ellipticity ellipticity) -> SeparableLogShearGeometricRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableLogShearGeometricRadius
        __init__(self, ParameterVector vector) -> SeparableLogShearGeometricRadius
        __init__(self, SeparableLogShearGeometricRadius other) -> SeparableLogShearGeometricRadius
        __init__(self, BaseCore other) -> SeparableLogShearGeometricRadius
        """
        this = _ellipsesLib.new_SeparableLogShearGeometricRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableLogShearGeometricRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableLogShearGeometricRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableLogShearGeometricRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_19__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableLogShearGeometricRadius
    __del__ = lambda self : None;
SeparableLogShearGeometricRadius_swigregister = _ellipsesLib.SeparableLogShearGeometricRadius_swigregister
SeparableLogShearGeometricRadius_swigregister(SeparableLogShearGeometricRadius)

def SeparableLogShearGeometricRadius_cast(*args):
  """SeparableLogShearGeometricRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableLogShearGeometricRadius_cast(*args)

def SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast(*args):
  """SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast(__dummy_19__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableLogShearGeometricRadius_SWIGSharedPtrUpcast(*args)

class SeparableLogShearArithmeticRadius(BaseCore):
    """Proxy of C++ SeparableLogShearArithmeticRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableLogShearArithmeticRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableLogShearArithmeticRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableLogShearArithmeticRadius_E1
    E2 = _ellipsesLib.SeparableLogShearArithmeticRadius_E2
    RADIUS = _ellipsesLib.SeparableLogShearArithmeticRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableLogShearArithmeticRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableLogShearArithmeticRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableLogShearArithmeticRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableLogShearArithmeticRadius other) -> SeparableLogShearArithmeticRadius
        assign(self, BaseCore other) -> SeparableLogShearArithmeticRadius
        """
        return _ellipsesLib.SeparableLogShearArithmeticRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius()) -> SeparableLogShearArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableLogShearArithmeticRadius
        __init__(self, double e1=0.0) -> SeparableLogShearArithmeticRadius
        __init__(self) -> SeparableLogShearArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius()) -> SeparableLogShearArithmeticRadius
        __init__(self, std::complex<(double)> complex) -> SeparableLogShearArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::ArithmeticRadius >::Radius()) -> SeparableLogShearArithmeticRadius
        __init__(self, Ellipticity ellipticity) -> SeparableLogShearArithmeticRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableLogShearArithmeticRadius
        __init__(self, ParameterVector vector) -> SeparableLogShearArithmeticRadius
        __init__(self, SeparableLogShearArithmeticRadius other) -> SeparableLogShearArithmeticRadius
        __init__(self, BaseCore other) -> SeparableLogShearArithmeticRadius
        """
        this = _ellipsesLib.new_SeparableLogShearArithmeticRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_21__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableLogShearArithmeticRadius
    __del__ = lambda self : None;
SeparableLogShearArithmeticRadius_swigregister = _ellipsesLib.SeparableLogShearArithmeticRadius_swigregister
SeparableLogShearArithmeticRadius_swigregister(SeparableLogShearArithmeticRadius)

def SeparableLogShearArithmeticRadius_cast(*args):
  """SeparableLogShearArithmeticRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableLogShearArithmeticRadius_cast(*args)

def SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast(*args):
  """SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast(__dummy_21__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableLogShearArithmeticRadius_SWIGSharedPtrUpcast(*args)

class SeparableLogShearLogGeometricRadius(BaseCore):
    """Proxy of C++ SeparableLogShearLogGeometricRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableLogShearLogGeometricRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableLogShearLogGeometricRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableLogShearLogGeometricRadius_E1
    E2 = _ellipsesLib.SeparableLogShearLogGeometricRadius_E2
    RADIUS = _ellipsesLib.SeparableLogShearLogGeometricRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableLogShearLogGeometricRadius other) -> SeparableLogShearLogGeometricRadius
        assign(self, BaseCore other) -> SeparableLogShearLogGeometricRadius
        """
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearLogGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius()) -> SeparableLogShearLogGeometricRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableLogShearLogGeometricRadius
        __init__(self, double e1=0.0) -> SeparableLogShearLogGeometricRadius
        __init__(self) -> SeparableLogShearLogGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearLogGeometricRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius()) -> SeparableLogShearLogGeometricRadius
        __init__(self, std::complex<(double)> complex) -> SeparableLogShearLogGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearLogGeometricRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogGeometricRadius >::Radius()) -> SeparableLogShearLogGeometricRadius
        __init__(self, Ellipticity ellipticity) -> SeparableLogShearLogGeometricRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableLogShearLogGeometricRadius
        __init__(self, ParameterVector vector) -> SeparableLogShearLogGeometricRadius
        __init__(self, SeparableLogShearLogGeometricRadius other) -> SeparableLogShearLogGeometricRadius
        __init__(self, BaseCore other) -> SeparableLogShearLogGeometricRadius
        """
        this = _ellipsesLib.new_SeparableLogShearLogGeometricRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_23__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableLogShearLogGeometricRadius
    __del__ = lambda self : None;
SeparableLogShearLogGeometricRadius_swigregister = _ellipsesLib.SeparableLogShearLogGeometricRadius_swigregister
SeparableLogShearLogGeometricRadius_swigregister(SeparableLogShearLogGeometricRadius)

def SeparableLogShearLogGeometricRadius_cast(*args):
  """SeparableLogShearLogGeometricRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableLogShearLogGeometricRadius_cast(*args)

def SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast(*args):
  """SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast(__dummy_23__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableLogShearLogGeometricRadius_SWIGSharedPtrUpcast(*args)

class SeparableLogShearLogArithmeticRadius(BaseCore):
    """Proxy of C++ SeparableLogShearLogArithmeticRadius class"""
    __swig_setmethods__ = {}
    for _s in [BaseCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SeparableLogShearLogArithmeticRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeparableLogShearLogArithmeticRadius, name)
    __repr__ = _swig_repr
    E1 = _ellipsesLib.SeparableLogShearLogArithmeticRadius_E1
    E2 = _ellipsesLib.SeparableLogShearLogArithmeticRadius_E2
    RADIUS = _ellipsesLib.SeparableLogShearLogArithmeticRadius_RADIUS
    def getE1(*args):
        """getE1(self) -> double"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_getE1(*args)

    def setE1(*args):
        """setE1(self, double e1)"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_setE1(*args)

    def getE2(*args):
        """getE2(self) -> double"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_getE2(*args)

    def setE2(*args):
        """setE2(self, double e2)"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_setE2(*args)

    def getRadius(*args):
        """
        getRadius(self) -> Radius
        getRadius(self) -> Radius
        """
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_getRadius(*args)

    def setRadius(*args):
        """
        setRadius(self, double radius)
        setRadius(self, Radius radius)
        """
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_setRadius(*args)

    def getEllipticity(*args):
        """
        getEllipticity(self) -> Ellipticity
        getEllipticity(self) -> Ellipticity
        """
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_getEllipticity(*args)

    def clone(*args):
        """clone(self) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_clone(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_getName(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_normalize(*args)

    def assign(*args):
        """
        assign(self, SeparableLogShearLogArithmeticRadius other) -> SeparableLogShearLogArithmeticRadius
        assign(self, BaseCore other) -> SeparableLogShearLogArithmeticRadius
        """
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_assign(*args)

    def __init__(self, *args): 
        """
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearLogArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius()) -> SeparableLogShearLogArithmeticRadius
        __init__(self, double e1=0.0, double e2=0.0) -> SeparableLogShearLogArithmeticRadius
        __init__(self, double e1=0.0) -> SeparableLogShearLogArithmeticRadius
        __init__(self) -> SeparableLogShearLogArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearLogArithmeticRadius
        __init__(self, std::complex<(double)> complex, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius()) -> SeparableLogShearLogArithmeticRadius
        __init__(self, std::complex<(double)> complex) -> SeparableLogShearLogArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius(), 
            bool normalize=True) -> SeparableLogShearLogArithmeticRadius
        __init__(self, Ellipticity ellipticity, double radius=lsst::afw::geom::ellipses::Separable< lsst::afw::geom::ellipses::LogShear,lsst::afw::geom::ellipses::LogArithmeticRadius >::Radius()) -> SeparableLogShearLogArithmeticRadius
        __init__(self, Ellipticity ellipticity) -> SeparableLogShearLogArithmeticRadius
        __init__(self, ParameterVector vector, bool normalize=False) -> SeparableLogShearLogArithmeticRadius
        __init__(self, ParameterVector vector) -> SeparableLogShearLogArithmeticRadius
        __init__(self, SeparableLogShearLogArithmeticRadius other) -> SeparableLogShearLogArithmeticRadius
        __init__(self, BaseCore other) -> SeparableLogShearLogArithmeticRadius
        """
        this = _ellipsesLib.new_SeparableLogShearLogArithmeticRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, LinearTransform t) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, LinearTransform t)"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius__transformInPlace(*args)

    def _convolve(*args):
        """_convolve(self, BaseCore other) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius__convolve(*args)

    def cast(*args):
        """cast(Ptr p) -> Ptr"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_cast(*args)

    if _newclass:cast = staticmethod(cast)
    __swig_getmethods__["cast"] = lambda x: cast
    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def convolve(self, t): return self._convolve(t)

    def SWIGSharedPtrUpcast(*args):
        """SWIGSharedPtrUpcast(__dummy_25__ swigSharedPtrUpcast) -> __dummy_5__"""
        return _ellipsesLib.SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast(*args)

    if _newclass:SWIGSharedPtrUpcast = staticmethod(SWIGSharedPtrUpcast)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: SWIGSharedPtrUpcast
    __swig_destroy__ = _ellipsesLib.delete_SeparableLogShearLogArithmeticRadius
    __del__ = lambda self : None;
SeparableLogShearLogArithmeticRadius_swigregister = _ellipsesLib.SeparableLogShearLogArithmeticRadius_swigregister
SeparableLogShearLogArithmeticRadius_swigregister(SeparableLogShearLogArithmeticRadius)

def SeparableLogShearLogArithmeticRadius_cast(*args):
  """SeparableLogShearLogArithmeticRadius_cast(Ptr p) -> Ptr"""
  return _ellipsesLib.SeparableLogShearLogArithmeticRadius_cast(*args)

def SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast(*args):
  """SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast(__dummy_25__ swigSharedPtrUpcast) -> __dummy_5__"""
  return _ellipsesLib.SeparableLogShearLogArithmeticRadius_SWIGSharedPtrUpcast(*args)

class Ellipse(_object):
    """Proxy of C++ Ellipse class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Ellipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipse, name)
    __repr__ = _swig_repr
    X = _ellipsesLib.Ellipse_X
    Y = _ellipsesLib.Ellipse_Y
    def getCenter(*args):
        """
        getCenter(self) -> PointD
        getCenter(self) -> PointD
        """
        return _ellipsesLib.Ellipse_getCenter(*args)

    def setCenter(*args):
        """setCenter(self, PointD center)"""
        return _ellipsesLib.Ellipse_setCenter(*args)

    def _getCorePtr(*args):
        """
        _getCorePtr(self) -> ConstPtr
        _getCorePtr(self) -> Ptr
        """
        return _ellipsesLib.Ellipse__getCorePtr(*args)

    def setCore(*args):
        """setCore(self, BaseCore core)"""
        return _ellipsesLib.Ellipse_setCore(*args)

    def normalize(*args):
        """normalize(self)"""
        return _ellipsesLib.Ellipse_normalize(*args)

    def grow(*args):
        """grow(self, double buffer)"""
        return _ellipsesLib.Ellipse_grow(*args)

    def scale(*args):
        """scale(self, double factor)"""
        return _ellipsesLib.Ellipse_scale(*args)

    def shift(*args):
        """shift(self, ExtentD offset)"""
        return _ellipsesLib.Ellipse_shift(*args)

    def getParameterVector(*args):
        """getParameterVector(self) -> ParameterVector"""
        return _ellipsesLib.Ellipse_getParameterVector(*args)

    def setParameterVector(*args):
        """setParameterVector(self, ParameterVector vector)"""
        return _ellipsesLib.Ellipse_setParameterVector(*args)

    def computeEnvelope(*args):
        """computeEnvelope(self) -> Envelope"""
        return _ellipsesLib.Ellipse_computeEnvelope(*args)

    def assign(*args):
        """assign(self, Ellipse other) -> Ellipse"""
        return _ellipsesLib.Ellipse_assign(*args)

    def __eq__(*args):
        """__eq__(self, Ellipse other) -> bool"""
        return _ellipsesLib.Ellipse___eq__(*args)

    def __ne__(*args):
        """__ne__(self, Ellipse other) -> bool"""
        return _ellipsesLib.Ellipse___ne__(*args)

    __swig_destroy__ = _ellipsesLib.delete_Ellipse
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, BaseCore core, PointD center=lsst::afw::geom::PointD()) -> Ellipse
        __init__(self, BaseCore core) -> Ellipse
        __init__(self, Ptr core, PointD center=lsst::afw::geom::PointD()) -> Ellipse
        __init__(self, Ptr core) -> Ellipse
        __init__(self, Ellipse other) -> Ellipse
        """
        this = _ellipsesLib.new_Ellipse(*args)
        try: self.this.append(this)
        except: self.this = this
    def _transform(*args):
        """_transform(self, AffineTransform t) -> Ellipse"""
        return _ellipsesLib.Ellipse__transform(*args)

    def _transformInPlace(*args):
        """_transformInPlace(self, AffineTransform t)"""
        return _ellipsesLib.Ellipse__transformInPlace(*args)

    def _getGridTransform(*args):
        """_getGridTransform(self) -> AffineTransform"""
        return _ellipsesLib.Ellipse__getGridTransform(*args)

    def transform(self, t): return self._transform(t)
    def transformInPlace(self, t): self._transformInPlace(t)
    def getGridTransform(self, t): return self._getGridTransform(t)
    def getCore(self): return self._getCorePtr()
    def __repr__(self):
        return "Ellipse(%r, %r)" % (self.getCore(), self.getCenter())
    def __str__(self):
        return "(%s, %s)" % (self.getCore(), self.getCenter())

Ellipse_swigregister = _ellipsesLib.Ellipse_swigregister
Ellipse_swigregister(Ellipse)

class Parametric(_object):
    """Proxy of C++ Parametric class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Parametric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parametric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Ellipse ellipse) -> Parametric"""
        this = _ellipsesLib.new_Parametric(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args):
        """__call__(self, double t) -> PointD"""
        return _ellipsesLib.Parametric___call__(*args)

    __swig_destroy__ = _ellipsesLib.delete_Parametric
    __del__ = lambda self : None;
Parametric_swigregister = _ellipsesLib.Parametric_swigregister
Parametric_swigregister(Parametric)



