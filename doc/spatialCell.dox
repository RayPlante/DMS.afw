namespace lsst { namespace afw { namespace math {
/**
 \page SpatialCellSetExample Example of SpatialCellSet

 \dontinclude spatialCellExample.cc

Demonstrate the use of SpatialCellSet%s; the code's in \link spatialCellExample.cc\endlink.

Start by including needed headers, and declaring namespace aliases and a routine \c readImage
\until std::pair

We start by calling \c readImage, and use \c boost::tie to unpack the \c std::pair.  The \c tie call does what
you think, unpacking a \c pair into a couple of variables (it works for \c boost::tuple too, and is in TR1's
\c \<tuple\> header).

\skipline SpatialCellSetDemo
\until tie

We want to learn something about the objects in this %image, and would like to ensure that the ones we study
are spread reasonably uniformly.  We accordingly create a SpatialCellSet; a collection of SpatialCell%s, each
of which will maintain its one list of candidate objects for study.  For example, if we were estimating the
PSF we'd want a set of isolated bright stars, but we wouldn't want them to all come from the top right corner
of the image.  A SpatialCellSet allows us to take the best \c n candidates from each SpatialCell, ensuring a
reasonable distribution across the %image.

The constructor's first argument is the %image's
bounding box --- it'd be nice to simply pass the %image, wouldn't it, but that's not currently supported.  The
second and third arguments <TT>260, 200</TT> define the size (in pixels) of the SpatialCell%s.

If you run the python version of this example, \link spatialCellExample.py\endlink, with <TT>%display =
True</TT> the 6 cells will be shown in green (why 6?  Because the %image is 512x512 and you can fit 260x200 into 512x512 6 times.)

\until );

Our SpatialCellSet is empty, so let's insert all the objects in the frame into it.  We have a list of
detections in the FootprintSet \c fs, so this is easy.  We package each object into an \c ExampleCandidate,
and insert it into the set. The SpatialCellSet is responsible for putting it into the correct cell, and
SpatialCell for maintaining an order within each cell; this ordering is defined by a virtual function
<TT>double ExampleCandidate::getCandidateRating() const</TT>.  The \c ExampleCandidate class is implemented in
\link testSpatialCell.h\endlink and \link testSpatialCell.cc\endlink

You can store anything you like in your candidate class, the only requirement is that it inherit from
lsst::afw::math::SpatialCellCandidate or lsst::afw::math::SpatialCellImageCandidate (the latter adds some
extra virtual methods).  I chose to save a pointer to the parent %image, and the object's bounding box.

\until }

It's possible to iterate over all the objects in a SpatialCellSet (we'll do so in a moment), but the simplest
way to visit all cells is to pass in a visitor object.  The \c ExampleCandidateVisitor object (defined in 
\link testSpatialCell.h\endlink) counts the candidates and the number of pixels contained in their bounding boxes.

\skipline visitor
\until std::cout

Now we'll visit each of our objects by explicit iteration. The iterator returns a base-class pointer so we
need a \c dynamic_cast (this cast is also available from python via a little swiggery).  We decided that we
don't like small objects, defined as those with less than 75 pixels in their bounding boxes, so we'll label
them as \c BAD.

\skipline for
\until dynamic_cast
\skipline box.getArea() < 75
\until }
\until }
\until }

What does \c BAD mean (other options are \c UNKNOWN and \c GOOD)?  Basically that that object is to be
ignored. It no longer appears in the size of the SpatialCell%s, it is skipped by the iterators, and the
visitors pass it by.  You can turn this behaviour off with \c setIgnoreBad.  

Note that we pass the visitor \e before we decide to ignore \c BAD so \c getN() and \c getNPix() return
the number of good objects/pixels.

\skipline for
\until }

And count the good candidate again
\until }

Running the example should print
<PRE>
There are 22 candidates
Cell 0x0 nobj=2 N_good=2 NPix_good=1858
Cell 1x0 nobj=2 N_good=1 NPix_good=210
Cell 0x1 nobj=4 N_good=4 NPix_good=1305
Cell 1x1 nobj=4 N_good=1 NPix_good=360
Cell 0x2 nobj=3 N_good=1 NPix_good=99
Cell 1x2 nobj=7 N_good=2 NPix_good=288
There are 11 good candidates
</PRE>

<HR>

Here's the function that reads a FITS file and finds a set of object in it.  It isn't really anything to do with SpatialCell%s, but for completeness...
\skipline std::pair
\until readImage

First read a part of the FITS file. We use <TT>eups::productDir</TT> to find the directory, and only read a
part of the %image (that's the \c BBox).  The use of a \c boost::shared_ptr<MaskedImage> (written as \c MaskedImage::Ptr)
is because I want to call the actual constructor in the scope of the try block, but I want to use the %image at
function scope.

\until exit
\until }

Subtract the background;  the \c try block is in case the %image is too small for a spline fit.

\until makeBackground
\until makeBackground
\until }

Run an object detector
\until DETECTED
\until DETECTED

And return the desired data
\until }

\example spatialCellExample.cc
\example spatialCellExample.py
\example testSpatialCell.h
\example testSpatialCell.cc
 */
}}}
