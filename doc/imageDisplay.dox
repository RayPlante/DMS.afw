namespace lsst { namespace afw { namespace image {
/**
\page secDisplay  How to %display images

\section secDs9  Using DS9 in the LSST framework

At present (July 2009) we are using ds9 (http://hea-www.harvard.edu/RD/ds9) to %display
Image%s, Mask%s, and MaskedImage%s.  This has a number of drawbacks (slow; slightly
unstable API;  awkward to use with firewalls) as well as a number of advantages:  Supported
by the CfA; ubiquitous in astronomy;  support for WCS;  support for multiple frames).

The basic functionality is in \c lsst.afw.display.ds9, and the workhorse routine
is \c mtv which is able to %display
an Exposure, an Image, or a MaskedImage (it's also able to overlay a Mask on an
Image of identical size --- a bug in ds9 prevents you from displaying a pure Mask). The
simplest use is simply to setup afw and ds9, start ds9 and python, and type:
\code
import lsst.afw.display.ds9 as ds9
import lsst.afw.image as afwImage

im = afwImage("myFile.fits")
ds9.mtv(im)
\endcode

\subsection secDs9Mosaics   How to build a mosaic image

There are facilities to build mosaics of %images in \c lsst.afw.display.utils

The basic class is \c Mosaic:
\code
m = Mosaic()
m.setGutter(5)
m.setBackground(10)
m.setMode("square")                   # the default
mosaic = m.makeMosaic(im1, im2, im3)
\endcode
You can return the (ix, iy)th (or nth) BBox with getBBox()

N.b. you could also have said <tt>ims = [im1, im2, im3]; mosaic = m.makeMosaic(ims)</tt>

<dl>
<dt>__init__() [self, gutter=3, background=0, mode='square']
<dd>

<dt>drawLabels() [self, labels, frame=0]
<dd>
      Draw the list labels at the corners of each panel

<dt> getBBox() [self, ix, iy=None]
<dd>
      Get the BBox for the nth or (ix, iy)the panel

<dt> makeMosaic() [self, images, frame=None, mode=None]
<dd>
      Return a mosaic of all the images provided; if frame is specified, display it

<dt> setBackground() [self, background]
<dd>
      Set the value in the gutters

<dt> setGutter() [self, gutter]
<dd>
      Set the number of pixels between panels in a mosaic

<dt> setMode() [self, mode]
<dd>
      Set mosaicing mode.  Valid options:
      <table>
        <tr><td>square</td><td>Make mosaic as square as possible</td></tr>
        <tr><td>x</td>     <td>Make mosaic one %image high</td></tr>
        <tr><td>y</td>     <td>Make mosaic one %image wide</td></tr>
      </table>

\subsection secDs9Commands  All supported ds9 commands

<UL>
<LI> %Image commands

<dl>    
<dt> erase() [frame=-1]
<dd>
        Erase the specified DS9 frame
    
<dt> mtv() [data, frame=-1, init=True, wcs=None, isMask=False, lowOrderBits=False, title=None]
<dd>
        Display an Image or Mask on a DS9 display
        
           If lowOrderBits is True, give low-order-bits priority in display (i.e.
        overlay them last)
        
        Historical note: the name "mtv" comes from Jim Gunn's forth imageprocessing
        system, Mirella (named after Mirella Freni); The "m" stands for Mirella.
    
<dt> pan() [colc=None, rowc=None, frame=-1]
<dd>
        Pan to (rowc, colc); see also zoom
    
<dt> setDefaultFrame() [frame]
<dd>
        Set the default frame for ds9
    
<dt> setMaskColor() [color=GREEN]
<dd>
        Set the ds9 mask colour to; eg. ds9.setMaskColor(ds9.RED)
    
<dt> setMaskPlaneColor() [name, color=None]
<dd>
        Request that mask plane name be displayed as color; name may be a dictionary
        (in which case color should be omitted
    
<dt> setMaskPlaneVisibility() [name, show=True]
<dd>
        Specify the visibility of a given mask plane; name may be a dictionary (in which case show w
ill be ignored)
    
<dt> setMaskTransparency() [transparency=None]
<dd>
        Specify ds9's mask transparency (percent); or None to not set it when loading masks
    
<dt> show() [frame=-1]
<dd>
        Uniconify and Raise ds9.  N.b. throws an exception if frame doesn't exit
    
<dt> zoom() [zoomfac=None, colc=None, rowc=None, frame=-1]
<dd>
        Zoom frame by specified amount, optionally panning also
</dl>

<LI> Graphics commands

<dl>
<dt> dot() [symb, c, r, frame=-1, size=2, ctype=GREEN]
<dd>
        Draw a symbol onto the specified DS9 frame at (col,row) = (c,r) [0-based coordinates]
        Possible values are:
<table>
  <tr><td>+</td><td>Draw a +</td></tr>
  <tr><td>x</td><td>Draw an x</td></tr>
  <tr><td>o</td><td>Draw a circle</td></tr>
  <tr><td>@:Mxx,Mxy,Myy</td><td>Draw an ellipse with moments (Mxx, Mxy, Myy) (size is ignored)</td></tr>
</table>
Any other value is interpreted as a string to be drawn
    
<dt> line() [points, frame=-1, symbs=False, ctype=GREEN]
<dd>
        Draw a set of symbols or connect the points, a list of (col,row)
        If symbs is True, draw points at the specified points using the desired symbol,
        otherwise connect the dots.  Ctype is the name of a colour (e.g. ds9.RED)
</dl>

<LI> Internal commands that you shouldn't need to know

<dl>
<dt> Ds9Error
<dd> Exception thrown if there's some problem talking to ds9
    
<dt> ds9Cmd() [cmd, trap=True]
<dd>
        Issue a ds9 command, raising errors as appropriate
    
<dt> getDefaultFrame()
<dd>
        Get the default frame for ds9
    
<dt> getMaskPlaneColor() [name]
<dd>
        Return the colour associated with the specified mask plane name
    
<dt> getMaskPlaneVisibility() [name]
<dd>
        Should we display the specified mask plane name?
    
<dt> getMaskTransparency()
<dd>
        Return ds9's mask transparency
    
<dt> getXpaAccessPoint()
<dd>
        Parse XPA_PORT and send return an identifier to send ds9 commands there, instead of "ds9"
        If you don't have XPA_PORT set, the usual xpans tricks will be played when we return "ds9".
    
<dt> initDS9() [execDs9=True]
<dd>
</dl>
</UL>
	
Colours may be specified as any X11-compliant string (e.g. <tt>"orchid"</tt>), or by one
of the following constants defined in \c ds9;  the advantage of the latter
approach is that the python interpreter can detect typos: \c BLACK, \c WHITE, \c RED, \c BLUE,
\c GREEN, \c CYAN, \c MAGENTA, \c YELLOW.

\subsection secDs9Firewall  How to use ds9 through a firewall

On your home machine, type
\code
export XPA_PORT="DS9:ds9 22345 22346"
#                        ^^^^^ ^^^^^
#                        Choose any 2 consecutive numbers over 4095
ssh -N -f lsstXXX.ncsa.uiuc.edu -R 22345:localhost:22345 -R 22346:localhost:22346 > /dev/null 2>&1
ds9 &
\endcode
(<tt>setenv XPA_PORT "DS9:ds9 22345 22346"</tt> for csh users, of course)

On \c lsstXXX.ncsa.uiuc.edu, set \c XPA_PORT to the same value, start \c python,
<tt>import lsst.afw.display.ds9</tt> and proceed:
\code
export XPA_PORT="DS9:ds9 22345 22346"
python
>>> import lsst.afw.display.ds9 as ds9
>>> ds9.erase()
\endcode

xpa afficianados will note that I'm bypassing the xpa name s erver; it needs
another set of 2 or 3 ports tunnelled, and setting up ACLs.

Here's \link tunnelDs9 a script\endlink (in \c afw/examples) to run on your home machine that should simplify setting
up/tearing down the ssh tunnels.  It's not great, so improvements would/will be welcomed.

\example tunnelDs9

*/
}}}
