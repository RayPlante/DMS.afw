namespace lsst { namespace afw { namespace image {
/**
 \page imageIterators Image Iterators

(Return to \ref secImage)

This code is in \link Image_1.cc\endlink.
Note that \link maskedImageIterators MaskedImage iterators\endlink work almost identically,
the main difference being how pixel values are set.

If you need access to nearby pixels, see the \link imageLocators Image locator\endlink tutorial.

\include Image_1.cc

\example Image_1.cc
 */

/**
 \page maskedImageIterators MaskedImage Iterators

(Return to \ref secImage)

This code is in \link MaskedImage_2.cc\endlink.
Note that \link imageIterators Image iterators\endlink work almost identically,
the main difference being how pixel values are set.

If you need access to nearby pixels, see the \link maskedImageLocators MaskedImage locator\endlink tutorial.

\include MaskedImage_1.cc

\example MaskedImage_1.cc
 */
}}}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 
namespace lsst { namespace afw { namespace image {
/**
 \page imageLocators Image Locators

(Return to \ref secImage)

\link imageIterators Iterators\endlink provide access to an %image, %pixel by %pixel.  You
often want access to neighbouring pixels (e.g. computing a gradient, or smoothing).
Let's consider the problem of smoothing with a
\code
1 2 1
2 4 2
1 2 1
\endcode
kernel (the code's in \link Image_2.cc\endlink):
\dontinclude Image_2.cc

Start by including Image.h defining a namespace for clarity:
\until main
Declare an Image
\until in(
\skip for
Set the %image to a ramp
\until }
\until }

That didn't gain us much, did it?  The code's a little messier than using
\c x_iterator.   But now we can add code to calculate the smoothed
%image.  First make an output image, and copy the input pixels:
\until <<=
(we didn't need to copy all of them, just the ones around the edge
that we won't smooth, but this is an easy way to do it).

Now do the smoothing:
\until }
\until }
(N.b. you don't really want to do this;  not only is this kernel
separable into \c 1 \c 2 \c 1 in first the \c x then the \c y directions,
but \c lsst::afw::math can do convolutions for you).

Here's a faster way to do the same thing (the use of an \c Image::Ptr is
just for variety)
\until }
\until }
The \c xy_loc::cached_location_t variables remember relative positions.

We can rewrite this to move setting \c nw, \c se etc. out of the loop:
\until }
\until }

You may have noticed that that kernel isn't normalised.  We could
change the coefficients, but that'd slow things down for integer
images (such as the one here); but we can normalise after the fact
by making an Image that shares pixels with the central part of \c out2
and manipulating it via overloaded \c operator/=
\until }

N.b. you can use the iterator embedded in the locator directly if you really want to, e.g.
\skip for
\until }
\until }
we called the iterator \c xy_x_iterator, not \c x_iterator, for consistency with MaskedImage.

Finally write some output files and close out \c main():
\until }

\example Image_2.cc
 */

/**
 \page maskedImageLocators MaskedImage Locators

(Return to \ref secImage)

(You might be interested to compare this example with the discussion
of Image \link imageLocators locators\endlink; apart from an include
file and a typedef, the only difference is the use of
<tt>ImageT::Pixel(y, 0x1, 10)</tt> as the assigned pixel value instead
of \c y).
 
\link imageIterators Iterators\endlink provide access to an %image, %pixel by %pixel.  You
often want access to neighbouring pixels (e.g. computing a gradient, or smoothing).
Let's consider the problem of smoothing with a
\code
1 2 1
2 4 2
1 2 1
\endcode
kernel (the code's in \link MaskedImage_2.cc\endlink):
\dontinclude MaskedImage_2.cc

Start by including Image.h defining a namespace for clarity:
\until main
Declare a MaskedImage
\until in(
\skip for
\skip for
Set the %image (but not the mask or variance) to a ramp
\until }
\until }

That didn't gain us much, did it?  The code's a little messier than using
\c x_iterator.   But now we can add code to calculate the smoothed
%image.  First make an output image, and copy the input pixels:
\until <<=
(we didn't need to copy all of them, just the ones around the edge
that we won't smooth, but this is an easy way to do it).

Now do the smoothing:
\until }
\until }
(N.b. you don't really want to do this;  not only is this kernel
separable into \c 1 \c 2 \c 1 in first the \c x then the \c y directions,
but \c lsst::afw::math can do convolutions for you).

Here's a faster way to do the same thing (the use of an \c Image::Ptr is
just for variety)
\until }
\until }
The \c xy_loc::cached_location_t variables remember relative positions.

We can rewrite this to move setting \c nw, \c se etc. out of the loop:
\until }
\until }

You may have noticed that that kernel isn't normalised.  We could
change the coefficients, but that'd slow things down for integer
images (such as the one here); but we can normalise after the fact
by making an Image that shares pixels with the central part of \c out2
and manipulating it via overloaded \c operator/=
\until }

N.b. you can use the iterator embedded in the locator directly if you really want to, e.g.
\skip for
\until }
\until }
Note that this isn't quite the same \c x_iterator as before, due to the need to make the \c x_iterator
move the underlying \c xy_locator.

Finally write some output files and close out \c main():
\until }

\example MaskedImage_2.cc
 */
}}}
