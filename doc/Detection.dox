namespace lsst { namespace afw { namespace detection {
/**
 \page Detection
 */

/**
 \page FootprintFunctorsExample FootprintFunctors

 \dontinclude footprintFunctor.cc

Demonstrate the use of FootprintFunctor%s to work with Footprint%s; the
code's in \link footprintFunctor.cc\endlink.

Start by including needed headers and declaring namespace aliases
\until namespace afwGeom
We don't want our functor visible in the global namespace, or even
outside this file, so put it in an anonymous namespace:
\until namespace
Declare our functor \c FindSetBits, it's parameterised over \c MaskT,
and provide a constructor. \c _bits is the accumulator for Mask bits in the Footprint
\until afwDetect::FootprintFunctor
\until afwDetect::FootprintFunctor
Define what it means to \c apply the functor; in this case, OR together the bits
\until }
Return the desired value
\until }
Clear the accumulator between Footprint%s
\until reset
Define the private variable, \c _bits
\until };
close our anonymous namespace
\until }

Now define a function, \c printBits, to exercise the \c FindSetBits. We'll
pass it a Mask and a list of Footprint%s
\until void printBits
Declare a FindSetBits, \c count, and tell it about our Mask
\until mask
Loop over all our Footprints
\until for
Clear the bitmask and
OR together all the bits under the footprint (\c *fiter is a \c Footprint::Ptr, so \c **fiter is a Footprint)
\until apply
Print the result
\until }
\until }

Just to show you this in action, let's make a MaskedImage and check its bits
\until }
Running the example should print \c 0x7.

\example footprintFunctor.cc
 */
}}}
