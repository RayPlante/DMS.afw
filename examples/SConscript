# -*- python -*-
import glob, re, sys
Import('env')

env.Program(["forEachPixel.cc"], LIBS=env.getlibs("afw"))
env.Program(["image.cc"], LIBS=env.getlibs("afw"))
env.Program(["image1.cc"], LIBS=env.getlibs("afw"))
env.Program(["image2.cc"], LIBS=env.getlibs("afw"))
env.Program(["mask.cc"], LIBS=env.getlibs("afw"))
env.Program(["decoratedImage.cc"], LIBS=env.getlibs("afw"))
env.Program(["maskedImage.cc"], LIBS=env.getlibs("afw"))
env.Program(["statistics.cc"], LIBS=env.getlibs("afw"))
env.Program(["maskedImage1.cc"], LIBS=env.getlibs("afw"))
env.Program(["maskedImage2.cc"], LIBS=env.getlibs("afw"))
env.Program(["footprintFunctor.cc"], LIBS=env.getlibs("afw"))

env.Program("maskedImageFitsIo", ["maskedImageFitsIo.cc"], LIBS=env.getlibs("afw"))
env.Program("timeImageIterators.cc", LIBS=env.getlibs("afw"))
env.Program("timeImageAddition", ["timeImageAddition.cc"], LIBS=env.getlibs("afw"))
env.Program("timePixelAccess", ["timePixelAccess.cc"], LIBS=env.getlibs("afw"))
env.Program(["timePixelAccessGil.cc"], LIBS=env.getlibs("afw"))

env.Program("chebyshev1Function", ["chebyshev1Function.cc"], LIBS=env.getlibs("afw"))
env.Program("gaussianFunction", ["gaussianFunction.cc"], LIBS=env.getlibs("afw"))
env.Program("lanczosFunction", ["lanczosFunction.cc"], LIBS=env.getlibs("afw"))
env.Program("polynomialFunction", ["polynomialFunction.cc"], LIBS=env.getlibs("afw"))

env.Program(["minimize.cc"], LIBS=env.getlibs("afw"))

env.Program("analyticKernel", ["analyticKernel.cc"], LIBS=env.getlibs("afw"))
env.Program("deltaFunctionKernels", ["deltaFunctionKernels.cc"], LIBS=env.getlibs("afw"))
env.Program("fixedKernel", ["fixedKernel.cc"], LIBS=env.getlibs("afw"))
env.Program("lanczosKernel", ["lanczosKernel.cc"], LIBS=env.getlibs("afw"))

env.Program("convolveLinear", ["convolveLinear.cc"], LIBS=env.getlibs("afw"))
env.Program("simpleConvolve", ["simpleConvolve.cc"], LIBS=env.getlibs("afw"))
env.Program("spatiallyVaryingConvolve", ["spatiallyVaryingConvolve.cc"], LIBS=env.getlibs("afw"))
env.Program("timeConvolve", ["timeConvolve.cc"], LIBS=env.getlibs("afw"))
env.Program("timeSpatiallyVaryingConvolve", ["timeSpatiallyVaryingConvolve.cc"], LIBS=env.getlibs("afw"))

env.Program("makeExposure", ["makeExposure.cc"], LIBS=env.getlibs("afw wcs"))
env.Program("wcsTest", ["wcsTest.cc"], LIBS=env.getlibs("afw wcs"))

env.Program("imageBackground", ["imageBackground.cc"], LIBS=env.getlibs("afw"))
env.Program("imageStatistics", ["imageStatistics.cc"], LIBS=env.getlibs("afw"))
env.Program("splineInterpolate", ["splineInterpolate.cc"], LIBS=env.getlibs("afw"))
env.Program("integrateCartesian", ["integrateCartesian.cc"], LIBS=env.getlibs("afw"))
env.Program("integratePolar", ["integratePolar.cc"], LIBS=env.getlibs("afw"))
env.Program("integrateExample", ["integrateExample.cc"], LIBS=env.getlibs("afw"))

env.Program("simpleStacker", ["simpleStacker.cc"], LIBS=env.getlibs("afw"))
env.Program("rowColumnStats", ["rowColumnStats.cc"], LIBS=env.getlibs("afw"))

env.Program(["ccd.cc"], LIBS=env.getlibs("afw"))
#
# Build all ticket test files
#
for cfile in glob.glob("ticket*.cc"):
    env.Program(cfile, LIBS=env.getlibs("afw"))

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Build the swig extension used to illustrate SpatialCells
#
env.CheckSwig("python", ilang="c++",
              includedProducts=["afw", "utils", "daf_base", "daf_persistence", "daf_data",
                                "pex_exceptions", "pex_logging", "pex_policy", "security"])

testSpatialCellLib = env.LoadableModuleIncomplete("_testSpatialCellLib",
                                                  ["testSpatialCellLib.i", "testSpatialCell.cc"],
                                                  CCFLAGS=re.sub("-Wall", "", " ".join(env['CCFLAGS'])),
                                                  LIBS=env.getlibs("afw"))

env.Program(["spatialCellExample.cc", "testSpatialCell.cc"], LIBS=env.getlibs("afw"))
